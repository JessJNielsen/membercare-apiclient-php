<?php
/**
 * ArrangementTemplate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * ArrangementTemplate Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArrangementTemplate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArrangementTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'web_enabled' => 'bool',
        'arrangment_name' => 'string',
        'arrangement_type' => '\Membercare\Client\Model\ArrangementType',
        'template_name' => 'string',
        'name' => 'string',
        'description' => 'string',
        'texts' => '\Membercare\Client\Model\ArrangementTemplateText[]',
        'short_description' => 'string',
        'long_description' => 'string',
        'min_participants' => 'int',
        'total_seats' => 'int',
        'budget_participants' => 'int',
        'email_address_reply_to' => 'string',
        'email_address_sender' => 'string',
        'email_address_sender_name' => 'string',
        'allow_invoice_after_days_before' => 'int',
        'enroll_before' => 'int',
        'payment_option' => '\Membercare\Client\Model\PaymentOption',
        'reminder_days_before' => 'int',
        'automatic_confirmation' => 'bool',
        'enable_confirmation_by_email' => 'bool',
        'enable_confirmation_by_pdf' => 'bool',
        'enable_confirmation_by_sms' => 'bool',
        'enable_reminder_by_email' => 'bool',
        'enable_reminder_by_sms' => 'bool',
        'integrate_to_community' => 'bool',
        'waiting_list_only' => 'bool',
        'for_invitees_only' => 'bool',
        'show_in_calendar' => 'bool',
        'section' => '\Membercare\Client\Model\ArrangementGroup',
        'groups' => '\Membercare\Client\Model\ArrangementGroup[]',
        'area' => '\Membercare\Client\Model\ArrangementArea',
        'areas' => '\Membercare\Client\Model\ArrangementArea[]',
        'category' => '\Membercare\Client\Model\ArrangementCategory',
        'categories' => '\Membercare\Client\Model\ArrangementCategory[]',
        'sub_category' => '\Membercare\Client\Model\ArrangementSubCategory',
        'sub_categories' => '\Membercare\Client\Model\ArrangementSubCategory[]',
        'crew_templates' => '\Membercare\Client\Model\EventCrewTemplate[]',
        'allowed_participant_category_templates' => '\Membercare\Client\Model\AllowedParticipantCategoryTemplate[]',
        'custom_field_values' => '\Membercare\Client\Model\CustomFieldValue[]',
        'start_date_time' => '\DateTime',
        'reminder_time' => '\DateTime',
        'finance_dimensions' => '\Membercare\Client\Model\FinanceDimensions',
        'work_group' => '\Membercare\Client\Model\WorkGroup',
        'template_service_set' => '\Membercare\Client\Model\TemplateServiceSet',
        'organizations' => '\Membercare\Client\Model\Organization[]',
        'earliest_participant_list_view_days' => 'int',
        'last_participant_list_view_days' => 'int',
        'cancel_signup_days_before_start' => 'int',
        'questions' => '\Membercare\Client\Model\Question[]',
        'grade_category' => '\Membercare\Client\Model\GradeCategory'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'web_enabled' => null,
        'arrangment_name' => null,
        'arrangement_type' => null,
        'template_name' => null,
        'name' => null,
        'description' => null,
        'texts' => null,
        'short_description' => null,
        'long_description' => null,
        'min_participants' => 'int64',
        'total_seats' => 'int64',
        'budget_participants' => 'int64',
        'email_address_reply_to' => null,
        'email_address_sender' => null,
        'email_address_sender_name' => null,
        'allow_invoice_after_days_before' => 'int64',
        'enroll_before' => 'int64',
        'payment_option' => null,
        'reminder_days_before' => 'int64',
        'automatic_confirmation' => null,
        'enable_confirmation_by_email' => null,
        'enable_confirmation_by_pdf' => null,
        'enable_confirmation_by_sms' => null,
        'enable_reminder_by_email' => null,
        'enable_reminder_by_sms' => null,
        'integrate_to_community' => null,
        'waiting_list_only' => null,
        'for_invitees_only' => null,
        'show_in_calendar' => null,
        'section' => null,
        'groups' => null,
        'area' => null,
        'areas' => null,
        'category' => null,
        'categories' => null,
        'sub_category' => null,
        'sub_categories' => null,
        'crew_templates' => null,
        'allowed_participant_category_templates' => null,
        'custom_field_values' => null,
        'start_date_time' => 'date-time',
        'reminder_time' => 'date-time',
        'finance_dimensions' => null,
        'work_group' => null,
        'template_service_set' => null,
        'organizations' => null,
        'earliest_participant_list_view_days' => 'int64',
        'last_participant_list_view_days' => 'int64',
        'cancel_signup_days_before_start' => 'int64',
        'questions' => null,
        'grade_category' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'web_enabled' => 'webEnabled',
        'arrangment_name' => 'arrangmentName',
        'arrangement_type' => 'arrangementType',
        'template_name' => 'templateName',
        'name' => 'name',
        'description' => 'description',
        'texts' => 'texts',
        'short_description' => 'shortDescription',
        'long_description' => 'longDescription',
        'min_participants' => 'minParticipants',
        'total_seats' => 'totalSeats',
        'budget_participants' => 'budgetParticipants',
        'email_address_reply_to' => 'emailAddressReplyTo',
        'email_address_sender' => 'emailAddressSender',
        'email_address_sender_name' => 'emailAddressSenderName',
        'allow_invoice_after_days_before' => 'allowInvoiceAfterDaysBefore',
        'enroll_before' => 'enrollBefore',
        'payment_option' => 'paymentOption',
        'reminder_days_before' => 'reminderDaysBefore',
        'automatic_confirmation' => 'automaticConfirmation',
        'enable_confirmation_by_email' => 'enableConfirmationByEmail',
        'enable_confirmation_by_pdf' => 'enableConfirmationByPdf',
        'enable_confirmation_by_sms' => 'enableConfirmationBySms',
        'enable_reminder_by_email' => 'enableReminderByEmail',
        'enable_reminder_by_sms' => 'enableReminderBySms',
        'integrate_to_community' => 'integrateToCommunity',
        'waiting_list_only' => 'waitingListOnly',
        'for_invitees_only' => 'forInviteesOnly',
        'show_in_calendar' => 'showInCalendar',
        'section' => 'section',
        'groups' => 'groups',
        'area' => 'area',
        'areas' => 'areas',
        'category' => 'category',
        'categories' => 'categories',
        'sub_category' => 'subCategory',
        'sub_categories' => 'subCategories',
        'crew_templates' => 'crewTemplates',
        'allowed_participant_category_templates' => 'allowedParticipantCategoryTemplates',
        'custom_field_values' => 'customFieldValues',
        'start_date_time' => 'startDateTime',
        'reminder_time' => 'reminderTime',
        'finance_dimensions' => 'financeDimensions',
        'work_group' => 'workGroup',
        'template_service_set' => 'templateServiceSet',
        'organizations' => 'organizations',
        'earliest_participant_list_view_days' => 'earliestParticipantListViewDays',
        'last_participant_list_view_days' => 'lastParticipantListViewDays',
        'cancel_signup_days_before_start' => 'cancelSignupDaysBeforeStart',
        'questions' => 'questions',
        'grade_category' => 'gradeCategory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'web_enabled' => 'setWebEnabled',
        'arrangment_name' => 'setArrangmentName',
        'arrangement_type' => 'setArrangementType',
        'template_name' => 'setTemplateName',
        'name' => 'setName',
        'description' => 'setDescription',
        'texts' => 'setTexts',
        'short_description' => 'setShortDescription',
        'long_description' => 'setLongDescription',
        'min_participants' => 'setMinParticipants',
        'total_seats' => 'setTotalSeats',
        'budget_participants' => 'setBudgetParticipants',
        'email_address_reply_to' => 'setEmailAddressReplyTo',
        'email_address_sender' => 'setEmailAddressSender',
        'email_address_sender_name' => 'setEmailAddressSenderName',
        'allow_invoice_after_days_before' => 'setAllowInvoiceAfterDaysBefore',
        'enroll_before' => 'setEnrollBefore',
        'payment_option' => 'setPaymentOption',
        'reminder_days_before' => 'setReminderDaysBefore',
        'automatic_confirmation' => 'setAutomaticConfirmation',
        'enable_confirmation_by_email' => 'setEnableConfirmationByEmail',
        'enable_confirmation_by_pdf' => 'setEnableConfirmationByPdf',
        'enable_confirmation_by_sms' => 'setEnableConfirmationBySms',
        'enable_reminder_by_email' => 'setEnableReminderByEmail',
        'enable_reminder_by_sms' => 'setEnableReminderBySms',
        'integrate_to_community' => 'setIntegrateToCommunity',
        'waiting_list_only' => 'setWaitingListOnly',
        'for_invitees_only' => 'setForInviteesOnly',
        'show_in_calendar' => 'setShowInCalendar',
        'section' => 'setSection',
        'groups' => 'setGroups',
        'area' => 'setArea',
        'areas' => 'setAreas',
        'category' => 'setCategory',
        'categories' => 'setCategories',
        'sub_category' => 'setSubCategory',
        'sub_categories' => 'setSubCategories',
        'crew_templates' => 'setCrewTemplates',
        'allowed_participant_category_templates' => 'setAllowedParticipantCategoryTemplates',
        'custom_field_values' => 'setCustomFieldValues',
        'start_date_time' => 'setStartDateTime',
        'reminder_time' => 'setReminderTime',
        'finance_dimensions' => 'setFinanceDimensions',
        'work_group' => 'setWorkGroup',
        'template_service_set' => 'setTemplateServiceSet',
        'organizations' => 'setOrganizations',
        'earliest_participant_list_view_days' => 'setEarliestParticipantListViewDays',
        'last_participant_list_view_days' => 'setLastParticipantListViewDays',
        'cancel_signup_days_before_start' => 'setCancelSignupDaysBeforeStart',
        'questions' => 'setQuestions',
        'grade_category' => 'setGradeCategory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'web_enabled' => 'getWebEnabled',
        'arrangment_name' => 'getArrangmentName',
        'arrangement_type' => 'getArrangementType',
        'template_name' => 'getTemplateName',
        'name' => 'getName',
        'description' => 'getDescription',
        'texts' => 'getTexts',
        'short_description' => 'getShortDescription',
        'long_description' => 'getLongDescription',
        'min_participants' => 'getMinParticipants',
        'total_seats' => 'getTotalSeats',
        'budget_participants' => 'getBudgetParticipants',
        'email_address_reply_to' => 'getEmailAddressReplyTo',
        'email_address_sender' => 'getEmailAddressSender',
        'email_address_sender_name' => 'getEmailAddressSenderName',
        'allow_invoice_after_days_before' => 'getAllowInvoiceAfterDaysBefore',
        'enroll_before' => 'getEnrollBefore',
        'payment_option' => 'getPaymentOption',
        'reminder_days_before' => 'getReminderDaysBefore',
        'automatic_confirmation' => 'getAutomaticConfirmation',
        'enable_confirmation_by_email' => 'getEnableConfirmationByEmail',
        'enable_confirmation_by_pdf' => 'getEnableConfirmationByPdf',
        'enable_confirmation_by_sms' => 'getEnableConfirmationBySms',
        'enable_reminder_by_email' => 'getEnableReminderByEmail',
        'enable_reminder_by_sms' => 'getEnableReminderBySms',
        'integrate_to_community' => 'getIntegrateToCommunity',
        'waiting_list_only' => 'getWaitingListOnly',
        'for_invitees_only' => 'getForInviteesOnly',
        'show_in_calendar' => 'getShowInCalendar',
        'section' => 'getSection',
        'groups' => 'getGroups',
        'area' => 'getArea',
        'areas' => 'getAreas',
        'category' => 'getCategory',
        'categories' => 'getCategories',
        'sub_category' => 'getSubCategory',
        'sub_categories' => 'getSubCategories',
        'crew_templates' => 'getCrewTemplates',
        'allowed_participant_category_templates' => 'getAllowedParticipantCategoryTemplates',
        'custom_field_values' => 'getCustomFieldValues',
        'start_date_time' => 'getStartDateTime',
        'reminder_time' => 'getReminderTime',
        'finance_dimensions' => 'getFinanceDimensions',
        'work_group' => 'getWorkGroup',
        'template_service_set' => 'getTemplateServiceSet',
        'organizations' => 'getOrganizations',
        'earliest_participant_list_view_days' => 'getEarliestParticipantListViewDays',
        'last_participant_list_view_days' => 'getLastParticipantListViewDays',
        'cancel_signup_days_before_start' => 'getCancelSignupDaysBeforeStart',
        'questions' => 'getQuestions',
        'grade_category' => 'getGradeCategory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['web_enabled'] = isset($data['web_enabled']) ? $data['web_enabled'] : null;
        $this->container['arrangment_name'] = isset($data['arrangment_name']) ? $data['arrangment_name'] : null;
        $this->container['arrangement_type'] = isset($data['arrangement_type']) ? $data['arrangement_type'] : null;
        $this->container['template_name'] = isset($data['template_name']) ? $data['template_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['texts'] = isset($data['texts']) ? $data['texts'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['min_participants'] = isset($data['min_participants']) ? $data['min_participants'] : null;
        $this->container['total_seats'] = isset($data['total_seats']) ? $data['total_seats'] : null;
        $this->container['budget_participants'] = isset($data['budget_participants']) ? $data['budget_participants'] : null;
        $this->container['email_address_reply_to'] = isset($data['email_address_reply_to']) ? $data['email_address_reply_to'] : null;
        $this->container['email_address_sender'] = isset($data['email_address_sender']) ? $data['email_address_sender'] : null;
        $this->container['email_address_sender_name'] = isset($data['email_address_sender_name']) ? $data['email_address_sender_name'] : null;
        $this->container['allow_invoice_after_days_before'] = isset($data['allow_invoice_after_days_before']) ? $data['allow_invoice_after_days_before'] : null;
        $this->container['enroll_before'] = isset($data['enroll_before']) ? $data['enroll_before'] : null;
        $this->container['payment_option'] = isset($data['payment_option']) ? $data['payment_option'] : null;
        $this->container['reminder_days_before'] = isset($data['reminder_days_before']) ? $data['reminder_days_before'] : null;
        $this->container['automatic_confirmation'] = isset($data['automatic_confirmation']) ? $data['automatic_confirmation'] : null;
        $this->container['enable_confirmation_by_email'] = isset($data['enable_confirmation_by_email']) ? $data['enable_confirmation_by_email'] : null;
        $this->container['enable_confirmation_by_pdf'] = isset($data['enable_confirmation_by_pdf']) ? $data['enable_confirmation_by_pdf'] : null;
        $this->container['enable_confirmation_by_sms'] = isset($data['enable_confirmation_by_sms']) ? $data['enable_confirmation_by_sms'] : null;
        $this->container['enable_reminder_by_email'] = isset($data['enable_reminder_by_email']) ? $data['enable_reminder_by_email'] : null;
        $this->container['enable_reminder_by_sms'] = isset($data['enable_reminder_by_sms']) ? $data['enable_reminder_by_sms'] : null;
        $this->container['integrate_to_community'] = isset($data['integrate_to_community']) ? $data['integrate_to_community'] : null;
        $this->container['waiting_list_only'] = isset($data['waiting_list_only']) ? $data['waiting_list_only'] : null;
        $this->container['for_invitees_only'] = isset($data['for_invitees_only']) ? $data['for_invitees_only'] : null;
        $this->container['show_in_calendar'] = isset($data['show_in_calendar']) ? $data['show_in_calendar'] : null;
        $this->container['section'] = isset($data['section']) ? $data['section'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['area'] = isset($data['area']) ? $data['area'] : null;
        $this->container['areas'] = isset($data['areas']) ? $data['areas'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['sub_category'] = isset($data['sub_category']) ? $data['sub_category'] : null;
        $this->container['sub_categories'] = isset($data['sub_categories']) ? $data['sub_categories'] : null;
        $this->container['crew_templates'] = isset($data['crew_templates']) ? $data['crew_templates'] : null;
        $this->container['allowed_participant_category_templates'] = isset($data['allowed_participant_category_templates']) ? $data['allowed_participant_category_templates'] : null;
        $this->container['custom_field_values'] = isset($data['custom_field_values']) ? $data['custom_field_values'] : null;
        $this->container['start_date_time'] = isset($data['start_date_time']) ? $data['start_date_time'] : null;
        $this->container['reminder_time'] = isset($data['reminder_time']) ? $data['reminder_time'] : null;
        $this->container['finance_dimensions'] = isset($data['finance_dimensions']) ? $data['finance_dimensions'] : null;
        $this->container['work_group'] = isset($data['work_group']) ? $data['work_group'] : null;
        $this->container['template_service_set'] = isset($data['template_service_set']) ? $data['template_service_set'] : null;
        $this->container['organizations'] = isset($data['organizations']) ? $data['organizations'] : null;
        $this->container['earliest_participant_list_view_days'] = isset($data['earliest_participant_list_view_days']) ? $data['earliest_participant_list_view_days'] : null;
        $this->container['last_participant_list_view_days'] = isset($data['last_participant_list_view_days']) ? $data['last_participant_list_view_days'] : null;
        $this->container['cancel_signup_days_before_start'] = isset($data['cancel_signup_days_before_start']) ? $data['cancel_signup_days_before_start'] : null;
        $this->container['questions'] = isset($data['questions']) ? $data['questions'] : null;
        $this->container['grade_category'] = isset($data['grade_category']) ? $data['grade_category'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id CourseEventTmplId
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets web_enabled
     *
     * @return bool
     */
    public function getWebEnabled()
    {
        return $this->container['web_enabled'];
    }

    /**
     * Sets web_enabled
     *
     * @param bool $web_enabled web_enabled
     *
     * @return $this
     */
    public function setWebEnabled($web_enabled)
    {
        $this->container['web_enabled'] = $web_enabled;

        return $this;
    }

    /**
     * Gets arrangment_name
     *
     * @return string
     */
    public function getArrangmentName()
    {
        return $this->container['arrangment_name'];
    }

    /**
     * Sets arrangment_name
     *
     * @param string $arrangment_name arrangment_name
     *
     * @return $this
     */
    public function setArrangmentName($arrangment_name)
    {
        $this->container['arrangment_name'] = $arrangment_name;

        return $this;
    }

    /**
     * Gets arrangement_type
     *
     * @return \Membercare\Client\Model\ArrangementType
     */
    public function getArrangementType()
    {
        return $this->container['arrangement_type'];
    }

    /**
     * Sets arrangement_type
     *
     * @param \Membercare\Client\Model\ArrangementType $arrangement_type arrangement_type
     *
     * @return $this
     */
    public function setArrangementType($arrangement_type)
    {
        $this->container['arrangement_type'] = $arrangement_type;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string $template_name template_name
     *
     * @return $this
     */
    public function setTemplateName($template_name)
    {
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets texts
     *
     * @return \Membercare\Client\Model\ArrangementTemplateText[]
     */
    public function getTexts()
    {
        return $this->container['texts'];
    }

    /**
     * Sets texts
     *
     * @param \Membercare\Client\Model\ArrangementTemplateText[] $texts texts
     *
     * @return $this
     */
    public function setTexts($texts)
    {
        $this->container['texts'] = $texts;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description short_description
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string $long_description long_description
     *
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets min_participants
     *
     * @return int
     */
    public function getMinParticipants()
    {
        return $this->container['min_participants'];
    }

    /**
     * Sets min_participants
     *
     * @param int $min_participants min_participants
     *
     * @return $this
     */
    public function setMinParticipants($min_participants)
    {
        $this->container['min_participants'] = $min_participants;

        return $this;
    }

    /**
     * Gets total_seats
     *
     * @return int
     */
    public function getTotalSeats()
    {
        return $this->container['total_seats'];
    }

    /**
     * Sets total_seats
     *
     * @param int $total_seats total_seats
     *
     * @return $this
     */
    public function setTotalSeats($total_seats)
    {
        $this->container['total_seats'] = $total_seats;

        return $this;
    }

    /**
     * Gets budget_participants
     *
     * @return int
     */
    public function getBudgetParticipants()
    {
        return $this->container['budget_participants'];
    }

    /**
     * Sets budget_participants
     *
     * @param int $budget_participants budget_participants
     *
     * @return $this
     */
    public function setBudgetParticipants($budget_participants)
    {
        $this->container['budget_participants'] = $budget_participants;

        return $this;
    }

    /**
     * Gets email_address_reply_to
     *
     * @return string
     */
    public function getEmailAddressReplyTo()
    {
        return $this->container['email_address_reply_to'];
    }

    /**
     * Sets email_address_reply_to
     *
     * @param string $email_address_reply_to email_address_reply_to
     *
     * @return $this
     */
    public function setEmailAddressReplyTo($email_address_reply_to)
    {
        $this->container['email_address_reply_to'] = $email_address_reply_to;

        return $this;
    }

    /**
     * Gets email_address_sender
     *
     * @return string
     */
    public function getEmailAddressSender()
    {
        return $this->container['email_address_sender'];
    }

    /**
     * Sets email_address_sender
     *
     * @param string $email_address_sender email_address_sender
     *
     * @return $this
     */
    public function setEmailAddressSender($email_address_sender)
    {
        $this->container['email_address_sender'] = $email_address_sender;

        return $this;
    }

    /**
     * Gets email_address_sender_name
     *
     * @return string
     */
    public function getEmailAddressSenderName()
    {
        return $this->container['email_address_sender_name'];
    }

    /**
     * Sets email_address_sender_name
     *
     * @param string $email_address_sender_name email_address_sender_name
     *
     * @return $this
     */
    public function setEmailAddressSenderName($email_address_sender_name)
    {
        $this->container['email_address_sender_name'] = $email_address_sender_name;

        return $this;
    }

    /**
     * Gets allow_invoice_after_days_before
     *
     * @return int
     */
    public function getAllowInvoiceAfterDaysBefore()
    {
        return $this->container['allow_invoice_after_days_before'];
    }

    /**
     * Sets allow_invoice_after_days_before
     *
     * @param int $allow_invoice_after_days_before allow_invoice_after_days_before
     *
     * @return $this
     */
    public function setAllowInvoiceAfterDaysBefore($allow_invoice_after_days_before)
    {
        $this->container['allow_invoice_after_days_before'] = $allow_invoice_after_days_before;

        return $this;
    }

    /**
     * Gets enroll_before
     *
     * @return int
     */
    public function getEnrollBefore()
    {
        return $this->container['enroll_before'];
    }

    /**
     * Sets enroll_before
     *
     * @param int $enroll_before enroll_before
     *
     * @return $this
     */
    public function setEnrollBefore($enroll_before)
    {
        $this->container['enroll_before'] = $enroll_before;

        return $this;
    }

    /**
     * Gets payment_option
     *
     * @return \Membercare\Client\Model\PaymentOption
     */
    public function getPaymentOption()
    {
        return $this->container['payment_option'];
    }

    /**
     * Sets payment_option
     *
     * @param \Membercare\Client\Model\PaymentOption $payment_option payment_option
     *
     * @return $this
     */
    public function setPaymentOption($payment_option)
    {
        $this->container['payment_option'] = $payment_option;

        return $this;
    }

    /**
     * Gets reminder_days_before
     *
     * @return int
     */
    public function getReminderDaysBefore()
    {
        return $this->container['reminder_days_before'];
    }

    /**
     * Sets reminder_days_before
     *
     * @param int $reminder_days_before reminder_days_before
     *
     * @return $this
     */
    public function setReminderDaysBefore($reminder_days_before)
    {
        $this->container['reminder_days_before'] = $reminder_days_before;

        return $this;
    }

    /**
     * Gets automatic_confirmation
     *
     * @return bool
     */
    public function getAutomaticConfirmation()
    {
        return $this->container['automatic_confirmation'];
    }

    /**
     * Sets automatic_confirmation
     *
     * @param bool $automatic_confirmation automatic_confirmation
     *
     * @return $this
     */
    public function setAutomaticConfirmation($automatic_confirmation)
    {
        $this->container['automatic_confirmation'] = $automatic_confirmation;

        return $this;
    }

    /**
     * Gets enable_confirmation_by_email
     *
     * @return bool
     */
    public function getEnableConfirmationByEmail()
    {
        return $this->container['enable_confirmation_by_email'];
    }

    /**
     * Sets enable_confirmation_by_email
     *
     * @param bool $enable_confirmation_by_email enable_confirmation_by_email
     *
     * @return $this
     */
    public function setEnableConfirmationByEmail($enable_confirmation_by_email)
    {
        $this->container['enable_confirmation_by_email'] = $enable_confirmation_by_email;

        return $this;
    }

    /**
     * Gets enable_confirmation_by_pdf
     *
     * @return bool
     */
    public function getEnableConfirmationByPdf()
    {
        return $this->container['enable_confirmation_by_pdf'];
    }

    /**
     * Sets enable_confirmation_by_pdf
     *
     * @param bool $enable_confirmation_by_pdf enable_confirmation_by_pdf
     *
     * @return $this
     */
    public function setEnableConfirmationByPdf($enable_confirmation_by_pdf)
    {
        $this->container['enable_confirmation_by_pdf'] = $enable_confirmation_by_pdf;

        return $this;
    }

    /**
     * Gets enable_confirmation_by_sms
     *
     * @return bool
     */
    public function getEnableConfirmationBySms()
    {
        return $this->container['enable_confirmation_by_sms'];
    }

    /**
     * Sets enable_confirmation_by_sms
     *
     * @param bool $enable_confirmation_by_sms enable_confirmation_by_sms
     *
     * @return $this
     */
    public function setEnableConfirmationBySms($enable_confirmation_by_sms)
    {
        $this->container['enable_confirmation_by_sms'] = $enable_confirmation_by_sms;

        return $this;
    }

    /**
     * Gets enable_reminder_by_email
     *
     * @return bool
     */
    public function getEnableReminderByEmail()
    {
        return $this->container['enable_reminder_by_email'];
    }

    /**
     * Sets enable_reminder_by_email
     *
     * @param bool $enable_reminder_by_email enable_reminder_by_email
     *
     * @return $this
     */
    public function setEnableReminderByEmail($enable_reminder_by_email)
    {
        $this->container['enable_reminder_by_email'] = $enable_reminder_by_email;

        return $this;
    }

    /**
     * Gets enable_reminder_by_sms
     *
     * @return bool
     */
    public function getEnableReminderBySms()
    {
        return $this->container['enable_reminder_by_sms'];
    }

    /**
     * Sets enable_reminder_by_sms
     *
     * @param bool $enable_reminder_by_sms enable_reminder_by_sms
     *
     * @return $this
     */
    public function setEnableReminderBySms($enable_reminder_by_sms)
    {
        $this->container['enable_reminder_by_sms'] = $enable_reminder_by_sms;

        return $this;
    }

    /**
     * Gets integrate_to_community
     *
     * @return bool
     */
    public function getIntegrateToCommunity()
    {
        return $this->container['integrate_to_community'];
    }

    /**
     * Sets integrate_to_community
     *
     * @param bool $integrate_to_community integrate_to_community
     *
     * @return $this
     */
    public function setIntegrateToCommunity($integrate_to_community)
    {
        $this->container['integrate_to_community'] = $integrate_to_community;

        return $this;
    }

    /**
     * Gets waiting_list_only
     *
     * @return bool
     */
    public function getWaitingListOnly()
    {
        return $this->container['waiting_list_only'];
    }

    /**
     * Sets waiting_list_only
     *
     * @param bool $waiting_list_only waiting_list_only
     *
     * @return $this
     */
    public function setWaitingListOnly($waiting_list_only)
    {
        $this->container['waiting_list_only'] = $waiting_list_only;

        return $this;
    }

    /**
     * Gets for_invitees_only
     *
     * @return bool
     */
    public function getForInviteesOnly()
    {
        return $this->container['for_invitees_only'];
    }

    /**
     * Sets for_invitees_only
     *
     * @param bool $for_invitees_only for_invitees_only
     *
     * @return $this
     */
    public function setForInviteesOnly($for_invitees_only)
    {
        $this->container['for_invitees_only'] = $for_invitees_only;

        return $this;
    }

    /**
     * Gets show_in_calendar
     *
     * @return bool
     */
    public function getShowInCalendar()
    {
        return $this->container['show_in_calendar'];
    }

    /**
     * Sets show_in_calendar
     *
     * @param bool $show_in_calendar show_in_calendar
     *
     * @return $this
     */
    public function setShowInCalendar($show_in_calendar)
    {
        $this->container['show_in_calendar'] = $show_in_calendar;

        return $this;
    }

    /**
     * Gets section
     *
     * @return \Membercare\Client\Model\ArrangementGroup
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param \Membercare\Client\Model\ArrangementGroup $section section
     *
     * @return $this
     */
    public function setSection($section)
    {
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \Membercare\Client\Model\ArrangementGroup[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \Membercare\Client\Model\ArrangementGroup[] $groups groups
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets area
     *
     * @return \Membercare\Client\Model\ArrangementArea
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param \Membercare\Client\Model\ArrangementArea $area area
     *
     * @return $this
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets areas
     *
     * @return \Membercare\Client\Model\ArrangementArea[]
     */
    public function getAreas()
    {
        return $this->container['areas'];
    }

    /**
     * Sets areas
     *
     * @param \Membercare\Client\Model\ArrangementArea[] $areas areas
     *
     * @return $this
     */
    public function setAreas($areas)
    {
        $this->container['areas'] = $areas;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Membercare\Client\Model\ArrangementCategory
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Membercare\Client\Model\ArrangementCategory $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Membercare\Client\Model\ArrangementCategory[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Membercare\Client\Model\ArrangementCategory[] $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets sub_category
     *
     * @return \Membercare\Client\Model\ArrangementSubCategory
     */
    public function getSubCategory()
    {
        return $this->container['sub_category'];
    }

    /**
     * Sets sub_category
     *
     * @param \Membercare\Client\Model\ArrangementSubCategory $sub_category sub_category
     *
     * @return $this
     */
    public function setSubCategory($sub_category)
    {
        $this->container['sub_category'] = $sub_category;

        return $this;
    }

    /**
     * Gets sub_categories
     *
     * @return \Membercare\Client\Model\ArrangementSubCategory[]
     */
    public function getSubCategories()
    {
        return $this->container['sub_categories'];
    }

    /**
     * Sets sub_categories
     *
     * @param \Membercare\Client\Model\ArrangementSubCategory[] $sub_categories sub_categories
     *
     * @return $this
     */
    public function setSubCategories($sub_categories)
    {
        $this->container['sub_categories'] = $sub_categories;

        return $this;
    }

    /**
     * Gets crew_templates
     *
     * @return \Membercare\Client\Model\EventCrewTemplate[]
     */
    public function getCrewTemplates()
    {
        return $this->container['crew_templates'];
    }

    /**
     * Sets crew_templates
     *
     * @param \Membercare\Client\Model\EventCrewTemplate[] $crew_templates crew_templates
     *
     * @return $this
     */
    public function setCrewTemplates($crew_templates)
    {
        $this->container['crew_templates'] = $crew_templates;

        return $this;
    }

    /**
     * Gets allowed_participant_category_templates
     *
     * @return \Membercare\Client\Model\AllowedParticipantCategoryTemplate[]
     */
    public function getAllowedParticipantCategoryTemplates()
    {
        return $this->container['allowed_participant_category_templates'];
    }

    /**
     * Sets allowed_participant_category_templates
     *
     * @param \Membercare\Client\Model\AllowedParticipantCategoryTemplate[] $allowed_participant_category_templates allowed_participant_category_templates
     *
     * @return $this
     */
    public function setAllowedParticipantCategoryTemplates($allowed_participant_category_templates)
    {
        $this->container['allowed_participant_category_templates'] = $allowed_participant_category_templates;

        return $this;
    }

    /**
     * Gets custom_field_values
     *
     * @return \Membercare\Client\Model\CustomFieldValue[]
     */
    public function getCustomFieldValues()
    {
        return $this->container['custom_field_values'];
    }

    /**
     * Sets custom_field_values
     *
     * @param \Membercare\Client\Model\CustomFieldValue[] $custom_field_values custom_field_values
     *
     * @return $this
     */
    public function setCustomFieldValues($custom_field_values)
    {
        $this->container['custom_field_values'] = $custom_field_values;

        return $this;
    }

    /**
     * Gets start_date_time
     *
     * @return \DateTime
     */
    public function getStartDateTime()
    {
        return $this->container['start_date_time'];
    }

    /**
     * Sets start_date_time
     *
     * @param \DateTime $start_date_time start_date_time
     *
     * @return $this
     */
    public function setStartDateTime($start_date_time)
    {
        $this->container['start_date_time'] = $start_date_time;

        return $this;
    }

    /**
     * Gets reminder_time
     *
     * @return \DateTime
     */
    public function getReminderTime()
    {
        return $this->container['reminder_time'];
    }

    /**
     * Sets reminder_time
     *
     * @param \DateTime $reminder_time reminder_time
     *
     * @return $this
     */
    public function setReminderTime($reminder_time)
    {
        $this->container['reminder_time'] = $reminder_time;

        return $this;
    }

    /**
     * Gets finance_dimensions
     *
     * @return \Membercare\Client\Model\FinanceDimensions
     */
    public function getFinanceDimensions()
    {
        return $this->container['finance_dimensions'];
    }

    /**
     * Sets finance_dimensions
     *
     * @param \Membercare\Client\Model\FinanceDimensions $finance_dimensions finance_dimensions
     *
     * @return $this
     */
    public function setFinanceDimensions($finance_dimensions)
    {
        $this->container['finance_dimensions'] = $finance_dimensions;

        return $this;
    }

    /**
     * Gets work_group
     *
     * @return \Membercare\Client\Model\WorkGroup
     */
    public function getWorkGroup()
    {
        return $this->container['work_group'];
    }

    /**
     * Sets work_group
     *
     * @param \Membercare\Client\Model\WorkGroup $work_group work_group
     *
     * @return $this
     */
    public function setWorkGroup($work_group)
    {
        $this->container['work_group'] = $work_group;

        return $this;
    }

    /**
     * Gets template_service_set
     *
     * @return \Membercare\Client\Model\TemplateServiceSet
     */
    public function getTemplateServiceSet()
    {
        return $this->container['template_service_set'];
    }

    /**
     * Sets template_service_set
     *
     * @param \Membercare\Client\Model\TemplateServiceSet $template_service_set template_service_set
     *
     * @return $this
     */
    public function setTemplateServiceSet($template_service_set)
    {
        $this->container['template_service_set'] = $template_service_set;

        return $this;
    }

    /**
     * Gets organizations
     *
     * @return \Membercare\Client\Model\Organization[]
     */
    public function getOrganizations()
    {
        return $this->container['organizations'];
    }

    /**
     * Sets organizations
     *
     * @param \Membercare\Client\Model\Organization[] $organizations organizations
     *
     * @return $this
     */
    public function setOrganizations($organizations)
    {
        $this->container['organizations'] = $organizations;

        return $this;
    }

    /**
     * Gets earliest_participant_list_view_days
     *
     * @return int
     */
    public function getEarliestParticipantListViewDays()
    {
        return $this->container['earliest_participant_list_view_days'];
    }

    /**
     * Sets earliest_participant_list_view_days
     *
     * @param int $earliest_participant_list_view_days earliest_participant_list_view_days
     *
     * @return $this
     */
    public function setEarliestParticipantListViewDays($earliest_participant_list_view_days)
    {
        $this->container['earliest_participant_list_view_days'] = $earliest_participant_list_view_days;

        return $this;
    }

    /**
     * Gets last_participant_list_view_days
     *
     * @return int
     */
    public function getLastParticipantListViewDays()
    {
        return $this->container['last_participant_list_view_days'];
    }

    /**
     * Sets last_participant_list_view_days
     *
     * @param int $last_participant_list_view_days last_participant_list_view_days
     *
     * @return $this
     */
    public function setLastParticipantListViewDays($last_participant_list_view_days)
    {
        $this->container['last_participant_list_view_days'] = $last_participant_list_view_days;

        return $this;
    }

    /**
     * Gets cancel_signup_days_before_start
     *
     * @return int
     */
    public function getCancelSignupDaysBeforeStart()
    {
        return $this->container['cancel_signup_days_before_start'];
    }

    /**
     * Sets cancel_signup_days_before_start
     *
     * @param int $cancel_signup_days_before_start cancel_signup_days_before_start
     *
     * @return $this
     */
    public function setCancelSignupDaysBeforeStart($cancel_signup_days_before_start)
    {
        $this->container['cancel_signup_days_before_start'] = $cancel_signup_days_before_start;

        return $this;
    }

    /**
     * Gets questions
     *
     * @return \Membercare\Client\Model\Question[]
     */
    public function getQuestions()
    {
        return $this->container['questions'];
    }

    /**
     * Sets questions
     *
     * @param \Membercare\Client\Model\Question[] $questions questions
     *
     * @return $this
     */
    public function setQuestions($questions)
    {
        $this->container['questions'] = $questions;

        return $this;
    }

    /**
     * Gets grade_category
     *
     * @return \Membercare\Client\Model\GradeCategory
     */
    public function getGradeCategory()
    {
        return $this->container['grade_category'];
    }

    /**
     * Sets grade_category
     *
     * @param \Membercare\Client\Model\GradeCategory $grade_category grade_category
     *
     * @return $this
     */
    public function setGradeCategory($grade_category)
    {
        $this->container['grade_category'] = $grade_category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
