<?php
/**
 * ServiceSet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * ServiceSet Class Doc Comment
 *
 * @category Class
 * @description A set of services
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServiceSet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServiceSet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'regular' => '\Membercare\Client\Model\RegularService[]',
        'discount' => '\Membercare\Client\Model\DiscountService[]',
        'subsidy' => '\Membercare\Client\Model\SubsidyService[]',
        'companion' => '\Membercare\Client\Model\CompanionService[]',
        'cancellation' => '\Membercare\Client\Model\CancellationService[]',
        'hotel_rooms' => '\Membercare\Client\Model\HotelRoom[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'regular' => null,
        'discount' => null,
        'subsidy' => null,
        'companion' => null,
        'cancellation' => null,
        'hotel_rooms' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'regular' => 'regular',
        'discount' => 'discount',
        'subsidy' => 'subsidy',
        'companion' => 'companion',
        'cancellation' => 'cancellation',
        'hotel_rooms' => 'hotelRooms'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'regular' => 'setRegular',
        'discount' => 'setDiscount',
        'subsidy' => 'setSubsidy',
        'companion' => 'setCompanion',
        'cancellation' => 'setCancellation',
        'hotel_rooms' => 'setHotelRooms'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'regular' => 'getRegular',
        'discount' => 'getDiscount',
        'subsidy' => 'getSubsidy',
        'companion' => 'getCompanion',
        'cancellation' => 'getCancellation',
        'hotel_rooms' => 'getHotelRooms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['regular'] = isset($data['regular']) ? $data['regular'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['subsidy'] = isset($data['subsidy']) ? $data['subsidy'] : null;
        $this->container['companion'] = isset($data['companion']) ? $data['companion'] : null;
        $this->container['cancellation'] = isset($data['cancellation']) ? $data['cancellation'] : null;
        $this->container['hotel_rooms'] = isset($data['hotel_rooms']) ? $data['hotel_rooms'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets regular
     *
     * @return \Membercare\Client\Model\RegularService[]
     */
    public function getRegular()
    {
        return $this->container['regular'];
    }

    /**
     * Sets regular
     *
     * @param \Membercare\Client\Model\RegularService[] $regular regular
     *
     * @return $this
     */
    public function setRegular($regular)
    {
        $this->container['regular'] = $regular;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return \Membercare\Client\Model\DiscountService[]
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param \Membercare\Client\Model\DiscountService[] $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets subsidy
     *
     * @return \Membercare\Client\Model\SubsidyService[]
     */
    public function getSubsidy()
    {
        return $this->container['subsidy'];
    }

    /**
     * Sets subsidy
     *
     * @param \Membercare\Client\Model\SubsidyService[] $subsidy subsidy
     *
     * @return $this
     */
    public function setSubsidy($subsidy)
    {
        $this->container['subsidy'] = $subsidy;

        return $this;
    }

    /**
     * Gets companion
     *
     * @return \Membercare\Client\Model\CompanionService[]
     */
    public function getCompanion()
    {
        return $this->container['companion'];
    }

    /**
     * Sets companion
     *
     * @param \Membercare\Client\Model\CompanionService[] $companion companion
     *
     * @return $this
     */
    public function setCompanion($companion)
    {
        $this->container['companion'] = $companion;

        return $this;
    }

    /**
     * Gets cancellation
     *
     * @return \Membercare\Client\Model\CancellationService[]
     */
    public function getCancellation()
    {
        return $this->container['cancellation'];
    }

    /**
     * Sets cancellation
     *
     * @param \Membercare\Client\Model\CancellationService[] $cancellation cancellation
     *
     * @return $this
     */
    public function setCancellation($cancellation)
    {
        $this->container['cancellation'] = $cancellation;

        return $this;
    }

    /**
     * Gets hotel_rooms
     *
     * @return \Membercare\Client\Model\HotelRoom[]
     */
    public function getHotelRooms()
    {
        return $this->container['hotel_rooms'];
    }

    /**
     * Sets hotel_rooms
     *
     * @param \Membercare\Client\Model\HotelRoom[] $hotel_rooms A list of hotelroom services.
     *
     * @return $this
     */
    public function setHotelRooms($hotel_rooms)
    {
        $this->container['hotel_rooms'] = $hotel_rooms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
