<?php
/**
 * PersonPatch
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * PersonPatch Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PersonPatch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PersonPatch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'first_name' => 'string',
        'last_name' => 'string',
        'finance_type' => '\Membercare\Client\Model\FinanceType',
        'default_payer_rule' => '\Membercare\Client\Model\PayerRule',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'close_date' => '\DateTime',
        'einvoice_ean' => 'string',
        'einvoice_email' => 'string',
        'close_reason' => '\Membercare\Client\Model\CloseReason',
        'civil_registration_pin' => 'string',
        'birth_date' => '\DateTime',
        'external_id' => 'string',
        'allow_contact_via_sms' => 'bool',
        'gender' => '\Membercare\Client\Model\Gender',
        'honorific' => 'string',
        'salary_system_identification' => 'string',
        'temporary' => 'bool',
        'bank_registration_number' => 'string',
        'bank_account_number' => 'string',
        'invoice_distribution_preference' => '\Membercare\Client\Model\InvoiceDistributionPreference'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'first_name' => null,
        'last_name' => null,
        'finance_type' => null,
        'default_payer_rule' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'close_date' => 'date-time',
        'einvoice_ean' => null,
        'einvoice_email' => null,
        'close_reason' => null,
        'civil_registration_pin' => null,
        'birth_date' => 'date-time',
        'external_id' => null,
        'allow_contact_via_sms' => null,
        'gender' => null,
        'honorific' => null,
        'salary_system_identification' => null,
        'temporary' => null,
        'bank_registration_number' => null,
        'bank_account_number' => null,
        'invoice_distribution_preference' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'finance_type' => 'financeType',
        'default_payer_rule' => 'defaultPayerRule',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'close_date' => 'closeDate',
        'einvoice_ean' => 'einvoiceEan',
        'einvoice_email' => 'einvoiceEmail',
        'close_reason' => 'closeReason',
        'civil_registration_pin' => 'civilRegistrationPin',
        'birth_date' => 'birthDate',
        'external_id' => 'externalId',
        'allow_contact_via_sms' => 'allowContactViaSms',
        'gender' => 'gender',
        'honorific' => 'honorific',
        'salary_system_identification' => 'salarySystemIdentification',
        'temporary' => 'temporary',
        'bank_registration_number' => 'bankRegistrationNumber',
        'bank_account_number' => 'bankAccountNumber',
        'invoice_distribution_preference' => 'invoiceDistributionPreference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'finance_type' => 'setFinanceType',
        'default_payer_rule' => 'setDefaultPayerRule',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'close_date' => 'setCloseDate',
        'einvoice_ean' => 'setEinvoiceEan',
        'einvoice_email' => 'setEinvoiceEmail',
        'close_reason' => 'setCloseReason',
        'civil_registration_pin' => 'setCivilRegistrationPin',
        'birth_date' => 'setBirthDate',
        'external_id' => 'setExternalId',
        'allow_contact_via_sms' => 'setAllowContactViaSms',
        'gender' => 'setGender',
        'honorific' => 'setHonorific',
        'salary_system_identification' => 'setSalarySystemIdentification',
        'temporary' => 'setTemporary',
        'bank_registration_number' => 'setBankRegistrationNumber',
        'bank_account_number' => 'setBankAccountNumber',
        'invoice_distribution_preference' => 'setInvoiceDistributionPreference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'finance_type' => 'getFinanceType',
        'default_payer_rule' => 'getDefaultPayerRule',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'close_date' => 'getCloseDate',
        'einvoice_ean' => 'getEinvoiceEan',
        'einvoice_email' => 'getEinvoiceEmail',
        'close_reason' => 'getCloseReason',
        'civil_registration_pin' => 'getCivilRegistrationPin',
        'birth_date' => 'getBirthDate',
        'external_id' => 'getExternalId',
        'allow_contact_via_sms' => 'getAllowContactViaSms',
        'gender' => 'getGender',
        'honorific' => 'getHonorific',
        'salary_system_identification' => 'getSalarySystemIdentification',
        'temporary' => 'getTemporary',
        'bank_registration_number' => 'getBankRegistrationNumber',
        'bank_account_number' => 'getBankAccountNumber',
        'invoice_distribution_preference' => 'getInvoiceDistributionPreference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['finance_type'] = isset($data['finance_type']) ? $data['finance_type'] : null;
        $this->container['default_payer_rule'] = isset($data['default_payer_rule']) ? $data['default_payer_rule'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['close_date'] = isset($data['close_date']) ? $data['close_date'] : null;
        $this->container['einvoice_ean'] = isset($data['einvoice_ean']) ? $data['einvoice_ean'] : null;
        $this->container['einvoice_email'] = isset($data['einvoice_email']) ? $data['einvoice_email'] : null;
        $this->container['close_reason'] = isset($data['close_reason']) ? $data['close_reason'] : null;
        $this->container['civil_registration_pin'] = isset($data['civil_registration_pin']) ? $data['civil_registration_pin'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['allow_contact_via_sms'] = isset($data['allow_contact_via_sms']) ? $data['allow_contact_via_sms'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['honorific'] = isset($data['honorific']) ? $data['honorific'] : null;
        $this->container['salary_system_identification'] = isset($data['salary_system_identification']) ? $data['salary_system_identification'] : null;
        $this->container['temporary'] = isset($data['temporary']) ? $data['temporary'] : null;
        $this->container['bank_registration_number'] = isset($data['bank_registration_number']) ? $data['bank_registration_number'] : null;
        $this->container['bank_account_number'] = isset($data['bank_account_number']) ? $data['bank_account_number'] : null;
        $this->container['invoice_distribution_preference'] = isset($data['invoice_distribution_preference']) ? $data['invoice_distribution_preference'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The name of the company
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The name2 of the company
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets finance_type
     *
     * @return \Membercare\Client\Model\FinanceType
     */
    public function getFinanceType()
    {
        return $this->container['finance_type'];
    }

    /**
     * Sets finance_type
     *
     * @param \Membercare\Client\Model\FinanceType $finance_type finance_type
     *
     * @return $this
     */
    public function setFinanceType($finance_type)
    {
        $this->container['finance_type'] = $finance_type;

        return $this;
    }

    /**
     * Gets default_payer_rule
     *
     * @return \Membercare\Client\Model\PayerRule
     */
    public function getDefaultPayerRule()
    {
        return $this->container['default_payer_rule'];
    }

    /**
     * Sets default_payer_rule
     *
     * @param \Membercare\Client\Model\PayerRule $default_payer_rule default_payer_rule
     *
     * @return $this
     */
    public function setDefaultPayerRule($default_payer_rule)
    {
        $this->container['default_payer_rule'] = $default_payer_rule;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date StartDate for changes
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date EndDate for changes
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets close_date
     *
     * @return \DateTime
     */
    public function getCloseDate()
    {
        return $this->container['close_date'];
    }

    /**
     * Sets close_date
     *
     * @param \DateTime $close_date The day the unit was closed.  Value is ignored when creating or updating!
     *
     * @return $this
     */
    public function setCloseDate($close_date)
    {
        $this->container['close_date'] = $close_date;

        return $this;
    }

    /**
     * Gets einvoice_ean
     *
     * @return string
     */
    public function getEinvoiceEan()
    {
        return $this->container['einvoice_ean'];
    }

    /**
     * Sets einvoice_ean
     *
     * @param string $einvoice_ean Ean for electronic invoicing
     *
     * @return $this
     */
    public function setEinvoiceEan($einvoice_ean)
    {
        $this->container['einvoice_ean'] = $einvoice_ean;

        return $this;
    }

    /**
     * Gets einvoice_email
     *
     * @return string
     */
    public function getEinvoiceEmail()
    {
        return $this->container['einvoice_email'];
    }

    /**
     * Sets einvoice_email
     *
     * @param string $einvoice_email Email for electronic invoicing
     *
     * @return $this
     */
    public function setEinvoiceEmail($einvoice_email)
    {
        $this->container['einvoice_email'] = $einvoice_email;

        return $this;
    }

    /**
     * Gets close_reason
     *
     * @return \Membercare\Client\Model\CloseReason
     */
    public function getCloseReason()
    {
        return $this->container['close_reason'];
    }

    /**
     * Sets close_reason
     *
     * @param \Membercare\Client\Model\CloseReason $close_reason close_reason
     *
     * @return $this
     */
    public function setCloseReason($close_reason)
    {
        $this->container['close_reason'] = $close_reason;

        return $this;
    }

    /**
     * Gets civil_registration_pin
     *
     * @return string
     */
    public function getCivilRegistrationPin()
    {
        return $this->container['civil_registration_pin'];
    }

    /**
     * Sets civil_registration_pin
     *
     * @param string $civil_registration_pin Last 4 digits in CPR number
     *
     * @return $this
     */
    public function setCivilRegistrationPin($civil_registration_pin)
    {
        $this->container['civil_registration_pin'] = $civil_registration_pin;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime $birth_date BirthDate
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id ExternalId
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets allow_contact_via_sms
     *
     * @return bool
     */
    public function getAllowContactViaSms()
    {
        return $this->container['allow_contact_via_sms'];
    }

    /**
     * Sets allow_contact_via_sms
     *
     * @param bool $allow_contact_via_sms AllowContactViaSms
     *
     * @return $this
     */
    public function setAllowContactViaSms($allow_contact_via_sms)
    {
        $this->container['allow_contact_via_sms'] = $allow_contact_via_sms;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \Membercare\Client\Model\Gender
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \Membercare\Client\Model\Gender $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets honorific
     *
     * @return string
     */
    public function getHonorific()
    {
        return $this->container['honorific'];
    }

    /**
     * Sets honorific
     *
     * @param string $honorific Honorific
     *
     * @return $this
     */
    public function setHonorific($honorific)
    {
        $this->container['honorific'] = $honorific;

        return $this;
    }

    /**
     * Gets salary_system_identification
     *
     * @return string
     */
    public function getSalarySystemIdentification()
    {
        return $this->container['salary_system_identification'];
    }

    /**
     * Sets salary_system_identification
     *
     * @param string $salary_system_identification SalarySystemIdentification (Lønnummer)
     *
     * @return $this
     */
    public function setSalarySystemIdentification($salary_system_identification)
    {
        $this->container['salary_system_identification'] = $salary_system_identification;

        return $this;
    }

    /**
     * Gets temporary
     *
     * @return bool
     */
    public function getTemporary()
    {
        return $this->container['temporary'];
    }

    /**
     * Sets temporary
     *
     * @param bool $temporary Person marked as temporary
     *
     * @return $this
     */
    public function setTemporary($temporary)
    {
        $this->container['temporary'] = $temporary;

        return $this;
    }

    /**
     * Gets bank_registration_number
     *
     * @return string
     */
    public function getBankRegistrationNumber()
    {
        return $this->container['bank_registration_number'];
    }

    /**
     * Sets bank_registration_number
     *
     * @param string $bank_registration_number Bank account registrationnumber
     *
     * @return $this
     */
    public function setBankRegistrationNumber($bank_registration_number)
    {
        $this->container['bank_registration_number'] = $bank_registration_number;

        return $this;
    }

    /**
     * Gets bank_account_number
     *
     * @return string
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     *
     * @param string $bank_account_number Bank account number
     *
     * @return $this
     */
    public function setBankAccountNumber($bank_account_number)
    {
        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets invoice_distribution_preference
     *
     * @return \Membercare\Client\Model\InvoiceDistributionPreference
     */
    public function getInvoiceDistributionPreference()
    {
        return $this->container['invoice_distribution_preference'];
    }

    /**
     * Sets invoice_distribution_preference
     *
     * @param \Membercare\Client\Model\InvoiceDistributionPreference $invoice_distribution_preference invoice_distribution_preference
     *
     * @return $this
     */
    public function setInvoiceDistributionPreference($invoice_distribution_preference)
    {
        $this->container['invoice_distribution_preference'] = $invoice_distribution_preference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
