<?php
/**
 * Answer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * Answer Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Answer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Answer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'participant_id' => 'int',
        'question_id' => 'int',
        'question_text' => 'string',
        'value_bool' => 'bool',
        'value_date_time' => '\DateTime',
        'value_number' => 'double',
        'value_text' => 'string',
        'value_answer_options' => '\Membercare\Client\Model\QuestionSelectOptionAnswerOption[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'participant_id' => 'int64',
        'question_id' => 'int64',
        'question_text' => null,
        'value_bool' => null,
        'value_date_time' => 'date-time',
        'value_number' => 'double',
        'value_text' => null,
        'value_answer_options' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'participant_id' => 'participantId',
        'question_id' => 'questionId',
        'question_text' => 'questionText',
        'value_bool' => 'valueBool',
        'value_date_time' => 'valueDateTime',
        'value_number' => 'valueNumber',
        'value_text' => 'valueText',
        'value_answer_options' => 'valueAnswerOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'participant_id' => 'setParticipantId',
        'question_id' => 'setQuestionId',
        'question_text' => 'setQuestionText',
        'value_bool' => 'setValueBool',
        'value_date_time' => 'setValueDateTime',
        'value_number' => 'setValueNumber',
        'value_text' => 'setValueText',
        'value_answer_options' => 'setValueAnswerOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'participant_id' => 'getParticipantId',
        'question_id' => 'getQuestionId',
        'question_text' => 'getQuestionText',
        'value_bool' => 'getValueBool',
        'value_date_time' => 'getValueDateTime',
        'value_number' => 'getValueNumber',
        'value_text' => 'getValueText',
        'value_answer_options' => 'getValueAnswerOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['participant_id'] = isset($data['participant_id']) ? $data['participant_id'] : null;
        $this->container['question_id'] = isset($data['question_id']) ? $data['question_id'] : null;
        $this->container['question_text'] = isset($data['question_text']) ? $data['question_text'] : null;
        $this->container['value_bool'] = isset($data['value_bool']) ? $data['value_bool'] : null;
        $this->container['value_date_time'] = isset($data['value_date_time']) ? $data['value_date_time'] : null;
        $this->container['value_number'] = isset($data['value_number']) ? $data['value_number'] : null;
        $this->container['value_text'] = isset($data['value_text']) ? $data['value_text'] : null;
        $this->container['value_answer_options'] = isset($data['value_answer_options']) ? $data['value_answer_options'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the answer
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets participant_id
     *
     * @return int
     */
    public function getParticipantId()
    {
        return $this->container['participant_id'];
    }

    /**
     * Sets participant_id
     *
     * @param int $participant_id participant_id
     *
     * @return $this
     */
    public function setParticipantId($participant_id)
    {
        $this->container['participant_id'] = $participant_id;

        return $this;
    }

    /**
     * Gets question_id
     *
     * @return int
     */
    public function getQuestionId()
    {
        return $this->container['question_id'];
    }

    /**
     * Sets question_id
     *
     * @param int $question_id question_id
     *
     * @return $this
     */
    public function setQuestionId($question_id)
    {
        $this->container['question_id'] = $question_id;

        return $this;
    }

    /**
     * Gets question_text
     *
     * @return string
     */
    public function getQuestionText()
    {
        return $this->container['question_text'];
    }

    /**
     * Sets question_text
     *
     * @param string $question_text question_text
     *
     * @return $this
     */
    public function setQuestionText($question_text)
    {
        $this->container['question_text'] = $question_text;

        return $this;
    }

    /**
     * Gets value_bool
     *
     * @return bool
     */
    public function getValueBool()
    {
        return $this->container['value_bool'];
    }

    /**
     * Sets value_bool
     *
     * @param bool $value_bool value_bool
     *
     * @return $this
     */
    public function setValueBool($value_bool)
    {
        $this->container['value_bool'] = $value_bool;

        return $this;
    }

    /**
     * Gets value_date_time
     *
     * @return \DateTime
     */
    public function getValueDateTime()
    {
        return $this->container['value_date_time'];
    }

    /**
     * Sets value_date_time
     *
     * @param \DateTime $value_date_time value_date_time
     *
     * @return $this
     */
    public function setValueDateTime($value_date_time)
    {
        $this->container['value_date_time'] = $value_date_time;

        return $this;
    }

    /**
     * Gets value_number
     *
     * @return double
     */
    public function getValueNumber()
    {
        return $this->container['value_number'];
    }

    /**
     * Sets value_number
     *
     * @param double $value_number value_number
     *
     * @return $this
     */
    public function setValueNumber($value_number)
    {
        $this->container['value_number'] = $value_number;

        return $this;
    }

    /**
     * Gets value_text
     *
     * @return string
     */
    public function getValueText()
    {
        return $this->container['value_text'];
    }

    /**
     * Sets value_text
     *
     * @param string $value_text value_text
     *
     * @return $this
     */
    public function setValueText($value_text)
    {
        $this->container['value_text'] = $value_text;

        return $this;
    }

    /**
     * Gets value_answer_options
     *
     * @return \Membercare\Client\Model\QuestionSelectOptionAnswerOption[]
     */
    public function getValueAnswerOptions()
    {
        return $this->container['value_answer_options'];
    }

    /**
     * Sets value_answer_options
     *
     * @param \Membercare\Client\Model\QuestionSelectOptionAnswerOption[] $value_answer_options value_answer_options
     *
     * @return $this
     */
    public function setValueAnswerOptions($value_answer_options)
    {
        $this->container['value_answer_options'] = $value_answer_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
