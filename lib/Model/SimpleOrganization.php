<?php
/**
 * SimpleOrganization
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * SimpleOrganization Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SimpleOrganization implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SimpleOrganization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'identification_number' => 'string',
        'full_name' => 'string',
        'name' => 'string',
        'name2' => 'string',
        'organization_category' => '\Membercare\Client\Model\OrganizationCategory',
        'web_enabled' => 'bool',
        'board_membership_allowed' => 'bool',
        'membership_allowed' => 'bool',
        'primary_address' => '\Membercare\Client\Model\PostalAddress',
        'nets_pbs_subscription_url' => 'string',
        'company_link' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'identification_number' => null,
        'full_name' => null,
        'name' => null,
        'name2' => null,
        'organization_category' => null,
        'web_enabled' => null,
        'board_membership_allowed' => null,
        'membership_allowed' => null,
        'primary_address' => null,
        'nets_pbs_subscription_url' => null,
        'company_link' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'identification_number' => 'identificationNumber',
        'full_name' => 'fullName',
        'name' => 'name',
        'name2' => 'name2',
        'organization_category' => 'organizationCategory',
        'web_enabled' => 'webEnabled',
        'board_membership_allowed' => 'boardMembershipAllowed',
        'membership_allowed' => 'membershipAllowed',
        'primary_address' => 'primaryAddress',
        'nets_pbs_subscription_url' => 'netsPbsSubscriptionUrl',
        'company_link' => 'companyLink'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'identification_number' => 'setIdentificationNumber',
        'full_name' => 'setFullName',
        'name' => 'setName',
        'name2' => 'setName2',
        'organization_category' => 'setOrganizationCategory',
        'web_enabled' => 'setWebEnabled',
        'board_membership_allowed' => 'setBoardMembershipAllowed',
        'membership_allowed' => 'setMembershipAllowed',
        'primary_address' => 'setPrimaryAddress',
        'nets_pbs_subscription_url' => 'setNetsPbsSubscriptionUrl',
        'company_link' => 'setCompanyLink'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'identification_number' => 'getIdentificationNumber',
        'full_name' => 'getFullName',
        'name' => 'getName',
        'name2' => 'getName2',
        'organization_category' => 'getOrganizationCategory',
        'web_enabled' => 'getWebEnabled',
        'board_membership_allowed' => 'getBoardMembershipAllowed',
        'membership_allowed' => 'getMembershipAllowed',
        'primary_address' => 'getPrimaryAddress',
        'nets_pbs_subscription_url' => 'getNetsPbsSubscriptionUrl',
        'company_link' => 'getCompanyLink'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['identification_number'] = isset($data['identification_number']) ? $data['identification_number'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name2'] = isset($data['name2']) ? $data['name2'] : null;
        $this->container['organization_category'] = isset($data['organization_category']) ? $data['organization_category'] : null;
        $this->container['web_enabled'] = isset($data['web_enabled']) ? $data['web_enabled'] : null;
        $this->container['board_membership_allowed'] = isset($data['board_membership_allowed']) ? $data['board_membership_allowed'] : null;
        $this->container['membership_allowed'] = isset($data['membership_allowed']) ? $data['membership_allowed'] : null;
        $this->container['primary_address'] = isset($data['primary_address']) ? $data['primary_address'] : null;
        $this->container['nets_pbs_subscription_url'] = isset($data['nets_pbs_subscription_url']) ? $data['nets_pbs_subscription_url'] : null;
        $this->container['company_link'] = isset($data['company_link']) ? $data['company_link'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Organization Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identification_number
     *
     * @return string
     */
    public function getIdentificationNumber()
    {
        return $this->container['identification_number'];
    }

    /**
     * Sets identification_number
     *
     * @param string $identification_number The identification number of the Organization
     *
     * @return $this
     */
    public function setIdentificationNumber($identification_number)
    {
        $this->container['identification_number'] = $identification_number;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name The full name of the Organization
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the Organization
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string
     */
    public function getName2()
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string $name2 The second name of the Organization
     *
     * @return $this
     */
    public function setName2($name2)
    {
        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets organization_category
     *
     * @return \Membercare\Client\Model\OrganizationCategory
     */
    public function getOrganizationCategory()
    {
        return $this->container['organization_category'];
    }

    /**
     * Sets organization_category
     *
     * @param \Membercare\Client\Model\OrganizationCategory $organization_category organization_category
     *
     * @return $this
     */
    public function setOrganizationCategory($organization_category)
    {
        $this->container['organization_category'] = $organization_category;

        return $this;
    }

    /**
     * Gets web_enabled
     *
     * @return bool
     */
    public function getWebEnabled()
    {
        return $this->container['web_enabled'];
    }

    /**
     * Sets web_enabled
     *
     * @param bool $web_enabled web_enabled
     *
     * @return $this
     */
    public function setWebEnabled($web_enabled)
    {
        $this->container['web_enabled'] = $web_enabled;

        return $this;
    }

    /**
     * Gets board_membership_allowed
     *
     * @return bool
     */
    public function getBoardMembershipAllowed()
    {
        return $this->container['board_membership_allowed'];
    }

    /**
     * Sets board_membership_allowed
     *
     * @param bool $board_membership_allowed board_membership_allowed
     *
     * @return $this
     */
    public function setBoardMembershipAllowed($board_membership_allowed)
    {
        $this->container['board_membership_allowed'] = $board_membership_allowed;

        return $this;
    }

    /**
     * Gets membership_allowed
     *
     * @return bool
     */
    public function getMembershipAllowed()
    {
        return $this->container['membership_allowed'];
    }

    /**
     * Sets membership_allowed
     *
     * @param bool $membership_allowed membership_allowed
     *
     * @return $this
     */
    public function setMembershipAllowed($membership_allowed)
    {
        $this->container['membership_allowed'] = $membership_allowed;

        return $this;
    }

    /**
     * Gets primary_address
     *
     * @return \Membercare\Client\Model\PostalAddress
     */
    public function getPrimaryAddress()
    {
        return $this->container['primary_address'];
    }

    /**
     * Sets primary_address
     *
     * @param \Membercare\Client\Model\PostalAddress $primary_address primary_address
     *
     * @return $this
     */
    public function setPrimaryAddress($primary_address)
    {
        $this->container['primary_address'] = $primary_address;

        return $this;
    }

    /**
     * Gets nets_pbs_subscription_url
     *
     * @return string
     */
    public function getNetsPbsSubscriptionUrl()
    {
        return $this->container['nets_pbs_subscription_url'];
    }

    /**
     * Sets nets_pbs_subscription_url
     *
     * @param string $nets_pbs_subscription_url This is the link to use for enrollment to NETS PBS Service for this particular organization
     *
     * @return $this
     */
    public function setNetsPbsSubscriptionUrl($nets_pbs_subscription_url)
    {
        $this->container['nets_pbs_subscription_url'] = $nets_pbs_subscription_url;

        return $this;
    }

    /**
     * Gets company_link
     *
     * @return string
     */
    public function getCompanyLink()
    {
        return $this->container['company_link'];
    }

    /**
     * Sets company_link
     *
     * @param string $company_link Link to a connected Company
     *
     * @return $this
     */
    public function setCompanyLink($company_link)
    {
        $this->container['company_link'] = $company_link;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
