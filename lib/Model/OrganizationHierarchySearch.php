<?php
/**
 * OrganizationHierarchySearch
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * OrganizationHierarchySearch Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationHierarchySearch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationHierarchySearch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'is_physical_hierarchy' => 'bool',
        'child_organization_categories' => '\Membercare\Client\Model\OrganizationCategory[]',
        'parent_organization_categories' => '\Membercare\Client\Model\OrganizationCategory[]',
        'search_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'is_physical_hierarchy' => null,
        'child_organization_categories' => null,
        'parent_organization_categories' => null,
        'search_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'is_physical_hierarchy' => 'isPhysicalHierarchy',
        'child_organization_categories' => 'childOrganizationCategories',
        'parent_organization_categories' => 'parentOrganizationCategories',
        'search_date' => 'searchDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'is_physical_hierarchy' => 'setIsPhysicalHierarchy',
        'child_organization_categories' => 'setChildOrganizationCategories',
        'parent_organization_categories' => 'setParentOrganizationCategories',
        'search_date' => 'setSearchDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'is_physical_hierarchy' => 'getIsPhysicalHierarchy',
        'child_organization_categories' => 'getChildOrganizationCategories',
        'parent_organization_categories' => 'getParentOrganizationCategories',
        'search_date' => 'getSearchDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['is_physical_hierarchy'] = isset($data['is_physical_hierarchy']) ? $data['is_physical_hierarchy'] : null;
        $this->container['child_organization_categories'] = isset($data['child_organization_categories']) ? $data['child_organization_categories'] : null;
        $this->container['parent_organization_categories'] = isset($data['parent_organization_categories']) ? $data['parent_organization_categories'] : null;
        $this->container['search_date'] = isset($data['search_date']) ? $data['search_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets is_physical_hierarchy
     *
     * @return bool
     */
    public function getIsPhysicalHierarchy()
    {
        return $this->container['is_physical_hierarchy'];
    }

    /**
     * Sets is_physical_hierarchy
     *
     * @param bool $is_physical_hierarchy is_physical_hierarchy
     *
     * @return $this
     */
    public function setIsPhysicalHierarchy($is_physical_hierarchy)
    {
        $this->container['is_physical_hierarchy'] = $is_physical_hierarchy;

        return $this;
    }

    /**
     * Gets child_organization_categories
     *
     * @return \Membercare\Client\Model\OrganizationCategory[]
     */
    public function getChildOrganizationCategories()
    {
        return $this->container['child_organization_categories'];
    }

    /**
     * Sets child_organization_categories
     *
     * @param \Membercare\Client\Model\OrganizationCategory[] $child_organization_categories child_organization_categories
     *
     * @return $this
     */
    public function setChildOrganizationCategories($child_organization_categories)
    {
        $this->container['child_organization_categories'] = $child_organization_categories;

        return $this;
    }

    /**
     * Gets parent_organization_categories
     *
     * @return \Membercare\Client\Model\OrganizationCategory[]
     */
    public function getParentOrganizationCategories()
    {
        return $this->container['parent_organization_categories'];
    }

    /**
     * Sets parent_organization_categories
     *
     * @param \Membercare\Client\Model\OrganizationCategory[] $parent_organization_categories parent_organization_categories
     *
     * @return $this
     */
    public function setParentOrganizationCategories($parent_organization_categories)
    {
        $this->container['parent_organization_categories'] = $parent_organization_categories;

        return $this;
    }

    /**
     * Gets search_date
     *
     * @return \DateTime
     */
    public function getSearchDate()
    {
        return $this->container['search_date'];
    }

    /**
     * Sets search_date
     *
     * @param \DateTime $search_date search_date
     *
     * @return $this
     */
    public function setSearchDate($search_date)
    {
        $this->container['search_date'] = $search_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
