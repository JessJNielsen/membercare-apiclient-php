<?php
/**
 * MyOrganizationSendSmsAndEmailParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * MyOrganizationSendSmsAndEmailParams Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MyOrganizationSendSmsAndEmailParams implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MyOrganizationSendSmsAndEmailParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organization_identifications' => 'string[]',
        'board_function_ids' => 'int[]',
        'send_to_members' => 'bool',
        'fee_payment_status_selection' => '\Membercare\Client\Model\FeePaymentStatusSelection',
        'send_sms_or_email_selection' => '\Membercare\Client\Model\SendSmsOrEmailSelection'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organization_identifications' => null,
        'board_function_ids' => 'int64',
        'send_to_members' => null,
        'fee_payment_status_selection' => null,
        'send_sms_or_email_selection' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization_identifications' => 'organizationIdentifications',
        'board_function_ids' => 'boardFunctionIds',
        'send_to_members' => 'sendToMembers',
        'fee_payment_status_selection' => 'feePaymentStatusSelection',
        'send_sms_or_email_selection' => 'sendSmsOrEmailSelection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization_identifications' => 'setOrganizationIdentifications',
        'board_function_ids' => 'setBoardFunctionIds',
        'send_to_members' => 'setSendToMembers',
        'fee_payment_status_selection' => 'setFeePaymentStatusSelection',
        'send_sms_or_email_selection' => 'setSendSmsOrEmailSelection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization_identifications' => 'getOrganizationIdentifications',
        'board_function_ids' => 'getBoardFunctionIds',
        'send_to_members' => 'getSendToMembers',
        'fee_payment_status_selection' => 'getFeePaymentStatusSelection',
        'send_sms_or_email_selection' => 'getSendSmsOrEmailSelection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organization_identifications'] = isset($data['organization_identifications']) ? $data['organization_identifications'] : null;
        $this->container['board_function_ids'] = isset($data['board_function_ids']) ? $data['board_function_ids'] : null;
        $this->container['send_to_members'] = isset($data['send_to_members']) ? $data['send_to_members'] : null;
        $this->container['fee_payment_status_selection'] = isset($data['fee_payment_status_selection']) ? $data['fee_payment_status_selection'] : null;
        $this->container['send_sms_or_email_selection'] = isset($data['send_sms_or_email_selection']) ? $data['send_sms_or_email_selection'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization_identifications
     *
     * @return string[]
     */
    public function getOrganizationIdentifications()
    {
        return $this->container['organization_identifications'];
    }

    /**
     * Sets organization_identifications
     *
     * @param string[] $organization_identifications organization_identifications
     *
     * @return $this
     */
    public function setOrganizationIdentifications($organization_identifications)
    {
        $this->container['organization_identifications'] = $organization_identifications;

        return $this;
    }

    /**
     * Gets board_function_ids
     *
     * @return int[]
     */
    public function getBoardFunctionIds()
    {
        return $this->container['board_function_ids'];
    }

    /**
     * Sets board_function_ids
     *
     * @param int[] $board_function_ids board_function_ids
     *
     * @return $this
     */
    public function setBoardFunctionIds($board_function_ids)
    {
        $this->container['board_function_ids'] = $board_function_ids;

        return $this;
    }

    /**
     * Gets send_to_members
     *
     * @return bool
     */
    public function getSendToMembers()
    {
        return $this->container['send_to_members'];
    }

    /**
     * Sets send_to_members
     *
     * @param bool $send_to_members send_to_members
     *
     * @return $this
     */
    public function setSendToMembers($send_to_members)
    {
        $this->container['send_to_members'] = $send_to_members;

        return $this;
    }

    /**
     * Gets fee_payment_status_selection
     *
     * @return \Membercare\Client\Model\FeePaymentStatusSelection
     */
    public function getFeePaymentStatusSelection()
    {
        return $this->container['fee_payment_status_selection'];
    }

    /**
     * Sets fee_payment_status_selection
     *
     * @param \Membercare\Client\Model\FeePaymentStatusSelection $fee_payment_status_selection fee_payment_status_selection
     *
     * @return $this
     */
    public function setFeePaymentStatusSelection($fee_payment_status_selection)
    {
        $this->container['fee_payment_status_selection'] = $fee_payment_status_selection;

        return $this;
    }

    /**
     * Gets send_sms_or_email_selection
     *
     * @return \Membercare\Client\Model\SendSmsOrEmailSelection
     */
    public function getSendSmsOrEmailSelection()
    {
        return $this->container['send_sms_or_email_selection'];
    }

    /**
     * Sets send_sms_or_email_selection
     *
     * @param \Membercare\Client\Model\SendSmsOrEmailSelection $send_sms_or_email_selection send_sms_or_email_selection
     *
     * @return $this
     */
    public function setSendSmsOrEmailSelection($send_sms_or_email_selection)
    {
        $this->container['send_sms_or_email_selection'] = $send_sms_or_email_selection;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
