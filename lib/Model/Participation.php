<?php
/**
 * Participation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * Participation Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Participation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Participation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'enroll_date' => '\DateTime',
        'cancellation_date' => '\DateTime',
        'waiting_list_priority' => 'int',
        'participant_count' => 'int',
        'participation_status' => '\Membercare\Client\Model\ParticipationStatus',
        'identification_key' => 'string',
        'transactions' => '\Membercare\Client\Model\Transaction[]',
        'attended' => 'bool',
        'grade' => '\Membercare\Client\Model\Grade'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'enroll_date' => 'date-time',
        'cancellation_date' => 'date-time',
        'waiting_list_priority' => 'int64',
        'participant_count' => 'int64',
        'participation_status' => null,
        'identification_key' => null,
        'transactions' => null,
        'attended' => null,
        'grade' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'enroll_date' => 'enrollDate',
        'cancellation_date' => 'cancellationDate',
        'waiting_list_priority' => 'waitingListPriority',
        'participant_count' => 'participantCount',
        'participation_status' => 'participationStatus',
        'identification_key' => 'identificationKey',
        'transactions' => 'transactions',
        'attended' => 'attended',
        'grade' => 'grade'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'enroll_date' => 'setEnrollDate',
        'cancellation_date' => 'setCancellationDate',
        'waiting_list_priority' => 'setWaitingListPriority',
        'participant_count' => 'setParticipantCount',
        'participation_status' => 'setParticipationStatus',
        'identification_key' => 'setIdentificationKey',
        'transactions' => 'setTransactions',
        'attended' => 'setAttended',
        'grade' => 'setGrade'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'enroll_date' => 'getEnrollDate',
        'cancellation_date' => 'getCancellationDate',
        'waiting_list_priority' => 'getWaitingListPriority',
        'participant_count' => 'getParticipantCount',
        'participation_status' => 'getParticipationStatus',
        'identification_key' => 'getIdentificationKey',
        'transactions' => 'getTransactions',
        'attended' => 'getAttended',
        'grade' => 'getGrade'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['enroll_date'] = isset($data['enroll_date']) ? $data['enroll_date'] : null;
        $this->container['cancellation_date'] = isset($data['cancellation_date']) ? $data['cancellation_date'] : null;
        $this->container['waiting_list_priority'] = isset($data['waiting_list_priority']) ? $data['waiting_list_priority'] : null;
        $this->container['participant_count'] = isset($data['participant_count']) ? $data['participant_count'] : null;
        $this->container['participation_status'] = isset($data['participation_status']) ? $data['participation_status'] : null;
        $this->container['identification_key'] = isset($data['identification_key']) ? $data['identification_key'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
        $this->container['attended'] = isset($data['attended']) ? $data['attended'] : null;
        $this->container['grade'] = isset($data['grade']) ? $data['grade'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets enroll_date
     *
     * @return \DateTime
     */
    public function getEnrollDate()
    {
        return $this->container['enroll_date'];
    }

    /**
     * Sets enroll_date
     *
     * @param \DateTime $enroll_date enroll_date
     *
     * @return $this
     */
    public function setEnrollDate($enroll_date)
    {
        $this->container['enroll_date'] = $enroll_date;

        return $this;
    }

    /**
     * Gets cancellation_date
     *
     * @return \DateTime
     */
    public function getCancellationDate()
    {
        return $this->container['cancellation_date'];
    }

    /**
     * Sets cancellation_date
     *
     * @param \DateTime $cancellation_date cancellation_date
     *
     * @return $this
     */
    public function setCancellationDate($cancellation_date)
    {
        $this->container['cancellation_date'] = $cancellation_date;

        return $this;
    }

    /**
     * Gets waiting_list_priority
     *
     * @return int
     */
    public function getWaitingListPriority()
    {
        return $this->container['waiting_list_priority'];
    }

    /**
     * Sets waiting_list_priority
     *
     * @param int $waiting_list_priority waiting_list_priority
     *
     * @return $this
     */
    public function setWaitingListPriority($waiting_list_priority)
    {
        $this->container['waiting_list_priority'] = $waiting_list_priority;

        return $this;
    }

    /**
     * Gets participant_count
     *
     * @return int
     */
    public function getParticipantCount()
    {
        return $this->container['participant_count'];
    }

    /**
     * Sets participant_count
     *
     * @param int $participant_count participant_count
     *
     * @return $this
     */
    public function setParticipantCount($participant_count)
    {
        $this->container['participant_count'] = $participant_count;

        return $this;
    }

    /**
     * Gets participation_status
     *
     * @return \Membercare\Client\Model\ParticipationStatus
     */
    public function getParticipationStatus()
    {
        return $this->container['participation_status'];
    }

    /**
     * Sets participation_status
     *
     * @param \Membercare\Client\Model\ParticipationStatus $participation_status participation_status
     *
     * @return $this
     */
    public function setParticipationStatus($participation_status)
    {
        $this->container['participation_status'] = $participation_status;

        return $this;
    }

    /**
     * Gets identification_key
     *
     * @return string
     */
    public function getIdentificationKey()
    {
        return $this->container['identification_key'];
    }

    /**
     * Sets identification_key
     *
     * @param string $identification_key identification_key
     *
     * @return $this
     */
    public function setIdentificationKey($identification_key)
    {
        $this->container['identification_key'] = $identification_key;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Membercare\Client\Model\Transaction[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Membercare\Client\Model\Transaction[] $transactions transactions
     *
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets attended
     *
     * @return bool
     */
    public function getAttended()
    {
        return $this->container['attended'];
    }

    /**
     * Sets attended
     *
     * @param bool $attended attended
     *
     * @return $this
     */
    public function setAttended($attended)
    {
        $this->container['attended'] = $attended;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return \Membercare\Client\Model\Grade
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param \Membercare\Client\Model\Grade $grade grade
     *
     * @return $this
     */
    public function setGrade($grade)
    {
        $this->container['grade'] = $grade;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
