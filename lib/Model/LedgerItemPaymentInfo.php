<?php
/**
 * LedgerItemPaymentInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * LedgerItemPaymentInfo Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LedgerItemPaymentInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LedgerItemPaymentInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'payment_identification' => 'string',
        'payment_import_identification' => 'string',
        'voucher_number' => 'string',
        'payment_import_additional_info' => 'string',
        'payment_open_external_id' => 'int',
        'payment_type' => '\Membercare\Client\Model\PaymentType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'payment_identification' => null,
        'payment_import_identification' => null,
        'voucher_number' => null,
        'payment_import_additional_info' => null,
        'payment_open_external_id' => 'int64',
        'payment_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'payment_identification' => 'paymentIdentification',
        'payment_import_identification' => 'paymentImportIdentification',
        'voucher_number' => 'voucherNumber',
        'payment_import_additional_info' => 'paymentImportAdditionalInfo',
        'payment_open_external_id' => 'paymentOpenExternalId',
        'payment_type' => 'paymentType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'payment_identification' => 'setPaymentIdentification',
        'payment_import_identification' => 'setPaymentImportIdentification',
        'voucher_number' => 'setVoucherNumber',
        'payment_import_additional_info' => 'setPaymentImportAdditionalInfo',
        'payment_open_external_id' => 'setPaymentOpenExternalId',
        'payment_type' => 'setPaymentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'payment_identification' => 'getPaymentIdentification',
        'payment_import_identification' => 'getPaymentImportIdentification',
        'voucher_number' => 'getVoucherNumber',
        'payment_import_additional_info' => 'getPaymentImportAdditionalInfo',
        'payment_open_external_id' => 'getPaymentOpenExternalId',
        'payment_type' => 'getPaymentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['payment_identification'] = isset($data['payment_identification']) ? $data['payment_identification'] : null;
        $this->container['payment_import_identification'] = isset($data['payment_import_identification']) ? $data['payment_import_identification'] : null;
        $this->container['voucher_number'] = isset($data['voucher_number']) ? $data['voucher_number'] : null;
        $this->container['payment_import_additional_info'] = isset($data['payment_import_additional_info']) ? $data['payment_import_additional_info'] : null;
        $this->container['payment_open_external_id'] = isset($data['payment_open_external_id']) ? $data['payment_open_external_id'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets payment_identification
     *
     * @return string
     */
    public function getPaymentIdentification()
    {
        return $this->container['payment_identification'];
    }

    /**
     * Sets payment_identification
     *
     * @param string $payment_identification This is a general Identification calculated (either voucher number og ImportIdentification)
     *
     * @return $this
     */
    public function setPaymentIdentification($payment_identification)
    {
        $this->container['payment_identification'] = $payment_identification;

        return $this;
    }

    /**
     * Gets payment_import_identification
     *
     * @return string
     */
    public function getPaymentImportIdentification()
    {
        return $this->container['payment_import_identification'];
    }

    /**
     * Sets payment_import_identification
     *
     * @param string $payment_import_identification Thr OCR information from the payment
     *
     * @return $this
     */
    public function setPaymentImportIdentification($payment_import_identification)
    {
        $this->container['payment_import_identification'] = $payment_import_identification;

        return $this;
    }

    /**
     * Gets voucher_number
     *
     * @return string
     */
    public function getVoucherNumber()
    {
        return $this->container['voucher_number'];
    }

    /**
     * Sets voucher_number
     *
     * @param string $voucher_number This will typically be QuickPay Identification
     *
     * @return $this
     */
    public function setVoucherNumber($voucher_number)
    {
        $this->container['voucher_number'] = $voucher_number;

        return $this;
    }

    /**
     * Gets payment_import_additional_info
     *
     * @return string
     */
    public function getPaymentImportAdditionalInfo()
    {
        return $this->container['payment_import_additional_info'];
    }

    /**
     * Sets payment_import_additional_info
     *
     * @param string $payment_import_additional_info Additional Information from the Import file  OCR
     *
     * @return $this
     */
    public function setPaymentImportAdditionalInfo($payment_import_additional_info)
    {
        $this->container['payment_import_additional_info'] = $payment_import_additional_info;

        return $this;
    }

    /**
     * Gets payment_open_external_id
     *
     * @return int
     */
    public function getPaymentOpenExternalId()
    {
        return $this->container['payment_open_external_id'];
    }

    /**
     * Sets payment_open_external_id
     *
     * @param int $payment_open_external_id This Id may be set when open payment is created via webservice
     *
     * @return $this
     */
    public function setPaymentOpenExternalId($payment_open_external_id)
    {
        $this->container['payment_open_external_id'] = $payment_open_external_id;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return \Membercare\Client\Model\PaymentType
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param \Membercare\Client\Model\PaymentType $payment_type payment_type
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
