<?php
/**
 * CustomAttributeNamedArgument
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * CustomAttributeNamedArgument Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomAttributeNamedArgument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomAttributeNamedArgument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'member_info' => '\Membercare\Client\Model\MemberInfo',
        'typed_value' => '\Membercare\Client\Model\CustomAttributeTypedArgument',
        'member_name' => 'string',
        'is_field' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'member_info' => null,
        'typed_value' => null,
        'member_name' => null,
        'is_field' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'member_info' => 'memberInfo',
        'typed_value' => 'typedValue',
        'member_name' => 'memberName',
        'is_field' => 'isField'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'member_info' => 'setMemberInfo',
        'typed_value' => 'setTypedValue',
        'member_name' => 'setMemberName',
        'is_field' => 'setIsField'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'member_info' => 'getMemberInfo',
        'typed_value' => 'getTypedValue',
        'member_name' => 'getMemberName',
        'is_field' => 'getIsField'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['member_info'] = isset($data['member_info']) ? $data['member_info'] : null;
        $this->container['typed_value'] = isset($data['typed_value']) ? $data['typed_value'] : null;
        $this->container['member_name'] = isset($data['member_name']) ? $data['member_name'] : null;
        $this->container['is_field'] = isset($data['is_field']) ? $data['is_field'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets member_info
     *
     * @return \Membercare\Client\Model\MemberInfo
     */
    public function getMemberInfo()
    {
        return $this->container['member_info'];
    }

    /**
     * Sets member_info
     *
     * @param \Membercare\Client\Model\MemberInfo $member_info member_info
     *
     * @return $this
     */
    public function setMemberInfo($member_info)
    {
        $this->container['member_info'] = $member_info;

        return $this;
    }

    /**
     * Gets typed_value
     *
     * @return \Membercare\Client\Model\CustomAttributeTypedArgument
     */
    public function getTypedValue()
    {
        return $this->container['typed_value'];
    }

    /**
     * Sets typed_value
     *
     * @param \Membercare\Client\Model\CustomAttributeTypedArgument $typed_value typed_value
     *
     * @return $this
     */
    public function setTypedValue($typed_value)
    {
        $this->container['typed_value'] = $typed_value;

        return $this;
    }

    /**
     * Gets member_name
     *
     * @return string
     */
    public function getMemberName()
    {
        return $this->container['member_name'];
    }

    /**
     * Sets member_name
     *
     * @param string $member_name member_name
     *
     * @return $this
     */
    public function setMemberName($member_name)
    {
        $this->container['member_name'] = $member_name;

        return $this;
    }

    /**
     * Gets is_field
     *
     * @return bool
     */
    public function getIsField()
    {
        return $this->container['is_field'];
    }

    /**
     * Sets is_field
     *
     * @param bool $is_field is_field
     *
     * @return $this
     */
    public function setIsField($is_field)
    {
        $this->container['is_field'] = $is_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
