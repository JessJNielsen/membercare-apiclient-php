<?php
/**
 * Payment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * Payment Class Doc Comment
 *
 * @category Class
 * @description Payments attached to an Invoice
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Payment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Payment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'payment_identification' => 'string',
        'amount' => 'double',
        'id' => 'int',
        'payment_date' => '\DateTime',
        'payment_type' => '\Membercare\Client\Model\PaymentType',
        'finance_status' => '\Membercare\Client\Model\FinanceStatus',
        'invoice_id' => 'int',
        'invoice_link' => 'string',
        'finance_dimensions' => '\Membercare\Client\Model\FinanceDimensions',
        'shop_order_id' => 'string',
        'payment_system_card_type' => 'string',
        'voucher_no' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'payment_identification' => null,
        'amount' => 'double',
        'id' => 'int64',
        'payment_date' => 'date-time',
        'payment_type' => null,
        'finance_status' => null,
        'invoice_id' => 'int64',
        'invoice_link' => null,
        'finance_dimensions' => null,
        'shop_order_id' => null,
        'payment_system_card_type' => null,
        'voucher_no' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'payment_identification' => 'paymentIdentification',
        'amount' => 'amount',
        'id' => 'id',
        'payment_date' => 'paymentDate',
        'payment_type' => 'paymentType',
        'finance_status' => 'financeStatus',
        'invoice_id' => 'invoiceId',
        'invoice_link' => 'invoiceLink',
        'finance_dimensions' => 'financeDimensions',
        'shop_order_id' => 'shopOrderId',
        'payment_system_card_type' => 'paymentSystemCardType',
        'voucher_no' => 'voucherNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'payment_identification' => 'setPaymentIdentification',
        'amount' => 'setAmount',
        'id' => 'setId',
        'payment_date' => 'setPaymentDate',
        'payment_type' => 'setPaymentType',
        'finance_status' => 'setFinanceStatus',
        'invoice_id' => 'setInvoiceId',
        'invoice_link' => 'setInvoiceLink',
        'finance_dimensions' => 'setFinanceDimensions',
        'shop_order_id' => 'setShopOrderId',
        'payment_system_card_type' => 'setPaymentSystemCardType',
        'voucher_no' => 'setVoucherNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'payment_identification' => 'getPaymentIdentification',
        'amount' => 'getAmount',
        'id' => 'getId',
        'payment_date' => 'getPaymentDate',
        'payment_type' => 'getPaymentType',
        'finance_status' => 'getFinanceStatus',
        'invoice_id' => 'getInvoiceId',
        'invoice_link' => 'getInvoiceLink',
        'finance_dimensions' => 'getFinanceDimensions',
        'shop_order_id' => 'getShopOrderId',
        'payment_system_card_type' => 'getPaymentSystemCardType',
        'voucher_no' => 'getVoucherNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['payment_identification'] = isset($data['payment_identification']) ? $data['payment_identification'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['payment_date'] = isset($data['payment_date']) ? $data['payment_date'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['finance_status'] = isset($data['finance_status']) ? $data['finance_status'] : null;
        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['invoice_link'] = isset($data['invoice_link']) ? $data['invoice_link'] : null;
        $this->container['finance_dimensions'] = isset($data['finance_dimensions']) ? $data['finance_dimensions'] : null;
        $this->container['shop_order_id'] = isset($data['shop_order_id']) ? $data['shop_order_id'] : null;
        $this->container['payment_system_card_type'] = isset($data['payment_system_card_type']) ? $data['payment_system_card_type'] : null;
        $this->container['voucher_no'] = isset($data['voucher_no']) ? $data['voucher_no'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets payment_identification
     *
     * @return string
     */
    public function getPaymentIdentification()
    {
        return $this->container['payment_identification'];
    }

    /**
     * Sets payment_identification
     *
     * @param string $payment_identification Payment Identification - usually the ID for an online payment provider
     *
     * @return $this
     */
    public function setPaymentIdentification($payment_identification)
    {
        $this->container['payment_identification'] = $payment_identification;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount Amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return \DateTime
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param \DateTime $payment_date Payment date
     *
     * @return $this
     */
    public function setPaymentDate($payment_date)
    {
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return \Membercare\Client\Model\PaymentType
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param \Membercare\Client\Model\PaymentType $payment_type payment_type
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets finance_status
     *
     * @return \Membercare\Client\Model\FinanceStatus
     */
    public function getFinanceStatus()
    {
        return $this->container['finance_status'];
    }

    /**
     * Sets finance_status
     *
     * @param \Membercare\Client\Model\FinanceStatus $finance_status finance_status
     *
     * @return $this
     */
    public function setFinanceStatus($finance_status)
    {
        $this->container['finance_status'] = $finance_status;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return int
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param int $invoice_id Invoice
     *
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets invoice_link
     *
     * @return string
     */
    public function getInvoiceLink()
    {
        return $this->container['invoice_link'];
    }

    /**
     * Sets invoice_link
     *
     * @param string $invoice_link Link to the invoice
     *
     * @return $this
     */
    public function setInvoiceLink($invoice_link)
    {
        $this->container['invoice_link'] = $invoice_link;

        return $this;
    }

    /**
     * Gets finance_dimensions
     *
     * @return \Membercare\Client\Model\FinanceDimensions
     */
    public function getFinanceDimensions()
    {
        return $this->container['finance_dimensions'];
    }

    /**
     * Sets finance_dimensions
     *
     * @param \Membercare\Client\Model\FinanceDimensions $finance_dimensions finance_dimensions
     *
     * @return $this
     */
    public function setFinanceDimensions($finance_dimensions)
    {
        $this->container['finance_dimensions'] = $finance_dimensions;

        return $this;
    }

    /**
     * Gets shop_order_id
     *
     * @return string
     */
    public function getShopOrderId()
    {
        return $this->container['shop_order_id'];
    }

    /**
     * Sets shop_order_id
     *
     * @param string $shop_order_id The shop order Id from an external shop system
     *
     * @return $this
     */
    public function setShopOrderId($shop_order_id)
    {
        $this->container['shop_order_id'] = $shop_order_id;

        return $this;
    }

    /**
     * Gets payment_system_card_type
     *
     * @return string
     */
    public function getPaymentSystemCardType()
    {
        return $this->container['payment_system_card_type'];
    }

    /**
     * Sets payment_system_card_type
     *
     * @param string $payment_system_card_type A textual representation of the card type used in the payment
     *
     * @return $this
     */
    public function setPaymentSystemCardType($payment_system_card_type)
    {
        $this->container['payment_system_card_type'] = $payment_system_card_type;

        return $this;
    }

    /**
     * Gets voucher_no
     *
     * @return string
     */
    public function getVoucherNo()
    {
        return $this->container['voucher_no'];
    }

    /**
     * Sets voucher_no
     *
     * @param string $voucher_no Voucher number of the payment (Transaction id from the payment gateweay)
     *
     * @return $this
     */
    public function setVoucherNo($voucher_no)
    {
        $this->container['voucher_no'] = $voucher_no;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
