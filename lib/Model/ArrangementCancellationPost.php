<?php
/**
 * ArrangementCancellationPost
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * ArrangementCancellationPost Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArrangementCancellationPost implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArrangementCancellationPost';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cancellation_time' => '\DateTime',
        'cancellation_reason' => '\Membercare\Client\Model\CancellationReason',
        'cancel_future_copies' => 'bool',
        'send_cancellation_notification' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cancellation_time' => 'date-time',
        'cancellation_reason' => null,
        'cancel_future_copies' => null,
        'send_cancellation_notification' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cancellation_time' => 'cancellationTime',
        'cancellation_reason' => 'cancellationReason',
        'cancel_future_copies' => 'cancelFutureCopies',
        'send_cancellation_notification' => 'sendCancellationNotification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cancellation_time' => 'setCancellationTime',
        'cancellation_reason' => 'setCancellationReason',
        'cancel_future_copies' => 'setCancelFutureCopies',
        'send_cancellation_notification' => 'setSendCancellationNotification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cancellation_time' => 'getCancellationTime',
        'cancellation_reason' => 'getCancellationReason',
        'cancel_future_copies' => 'getCancelFutureCopies',
        'send_cancellation_notification' => 'getSendCancellationNotification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cancellation_time'] = isset($data['cancellation_time']) ? $data['cancellation_time'] : null;
        $this->container['cancellation_reason'] = isset($data['cancellation_reason']) ? $data['cancellation_reason'] : null;
        $this->container['cancel_future_copies'] = isset($data['cancel_future_copies']) ? $data['cancel_future_copies'] : null;
        $this->container['send_cancellation_notification'] = isset($data['send_cancellation_notification']) ? $data['send_cancellation_notification'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cancellation_time
     *
     * @return \DateTime
     */
    public function getCancellationTime()
    {
        return $this->container['cancellation_time'];
    }

    /**
     * Sets cancellation_time
     *
     * @param \DateTime $cancellation_time cancellation_time
     *
     * @return $this
     */
    public function setCancellationTime($cancellation_time)
    {
        $this->container['cancellation_time'] = $cancellation_time;

        return $this;
    }

    /**
     * Gets cancellation_reason
     *
     * @return \Membercare\Client\Model\CancellationReason
     */
    public function getCancellationReason()
    {
        return $this->container['cancellation_reason'];
    }

    /**
     * Sets cancellation_reason
     *
     * @param \Membercare\Client\Model\CancellationReason $cancellation_reason cancellation_reason
     *
     * @return $this
     */
    public function setCancellationReason($cancellation_reason)
    {
        $this->container['cancellation_reason'] = $cancellation_reason;

        return $this;
    }

    /**
     * Gets cancel_future_copies
     *
     * @return bool
     */
    public function getCancelFutureCopies()
    {
        return $this->container['cancel_future_copies'];
    }

    /**
     * Sets cancel_future_copies
     *
     * @param bool $cancel_future_copies cancel_future_copies
     *
     * @return $this
     */
    public function setCancelFutureCopies($cancel_future_copies)
    {
        $this->container['cancel_future_copies'] = $cancel_future_copies;

        return $this;
    }

    /**
     * Gets send_cancellation_notification
     *
     * @return bool
     */
    public function getSendCancellationNotification()
    {
        return $this->container['send_cancellation_notification'];
    }

    /**
     * Sets send_cancellation_notification
     *
     * @param bool $send_cancellation_notification send_cancellation_notification
     *
     * @return $this
     */
    public function setSendCancellationNotification($send_cancellation_notification)
    {
        $this->container['send_cancellation_notification'] = $send_cancellation_notification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
