<?php
/**
 * SessionToEnroll
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * SessionToEnroll Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SessionToEnroll implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SessionToEnroll';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'enroll_date' => '\DateTime',
        'skip_mandatory_services' => 'bool',
        'participant_seats' => 'int',
        'enroll_on_waiting_list' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'enroll_date' => 'date-time',
        'skip_mandatory_services' => null,
        'participant_seats' => 'int64',
        'enroll_on_waiting_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'enroll_date' => 'enrollDate',
        'skip_mandatory_services' => 'skipMandatoryServices',
        'participant_seats' => 'participantSeats',
        'enroll_on_waiting_list' => 'enrollOnWaitingList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'enroll_date' => 'setEnrollDate',
        'skip_mandatory_services' => 'setSkipMandatoryServices',
        'participant_seats' => 'setParticipantSeats',
        'enroll_on_waiting_list' => 'setEnrollOnWaitingList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'enroll_date' => 'getEnrollDate',
        'skip_mandatory_services' => 'getSkipMandatoryServices',
        'participant_seats' => 'getParticipantSeats',
        'enroll_on_waiting_list' => 'getEnrollOnWaitingList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['enroll_date'] = isset($data['enroll_date']) ? $data['enroll_date'] : null;
        $this->container['skip_mandatory_services'] = isset($data['skip_mandatory_services']) ? $data['skip_mandatory_services'] : null;
        $this->container['participant_seats'] = isset($data['participant_seats']) ? $data['participant_seats'] : null;
        $this->container['enroll_on_waiting_list'] = isset($data['enroll_on_waiting_list']) ? $data['enroll_on_waiting_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets enroll_date
     *
     * @return \DateTime
     */
    public function getEnrollDate()
    {
        return $this->container['enroll_date'];
    }

    /**
     * Sets enroll_date
     *
     * @param \DateTime $enroll_date enroll_date
     *
     * @return $this
     */
    public function setEnrollDate($enroll_date)
    {
        $this->container['enroll_date'] = $enroll_date;

        return $this;
    }

    /**
     * Gets skip_mandatory_services
     *
     * @return bool
     */
    public function getSkipMandatoryServices()
    {
        return $this->container['skip_mandatory_services'];
    }

    /**
     * Sets skip_mandatory_services
     *
     * @param bool $skip_mandatory_services skip_mandatory_services
     *
     * @return $this
     */
    public function setSkipMandatoryServices($skip_mandatory_services)
    {
        $this->container['skip_mandatory_services'] = $skip_mandatory_services;

        return $this;
    }

    /**
     * Gets participant_seats
     *
     * @return int
     */
    public function getParticipantSeats()
    {
        return $this->container['participant_seats'];
    }

    /**
     * Sets participant_seats
     *
     * @param int $participant_seats participant_seats
     *
     * @return $this
     */
    public function setParticipantSeats($participant_seats)
    {
        $this->container['participant_seats'] = $participant_seats;

        return $this;
    }

    /**
     * Gets enroll_on_waiting_list
     *
     * @return bool
     */
    public function getEnrollOnWaitingList()
    {
        return $this->container['enroll_on_waiting_list'];
    }

    /**
     * Sets enroll_on_waiting_list
     *
     * @param bool $enroll_on_waiting_list enroll_on_waiting_list
     *
     * @return $this
     */
    public function setEnrollOnWaitingList($enroll_on_waiting_list)
    {
        $this->container['enroll_on_waiting_list'] = $enroll_on_waiting_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
