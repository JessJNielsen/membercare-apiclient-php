<?php
/**
 * CompanyPut
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * CompanyPut Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanyPut implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompanyPut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_name' => 'string',
        'company_name2' => 'string',
        'category' => '\Membercare\Client\Model\CompanyCategory',
        'finance_type' => '\Membercare\Client\Model\FinanceType',
        'default_payer_rule' => '\Membercare\Client\Model\PayerRule',
        'default_agreement' => '\Membercare\Client\Model\Agreement',
        'public_establishment' => 'bool',
        'close_date' => '\DateTime',
        'einvoice_ean' => 'string',
        'einvoice_email' => 'string',
        'close_reason' => '\Membercare\Client\Model\CloseReason',
        'default_address_type' => '\Membercare\Client\Model\AddressRule',
        'external_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_name' => null,
        'company_name2' => null,
        'category' => null,
        'finance_type' => null,
        'default_payer_rule' => null,
        'default_agreement' => null,
        'public_establishment' => null,
        'close_date' => 'date-time',
        'einvoice_ean' => null,
        'einvoice_email' => null,
        'close_reason' => null,
        'default_address_type' => null,
        'external_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_name' => 'companyName',
        'company_name2' => 'companyName2',
        'category' => 'category',
        'finance_type' => 'financeType',
        'default_payer_rule' => 'defaultPayerRule',
        'default_agreement' => 'defaultAgreement',
        'public_establishment' => 'publicEstablishment',
        'close_date' => 'closeDate',
        'einvoice_ean' => 'einvoiceEan',
        'einvoice_email' => 'einvoiceEmail',
        'close_reason' => 'closeReason',
        'default_address_type' => 'defaultAddressType',
        'external_id' => 'externalId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_name' => 'setCompanyName',
        'company_name2' => 'setCompanyName2',
        'category' => 'setCategory',
        'finance_type' => 'setFinanceType',
        'default_payer_rule' => 'setDefaultPayerRule',
        'default_agreement' => 'setDefaultAgreement',
        'public_establishment' => 'setPublicEstablishment',
        'close_date' => 'setCloseDate',
        'einvoice_ean' => 'setEinvoiceEan',
        'einvoice_email' => 'setEinvoiceEmail',
        'close_reason' => 'setCloseReason',
        'default_address_type' => 'setDefaultAddressType',
        'external_id' => 'setExternalId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_name' => 'getCompanyName',
        'company_name2' => 'getCompanyName2',
        'category' => 'getCategory',
        'finance_type' => 'getFinanceType',
        'default_payer_rule' => 'getDefaultPayerRule',
        'default_agreement' => 'getDefaultAgreement',
        'public_establishment' => 'getPublicEstablishment',
        'close_date' => 'getCloseDate',
        'einvoice_ean' => 'getEinvoiceEan',
        'einvoice_email' => 'getEinvoiceEmail',
        'close_reason' => 'getCloseReason',
        'default_address_type' => 'getDefaultAddressType',
        'external_id' => 'getExternalId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['company_name2'] = isset($data['company_name2']) ? $data['company_name2'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['finance_type'] = isset($data['finance_type']) ? $data['finance_type'] : null;
        $this->container['default_payer_rule'] = isset($data['default_payer_rule']) ? $data['default_payer_rule'] : null;
        $this->container['default_agreement'] = isset($data['default_agreement']) ? $data['default_agreement'] : null;
        $this->container['public_establishment'] = isset($data['public_establishment']) ? $data['public_establishment'] : null;
        $this->container['close_date'] = isset($data['close_date']) ? $data['close_date'] : null;
        $this->container['einvoice_ean'] = isset($data['einvoice_ean']) ? $data['einvoice_ean'] : null;
        $this->container['einvoice_email'] = isset($data['einvoice_email']) ? $data['einvoice_email'] : null;
        $this->container['close_reason'] = isset($data['close_reason']) ? $data['close_reason'] : null;
        $this->container['default_address_type'] = isset($data['default_address_type']) ? $data['default_address_type'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name The name of the company
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_name2
     *
     * @return string
     */
    public function getCompanyName2()
    {
        return $this->container['company_name2'];
    }

    /**
     * Sets company_name2
     *
     * @param string $company_name2 The name2 of the company
     *
     * @return $this
     */
    public function setCompanyName2($company_name2)
    {
        $this->container['company_name2'] = $company_name2;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Membercare\Client\Model\CompanyCategory
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Membercare\Client\Model\CompanyCategory $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets finance_type
     *
     * @return \Membercare\Client\Model\FinanceType
     */
    public function getFinanceType()
    {
        return $this->container['finance_type'];
    }

    /**
     * Sets finance_type
     *
     * @param \Membercare\Client\Model\FinanceType $finance_type finance_type
     *
     * @return $this
     */
    public function setFinanceType($finance_type)
    {
        $this->container['finance_type'] = $finance_type;

        return $this;
    }

    /**
     * Gets default_payer_rule
     *
     * @return \Membercare\Client\Model\PayerRule
     */
    public function getDefaultPayerRule()
    {
        return $this->container['default_payer_rule'];
    }

    /**
     * Sets default_payer_rule
     *
     * @param \Membercare\Client\Model\PayerRule $default_payer_rule default_payer_rule
     *
     * @return $this
     */
    public function setDefaultPayerRule($default_payer_rule)
    {
        $this->container['default_payer_rule'] = $default_payer_rule;

        return $this;
    }

    /**
     * Gets default_agreement
     *
     * @return \Membercare\Client\Model\Agreement
     */
    public function getDefaultAgreement()
    {
        return $this->container['default_agreement'];
    }

    /**
     * Sets default_agreement
     *
     * @param \Membercare\Client\Model\Agreement $default_agreement default_agreement
     *
     * @return $this
     */
    public function setDefaultAgreement($default_agreement)
    {
        $this->container['default_agreement'] = $default_agreement;

        return $this;
    }

    /**
     * Gets public_establishment
     *
     * @return bool
     */
    public function getPublicEstablishment()
    {
        return $this->container['public_establishment'];
    }

    /**
     * Sets public_establishment
     *
     * @param bool $public_establishment Public Establishment
     *
     * @return $this
     */
    public function setPublicEstablishment($public_establishment)
    {
        $this->container['public_establishment'] = $public_establishment;

        return $this;
    }

    /**
     * Gets close_date
     *
     * @return \DateTime
     */
    public function getCloseDate()
    {
        return $this->container['close_date'];
    }

    /**
     * Sets close_date
     *
     * @param \DateTime $close_date The day the unit was closed.  Value is ignored when creating or updating!
     *
     * @return $this
     */
    public function setCloseDate($close_date)
    {
        $this->container['close_date'] = $close_date;

        return $this;
    }

    /**
     * Gets einvoice_ean
     *
     * @return string
     */
    public function getEinvoiceEan()
    {
        return $this->container['einvoice_ean'];
    }

    /**
     * Sets einvoice_ean
     *
     * @param string $einvoice_ean Ean for electronic invoicing
     *
     * @return $this
     */
    public function setEinvoiceEan($einvoice_ean)
    {
        $this->container['einvoice_ean'] = $einvoice_ean;

        return $this;
    }

    /**
     * Gets einvoice_email
     *
     * @return string
     */
    public function getEinvoiceEmail()
    {
        return $this->container['einvoice_email'];
    }

    /**
     * Sets einvoice_email
     *
     * @param string $einvoice_email Email for electronic invoicing
     *
     * @return $this
     */
    public function setEinvoiceEmail($einvoice_email)
    {
        $this->container['einvoice_email'] = $einvoice_email;

        return $this;
    }

    /**
     * Gets close_reason
     *
     * @return \Membercare\Client\Model\CloseReason
     */
    public function getCloseReason()
    {
        return $this->container['close_reason'];
    }

    /**
     * Sets close_reason
     *
     * @param \Membercare\Client\Model\CloseReason $close_reason close_reason
     *
     * @return $this
     */
    public function setCloseReason($close_reason)
    {
        $this->container['close_reason'] = $close_reason;

        return $this;
    }

    /**
     * Gets default_address_type
     *
     * @return \Membercare\Client\Model\AddressRule
     */
    public function getDefaultAddressType()
    {
        return $this->container['default_address_type'];
    }

    /**
     * Sets default_address_type
     *
     * @param \Membercare\Client\Model\AddressRule $default_address_type default_address_type
     *
     * @return $this
     */
    public function setDefaultAddressType($default_address_type)
    {
        $this->container['default_address_type'] = $default_address_type;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id Id that comes from an external source to identify a member that exists both in Membercare and in another system
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
