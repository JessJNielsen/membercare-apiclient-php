<?php
/**
 * Question
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * Question Class Doc Comment
 *
 * @category Class
 * @description Question model
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Question implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Question';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'text' => 'string',
        'help_text' => 'string',
        'can_be_used_for' => '\Membercare\Client\Model\QuestionUsageContext',
        'data_type' => '\Membercare\Client\Model\QuestionDataType',
        'date_time_validation' => '\Membercare\Client\Model\QuestionDateTimeValidation',
        'number_validation' => '\Membercare\Client\Model\QuestionNumberValidation',
        'option_validation' => '\Membercare\Client\Model\QuestionOptionValidation',
        'valid' => 'bool',
        'question_dependency' => '\Membercare\Client\Model\QuestionDependency'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'text' => null,
        'help_text' => null,
        'can_be_used_for' => null,
        'data_type' => null,
        'date_time_validation' => null,
        'number_validation' => null,
        'option_validation' => null,
        'valid' => null,
        'question_dependency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'text' => 'text',
        'help_text' => 'helpText',
        'can_be_used_for' => 'canBeUsedFor',
        'data_type' => 'dataType',
        'date_time_validation' => 'dateTimeValidation',
        'number_validation' => 'numberValidation',
        'option_validation' => 'optionValidation',
        'valid' => 'valid',
        'question_dependency' => 'questionDependency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'text' => 'setText',
        'help_text' => 'setHelpText',
        'can_be_used_for' => 'setCanBeUsedFor',
        'data_type' => 'setDataType',
        'date_time_validation' => 'setDateTimeValidation',
        'number_validation' => 'setNumberValidation',
        'option_validation' => 'setOptionValidation',
        'valid' => 'setValid',
        'question_dependency' => 'setQuestionDependency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'text' => 'getText',
        'help_text' => 'getHelpText',
        'can_be_used_for' => 'getCanBeUsedFor',
        'data_type' => 'getDataType',
        'date_time_validation' => 'getDateTimeValidation',
        'number_validation' => 'getNumberValidation',
        'option_validation' => 'getOptionValidation',
        'valid' => 'getValid',
        'question_dependency' => 'getQuestionDependency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['help_text'] = isset($data['help_text']) ? $data['help_text'] : null;
        $this->container['can_be_used_for'] = isset($data['can_be_used_for']) ? $data['can_be_used_for'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['date_time_validation'] = isset($data['date_time_validation']) ? $data['date_time_validation'] : null;
        $this->container['number_validation'] = isset($data['number_validation']) ? $data['number_validation'] : null;
        $this->container['option_validation'] = isset($data['option_validation']) ? $data['option_validation'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['question_dependency'] = isset($data['question_dependency']) ? $data['question_dependency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The question ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text The actual question
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets help_text
     *
     * @return string
     */
    public function getHelpText()
    {
        return $this->container['help_text'];
    }

    /**
     * Sets help_text
     *
     * @param string $help_text The questions help text
     *
     * @return $this
     */
    public function setHelpText($help_text)
    {
        $this->container['help_text'] = $help_text;

        return $this;
    }

    /**
     * Gets can_be_used_for
     *
     * @return \Membercare\Client\Model\QuestionUsageContext
     */
    public function getCanBeUsedFor()
    {
        return $this->container['can_be_used_for'];
    }

    /**
     * Sets can_be_used_for
     *
     * @param \Membercare\Client\Model\QuestionUsageContext $can_be_used_for can_be_used_for
     *
     * @return $this
     */
    public function setCanBeUsedFor($can_be_used_for)
    {
        $this->container['can_be_used_for'] = $can_be_used_for;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return \Membercare\Client\Model\QuestionDataType
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param \Membercare\Client\Model\QuestionDataType $data_type data_type
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets date_time_validation
     *
     * @return \Membercare\Client\Model\QuestionDateTimeValidation
     */
    public function getDateTimeValidation()
    {
        return $this->container['date_time_validation'];
    }

    /**
     * Sets date_time_validation
     *
     * @param \Membercare\Client\Model\QuestionDateTimeValidation $date_time_validation date_time_validation
     *
     * @return $this
     */
    public function setDateTimeValidation($date_time_validation)
    {
        $this->container['date_time_validation'] = $date_time_validation;

        return $this;
    }

    /**
     * Gets number_validation
     *
     * @return \Membercare\Client\Model\QuestionNumberValidation
     */
    public function getNumberValidation()
    {
        return $this->container['number_validation'];
    }

    /**
     * Sets number_validation
     *
     * @param \Membercare\Client\Model\QuestionNumberValidation $number_validation number_validation
     *
     * @return $this
     */
    public function setNumberValidation($number_validation)
    {
        $this->container['number_validation'] = $number_validation;

        return $this;
    }

    /**
     * Gets option_validation
     *
     * @return \Membercare\Client\Model\QuestionOptionValidation
     */
    public function getOptionValidation()
    {
        return $this->container['option_validation'];
    }

    /**
     * Sets option_validation
     *
     * @param \Membercare\Client\Model\QuestionOptionValidation $option_validation option_validation
     *
     * @return $this
     */
    public function setOptionValidation($option_validation)
    {
        $this->container['option_validation'] = $option_validation;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool $valid Is this question valid for new usages
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets question_dependency
     *
     * @return \Membercare\Client\Model\QuestionDependency
     */
    public function getQuestionDependency()
    {
        return $this->container['question_dependency'];
    }

    /**
     * Sets question_dependency
     *
     * @param \Membercare\Client\Model\QuestionDependency $question_dependency question_dependency
     *
     * @return $this
     */
    public function setQuestionDependency($question_dependency)
    {
        $this->container['question_dependency'] = $question_dependency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
