<?php
/**
 * OrganizationPost
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * OrganizationPost Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationPost implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationPost';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'identification_number' => 'string',
        'name' => 'string',
        'name2' => 'string',
        'contacts' => '\Membercare\Client\Model\Contact[]',
        'membership_allowed' => 'bool',
        'board_member_allowed' => 'bool',
        'web_enabled' => 'bool',
        'organization_category' => '\Membercare\Client\Model\OrganizationCategory',
        'addresses' => '\Membercare\Client\Model\PostalAddress[]',
        'company' => '\Membercare\Client\Model\Company'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'identification_number' => null,
        'name' => null,
        'name2' => null,
        'contacts' => null,
        'membership_allowed' => null,
        'board_member_allowed' => null,
        'web_enabled' => null,
        'organization_category' => null,
        'addresses' => null,
        'company' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'identification_number' => 'identificationNumber',
        'name' => 'name',
        'name2' => 'name2',
        'contacts' => 'contacts',
        'membership_allowed' => 'membershipAllowed',
        'board_member_allowed' => 'boardMemberAllowed',
        'web_enabled' => 'webEnabled',
        'organization_category' => 'organizationCategory',
        'addresses' => 'addresses',
        'company' => 'company'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'identification_number' => 'setIdentificationNumber',
        'name' => 'setName',
        'name2' => 'setName2',
        'contacts' => 'setContacts',
        'membership_allowed' => 'setMembershipAllowed',
        'board_member_allowed' => 'setBoardMemberAllowed',
        'web_enabled' => 'setWebEnabled',
        'organization_category' => 'setOrganizationCategory',
        'addresses' => 'setAddresses',
        'company' => 'setCompany'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'identification_number' => 'getIdentificationNumber',
        'name' => 'getName',
        'name2' => 'getName2',
        'contacts' => 'getContacts',
        'membership_allowed' => 'getMembershipAllowed',
        'board_member_allowed' => 'getBoardMemberAllowed',
        'web_enabled' => 'getWebEnabled',
        'organization_category' => 'getOrganizationCategory',
        'addresses' => 'getAddresses',
        'company' => 'getCompany'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['identification_number'] = isset($data['identification_number']) ? $data['identification_number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name2'] = isset($data['name2']) ? $data['name2'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['membership_allowed'] = isset($data['membership_allowed']) ? $data['membership_allowed'] : null;
        $this->container['board_member_allowed'] = isset($data['board_member_allowed']) ? $data['board_member_allowed'] : null;
        $this->container['web_enabled'] = isset($data['web_enabled']) ? $data['web_enabled'] : null;
        $this->container['organization_category'] = isset($data['organization_category']) ? $data['organization_category'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets identification_number
     *
     * @return string
     */
    public function getIdentificationNumber()
    {
        return $this->container['identification_number'];
    }

    /**
     * Sets identification_number
     *
     * @param string $identification_number The identification number of the Organization
     *
     * @return $this
     */
    public function setIdentificationNumber($identification_number)
    {
        $this->container['identification_number'] = $identification_number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the Organization
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string
     */
    public function getName2()
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string $name2 The second name of the Organization
     *
     * @return $this
     */
    public function setName2($name2)
    {
        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \Membercare\Client\Model\Contact[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \Membercare\Client\Model\Contact[] $contacts List of contact information of the Organization
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets membership_allowed
     *
     * @return bool
     */
    public function getMembershipAllowed()
    {
        return $this->container['membership_allowed'];
    }

    /**
     * Sets membership_allowed
     *
     * @param bool $membership_allowed Indicates wether or not membership is allowed in the organization
     *
     * @return $this
     */
    public function setMembershipAllowed($membership_allowed)
    {
        $this->container['membership_allowed'] = $membership_allowed;

        return $this;
    }

    /**
     * Gets board_member_allowed
     *
     * @return bool
     */
    public function getBoardMemberAllowed()
    {
        return $this->container['board_member_allowed'];
    }

    /**
     * Sets board_member_allowed
     *
     * @param bool $board_member_allowed Indicates wether or not boardmembership is allowed in the organization
     *
     * @return $this
     */
    public function setBoardMemberAllowed($board_member_allowed)
    {
        $this->container['board_member_allowed'] = $board_member_allowed;

        return $this;
    }

    /**
     * Gets web_enabled
     *
     * @return bool
     */
    public function getWebEnabled()
    {
        return $this->container['web_enabled'];
    }

    /**
     * Sets web_enabled
     *
     * @param bool $web_enabled Indicates if this organization should be used on publicly accessible websites
     *
     * @return $this
     */
    public function setWebEnabled($web_enabled)
    {
        $this->container['web_enabled'] = $web_enabled;

        return $this;
    }

    /**
     * Gets organization_category
     *
     * @return \Membercare\Client\Model\OrganizationCategory
     */
    public function getOrganizationCategory()
    {
        return $this->container['organization_category'];
    }

    /**
     * Sets organization_category
     *
     * @param \Membercare\Client\Model\OrganizationCategory $organization_category organization_category
     *
     * @return $this
     */
    public function setOrganizationCategory($organization_category)
    {
        $this->container['organization_category'] = $organization_category;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Membercare\Client\Model\PostalAddress[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Membercare\Client\Model\PostalAddress[] $addresses Addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \Membercare\Client\Model\Company
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Membercare\Client\Model\Company $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
