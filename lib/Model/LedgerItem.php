<?php
/**
 * LedgerItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * LedgerItem Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LedgerItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LedgerItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'accounting_type' => '\Membercare\Client\Model\LedgerAccountingType',
        'amount' => 'double',
        'income_date' => '\DateTime',
        'approved' => 'bool',
        'revision_number' => 'int',
        'line_type' => '\Membercare\Client\Model\LineType',
        'account' => '\Membercare\Client\Model\LedgerAccount',
        'journal_id' => 'int',
        'finance_dimensions' => '\Membercare\Client\Model\FinanceDimensions',
        'payer_debtor_account_number' => 'string',
        'invoice_id' => 'int',
        'invoice_item_id' => 'int',
        'payment_info' => '\Membercare\Client\Model\LedgerItemPaymentInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'accounting_type' => null,
        'amount' => 'double',
        'income_date' => 'date-time',
        'approved' => null,
        'revision_number' => 'int64',
        'line_type' => null,
        'account' => null,
        'journal_id' => 'int64',
        'finance_dimensions' => null,
        'payer_debtor_account_number' => null,
        'invoice_id' => 'int64',
        'invoice_item_id' => 'int64',
        'payment_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'accounting_type' => 'accountingType',
        'amount' => 'amount',
        'income_date' => 'incomeDate',
        'approved' => 'approved',
        'revision_number' => 'revisionNumber',
        'line_type' => 'lineType',
        'account' => 'account',
        'journal_id' => 'journalId',
        'finance_dimensions' => 'financeDimensions',
        'payer_debtor_account_number' => 'payerDebtorAccountNumber',
        'invoice_id' => 'invoiceId',
        'invoice_item_id' => 'invoiceItemId',
        'payment_info' => 'paymentInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'accounting_type' => 'setAccountingType',
        'amount' => 'setAmount',
        'income_date' => 'setIncomeDate',
        'approved' => 'setApproved',
        'revision_number' => 'setRevisionNumber',
        'line_type' => 'setLineType',
        'account' => 'setAccount',
        'journal_id' => 'setJournalId',
        'finance_dimensions' => 'setFinanceDimensions',
        'payer_debtor_account_number' => 'setPayerDebtorAccountNumber',
        'invoice_id' => 'setInvoiceId',
        'invoice_item_id' => 'setInvoiceItemId',
        'payment_info' => 'setPaymentInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'accounting_type' => 'getAccountingType',
        'amount' => 'getAmount',
        'income_date' => 'getIncomeDate',
        'approved' => 'getApproved',
        'revision_number' => 'getRevisionNumber',
        'line_type' => 'getLineType',
        'account' => 'getAccount',
        'journal_id' => 'getJournalId',
        'finance_dimensions' => 'getFinanceDimensions',
        'payer_debtor_account_number' => 'getPayerDebtorAccountNumber',
        'invoice_id' => 'getInvoiceId',
        'invoice_item_id' => 'getInvoiceItemId',
        'payment_info' => 'getPaymentInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['accounting_type'] = isset($data['accounting_type']) ? $data['accounting_type'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['income_date'] = isset($data['income_date']) ? $data['income_date'] : null;
        $this->container['approved'] = isset($data['approved']) ? $data['approved'] : null;
        $this->container['revision_number'] = isset($data['revision_number']) ? $data['revision_number'] : null;
        $this->container['line_type'] = isset($data['line_type']) ? $data['line_type'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['journal_id'] = isset($data['journal_id']) ? $data['journal_id'] : null;
        $this->container['finance_dimensions'] = isset($data['finance_dimensions']) ? $data['finance_dimensions'] : null;
        $this->container['payer_debtor_account_number'] = isset($data['payer_debtor_account_number']) ? $data['payer_debtor_account_number'] : null;
        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['invoice_item_id'] = isset($data['invoice_item_id']) ? $data['invoice_item_id'] : null;
        $this->container['payment_info'] = isset($data['payment_info']) ? $data['payment_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets accounting_type
     *
     * @return \Membercare\Client\Model\LedgerAccountingType
     */
    public function getAccountingType()
    {
        return $this->container['accounting_type'];
    }

    /**
     * Sets accounting_type
     *
     * @param \Membercare\Client\Model\LedgerAccountingType $accounting_type accounting_type
     *
     * @return $this
     */
    public function setAccountingType($accounting_type)
    {
        $this->container['accounting_type'] = $accounting_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets income_date
     *
     * @return \DateTime
     */
    public function getIncomeDate()
    {
        return $this->container['income_date'];
    }

    /**
     * Sets income_date
     *
     * @param \DateTime $income_date income_date
     *
     * @return $this
     */
    public function setIncomeDate($income_date)
    {
        $this->container['income_date'] = $income_date;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return bool
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param bool $approved approved
     *
     * @return $this
     */
    public function setApproved($approved)
    {
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets revision_number
     *
     * @return int
     */
    public function getRevisionNumber()
    {
        return $this->container['revision_number'];
    }

    /**
     * Sets revision_number
     *
     * @param int $revision_number revision_number
     *
     * @return $this
     */
    public function setRevisionNumber($revision_number)
    {
        $this->container['revision_number'] = $revision_number;

        return $this;
    }

    /**
     * Gets line_type
     *
     * @return \Membercare\Client\Model\LineType
     */
    public function getLineType()
    {
        return $this->container['line_type'];
    }

    /**
     * Sets line_type
     *
     * @param \Membercare\Client\Model\LineType $line_type line_type
     *
     * @return $this
     */
    public function setLineType($line_type)
    {
        $this->container['line_type'] = $line_type;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \Membercare\Client\Model\LedgerAccount
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Membercare\Client\Model\LedgerAccount $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets journal_id
     *
     * @return int
     */
    public function getJournalId()
    {
        return $this->container['journal_id'];
    }

    /**
     * Sets journal_id
     *
     * @param int $journal_id journal_id
     *
     * @return $this
     */
    public function setJournalId($journal_id)
    {
        $this->container['journal_id'] = $journal_id;

        return $this;
    }

    /**
     * Gets finance_dimensions
     *
     * @return \Membercare\Client\Model\FinanceDimensions
     */
    public function getFinanceDimensions()
    {
        return $this->container['finance_dimensions'];
    }

    /**
     * Sets finance_dimensions
     *
     * @param \Membercare\Client\Model\FinanceDimensions $finance_dimensions finance_dimensions
     *
     * @return $this
     */
    public function setFinanceDimensions($finance_dimensions)
    {
        $this->container['finance_dimensions'] = $finance_dimensions;

        return $this;
    }

    /**
     * Gets payer_debtor_account_number
     *
     * @return string
     */
    public function getPayerDebtorAccountNumber()
    {
        return $this->container['payer_debtor_account_number'];
    }

    /**
     * Sets payer_debtor_account_number
     *
     * @param string $payer_debtor_account_number payer_debtor_account_number
     *
     * @return $this
     */
    public function setPayerDebtorAccountNumber($payer_debtor_account_number)
    {
        $this->container['payer_debtor_account_number'] = $payer_debtor_account_number;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return int
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param int $invoice_id invoice_id
     *
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets invoice_item_id
     *
     * @return int
     */
    public function getInvoiceItemId()
    {
        return $this->container['invoice_item_id'];
    }

    /**
     * Sets invoice_item_id
     *
     * @param int $invoice_item_id Id from the Invoice Line (Invoice Item)
     *
     * @return $this
     */
    public function setInvoiceItemId($invoice_item_id)
    {
        $this->container['invoice_item_id'] = $invoice_item_id;

        return $this;
    }

    /**
     * Gets payment_info
     *
     * @return \Membercare\Client\Model\LedgerItemPaymentInfo
     */
    public function getPaymentInfo()
    {
        return $this->container['payment_info'];
    }

    /**
     * Sets payment_info
     *
     * @param \Membercare\Client\Model\LedgerItemPaymentInfo $payment_info payment_info
     *
     * @return $this
     */
    public function setPaymentInfo($payment_info)
    {
        $this->container['payment_info'] = $payment_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
