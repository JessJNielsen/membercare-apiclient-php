<?php
/**
 * BoardMembershipSearchCriteria
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * BoardMembershipSearchCriteria Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BoardMembershipSearchCriteria implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BoardMembershipSearchCriteria';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'board_member_category_web_enabled' => 'bool',
        'person_name' => 'string',
        'organization_name' => 'string',
        'organization_categories' => '\Membercare\Client\Model\OrganizationCategory[]',
        'person_search_text_rule' => '\Membercare\Client\Model\SearchText',
        'organization_search_text_rule' => '\Membercare\Client\Model\SearchText'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'board_member_category_web_enabled' => null,
        'person_name' => null,
        'organization_name' => null,
        'organization_categories' => null,
        'person_search_text_rule' => null,
        'organization_search_text_rule' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'board_member_category_web_enabled' => 'boardMemberCategoryWebEnabled',
        'person_name' => 'personName',
        'organization_name' => 'organizationName',
        'organization_categories' => 'organizationCategories',
        'person_search_text_rule' => 'personSearchTextRule',
        'organization_search_text_rule' => 'organizationSearchTextRule'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'board_member_category_web_enabled' => 'setBoardMemberCategoryWebEnabled',
        'person_name' => 'setPersonName',
        'organization_name' => 'setOrganizationName',
        'organization_categories' => 'setOrganizationCategories',
        'person_search_text_rule' => 'setPersonSearchTextRule',
        'organization_search_text_rule' => 'setOrganizationSearchTextRule'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'board_member_category_web_enabled' => 'getBoardMemberCategoryWebEnabled',
        'person_name' => 'getPersonName',
        'organization_name' => 'getOrganizationName',
        'organization_categories' => 'getOrganizationCategories',
        'person_search_text_rule' => 'getPersonSearchTextRule',
        'organization_search_text_rule' => 'getOrganizationSearchTextRule'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['board_member_category_web_enabled'] = isset($data['board_member_category_web_enabled']) ? $data['board_member_category_web_enabled'] : null;
        $this->container['person_name'] = isset($data['person_name']) ? $data['person_name'] : null;
        $this->container['organization_name'] = isset($data['organization_name']) ? $data['organization_name'] : null;
        $this->container['organization_categories'] = isset($data['organization_categories']) ? $data['organization_categories'] : null;
        $this->container['person_search_text_rule'] = isset($data['person_search_text_rule']) ? $data['person_search_text_rule'] : null;
        $this->container['organization_search_text_rule'] = isset($data['organization_search_text_rule']) ? $data['organization_search_text_rule'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets board_member_category_web_enabled
     *
     * @return bool
     */
    public function getBoardMemberCategoryWebEnabled()
    {
        return $this->container['board_member_category_web_enabled'];
    }

    /**
     * Sets board_member_category_web_enabled
     *
     * @param bool $board_member_category_web_enabled Null means ignore
     *
     * @return $this
     */
    public function setBoardMemberCategoryWebEnabled($board_member_category_web_enabled)
    {
        $this->container['board_member_category_web_enabled'] = $board_member_category_web_enabled;

        return $this;
    }

    /**
     * Gets person_name
     *
     * @return string
     */
    public function getPersonName()
    {
        return $this->container['person_name'];
    }

    /**
     * Sets person_name
     *
     * @param string $person_name Null, whitespace and empty means ignore
     *
     * @return $this
     */
    public function setPersonName($person_name)
    {
        $this->container['person_name'] = $person_name;

        return $this;
    }

    /**
     * Gets organization_name
     *
     * @return string
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     *
     * @param string $organization_name Null, whitespace and empty means ignore
     *
     * @return $this
     */
    public function setOrganizationName($organization_name)
    {
        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets organization_categories
     *
     * @return \Membercare\Client\Model\OrganizationCategory[]
     */
    public function getOrganizationCategories()
    {
        return $this->container['organization_categories'];
    }

    /**
     * Sets organization_categories
     *
     * @param \Membercare\Client\Model\OrganizationCategory[] $organization_categories Null and empty list means ignore
     *
     * @return $this
     */
    public function setOrganizationCategories($organization_categories)
    {
        $this->container['organization_categories'] = $organization_categories;

        return $this;
    }

    /**
     * Gets person_search_text_rule
     *
     * @return \Membercare\Client\Model\SearchText
     */
    public function getPersonSearchTextRule()
    {
        return $this->container['person_search_text_rule'];
    }

    /**
     * Sets person_search_text_rule
     *
     * @param \Membercare\Client\Model\SearchText $person_search_text_rule person_search_text_rule
     *
     * @return $this
     */
    public function setPersonSearchTextRule($person_search_text_rule)
    {
        $this->container['person_search_text_rule'] = $person_search_text_rule;

        return $this;
    }

    /**
     * Gets organization_search_text_rule
     *
     * @return \Membercare\Client\Model\SearchText
     */
    public function getOrganizationSearchTextRule()
    {
        return $this->container['organization_search_text_rule'];
    }

    /**
     * Sets organization_search_text_rule
     *
     * @param \Membercare\Client\Model\SearchText $organization_search_text_rule organization_search_text_rule
     *
     * @return $this
     */
    public function setOrganizationSearchTextRule($organization_search_text_rule)
    {
        $this->container['organization_search_text_rule'] = $organization_search_text_rule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
