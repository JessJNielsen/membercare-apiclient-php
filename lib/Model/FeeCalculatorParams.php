<?php
/**
 * FeeCalculatorParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * FeeCalculatorParams Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FeeCalculatorParams implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FeeCalculatorParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'calc_date' => '\DateTime',
        'membership_categories' => '\Membercare\Client\Model\MembershipCategory[]',
        'member_educations' => '\Membercare\Client\Model\MemberEducation[]',
        'birth_year' => 'int',
        'skip_signup_fee' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'calc_date' => 'date-time',
        'membership_categories' => null,
        'member_educations' => null,
        'birth_year' => 'int32',
        'skip_signup_fee' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'calc_date' => 'calcDate',
        'membership_categories' => 'membershipCategories',
        'member_educations' => 'memberEducations',
        'birth_year' => 'birthYear',
        'skip_signup_fee' => 'skipSignupFee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'calc_date' => 'setCalcDate',
        'membership_categories' => 'setMembershipCategories',
        'member_educations' => 'setMemberEducations',
        'birth_year' => 'setBirthYear',
        'skip_signup_fee' => 'setSkipSignupFee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'calc_date' => 'getCalcDate',
        'membership_categories' => 'getMembershipCategories',
        'member_educations' => 'getMemberEducations',
        'birth_year' => 'getBirthYear',
        'skip_signup_fee' => 'getSkipSignupFee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['calc_date'] = isset($data['calc_date']) ? $data['calc_date'] : null;
        $this->container['membership_categories'] = isset($data['membership_categories']) ? $data['membership_categories'] : null;
        $this->container['member_educations'] = isset($data['member_educations']) ? $data['member_educations'] : null;
        $this->container['birth_year'] = isset($data['birth_year']) ? $data['birth_year'] : null;
        $this->container['skip_signup_fee'] = isset($data['skip_signup_fee']) ? $data['skip_signup_fee'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets calc_date
     *
     * @return \DateTime
     */
    public function getCalcDate()
    {
        return $this->container['calc_date'];
    }

    /**
     * Sets calc_date
     *
     * @param \DateTime $calc_date calc_date
     *
     * @return $this
     */
    public function setCalcDate($calc_date)
    {
        $this->container['calc_date'] = $calc_date;

        return $this;
    }

    /**
     * Gets membership_categories
     *
     * @return \Membercare\Client\Model\MembershipCategory[]
     */
    public function getMembershipCategories()
    {
        return $this->container['membership_categories'];
    }

    /**
     * Sets membership_categories
     *
     * @param \Membercare\Client\Model\MembershipCategory[] $membership_categories membership_categories
     *
     * @return $this
     */
    public function setMembershipCategories($membership_categories)
    {
        $this->container['membership_categories'] = $membership_categories;

        return $this;
    }

    /**
     * Gets member_educations
     *
     * @return \Membercare\Client\Model\MemberEducation[]
     */
    public function getMemberEducations()
    {
        return $this->container['member_educations'];
    }

    /**
     * Sets member_educations
     *
     * @param \Membercare\Client\Model\MemberEducation[] $member_educations member_educations
     *
     * @return $this
     */
    public function setMemberEducations($member_educations)
    {
        $this->container['member_educations'] = $member_educations;

        return $this;
    }

    /**
     * Gets birth_year
     *
     * @return int
     */
    public function getBirthYear()
    {
        return $this->container['birth_year'];
    }

    /**
     * Sets birth_year
     *
     * @param int $birth_year birth_year
     *
     * @return $this
     */
    public function setBirthYear($birth_year)
    {
        $this->container['birth_year'] = $birth_year;

        return $this;
    }

    /**
     * Gets skip_signup_fee
     *
     * @return bool
     */
    public function getSkipSignupFee()
    {
        return $this->container['skip_signup_fee'];
    }

    /**
     * Sets skip_signup_fee
     *
     * @param bool $skip_signup_fee skip_signup_fee
     *
     * @return $this
     */
    public function setSkipSignupFee($skip_signup_fee)
    {
        $this->container['skip_signup_fee'] = $skip_signup_fee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
