<?php
/**
 * BoardMembership
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * BoardMembership Class Doc Comment
 *
 * @category Class
 * @description Representation of af Board membership
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BoardMembership implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BoardMembership';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'person' => '\Membercare\Client\Model\Person',
        'description' => 'string',
        'enroll_date' => '\DateTime',
        'with_draw_date' => '\DateTime',
        'sequence' => 'int',
        'board_function' => '\Membercare\Client\Model\BoardFunction',
        'board' => '\Membercare\Client\Model\Board',
        'organization' => '\Membercare\Client\Model\SimpleOrganization',
        'owner' => '\Membercare\Client\Model\Member'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'person' => null,
        'description' => null,
        'enroll_date' => 'date-time',
        'with_draw_date' => 'date-time',
        'sequence' => 'int32',
        'board_function' => null,
        'board' => null,
        'organization' => null,
        'owner' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'person' => 'person',
        'description' => 'description',
        'enroll_date' => 'enrollDate',
        'with_draw_date' => 'withDrawDate',
        'sequence' => 'sequence',
        'board_function' => 'boardFunction',
        'board' => 'board',
        'organization' => 'organization',
        'owner' => 'owner'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'person' => 'setPerson',
        'description' => 'setDescription',
        'enroll_date' => 'setEnrollDate',
        'with_draw_date' => 'setWithDrawDate',
        'sequence' => 'setSequence',
        'board_function' => 'setBoardFunction',
        'board' => 'setBoard',
        'organization' => 'setOrganization',
        'owner' => 'setOwner'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'person' => 'getPerson',
        'description' => 'getDescription',
        'enroll_date' => 'getEnrollDate',
        'with_draw_date' => 'getWithDrawDate',
        'sequence' => 'getSequence',
        'board_function' => 'getBoardFunction',
        'board' => 'getBoard',
        'organization' => 'getOrganization',
        'owner' => 'getOwner'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['person'] = isset($data['person']) ? $data['person'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enroll_date'] = isset($data['enroll_date']) ? $data['enroll_date'] : null;
        $this->container['with_draw_date'] = isset($data['with_draw_date']) ? $data['with_draw_date'] : null;
        $this->container['sequence'] = isset($data['sequence']) ? $data['sequence'] : null;
        $this->container['board_function'] = isset($data['board_function']) ? $data['board_function'] : null;
        $this->container['board'] = isset($data['board']) ? $data['board'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The BoardMembership's Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets person
     *
     * @return \Membercare\Client\Model\Person
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param \Membercare\Client\Model\Person $person person
     *
     * @return $this
     */
    public function setPerson($person)
    {
        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the BoardMembership.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enroll_date
     *
     * @return \DateTime
     */
    public function getEnrollDate()
    {
        return $this->container['enroll_date'];
    }

    /**
     * Sets enroll_date
     *
     * @param \DateTime $enroll_date The date of enrollment in the BoardMembership.
     *
     * @return $this
     */
    public function setEnrollDate($enroll_date)
    {
        $this->container['enroll_date'] = $enroll_date;

        return $this;
    }

    /**
     * Gets with_draw_date
     *
     * @return \DateTime
     */
    public function getWithDrawDate()
    {
        return $this->container['with_draw_date'];
    }

    /**
     * Sets with_draw_date
     *
     * @param \DateTime $with_draw_date The withdraw date if the BoardMembership is stopped.  This can be a future date.
     *
     * @return $this
     */
    public function setWithDrawDate($with_draw_date)
    {
        $this->container['with_draw_date'] = $with_draw_date;

        return $this;
    }

    /**
     * Gets sequence
     *
     * @return int
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param int $sequence The sequence of the boardmember.  This is not related to BoardFunction.Sequence.
     *
     * @return $this
     */
    public function setSequence($sequence)
    {
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets board_function
     *
     * @return \Membercare\Client\Model\BoardFunction
     */
    public function getBoardFunction()
    {
        return $this->container['board_function'];
    }

    /**
     * Sets board_function
     *
     * @param \Membercare\Client\Model\BoardFunction $board_function board_function
     *
     * @return $this
     */
    public function setBoardFunction($board_function)
    {
        $this->container['board_function'] = $board_function;

        return $this;
    }

    /**
     * Gets board
     *
     * @return \Membercare\Client\Model\Board
     */
    public function getBoard()
    {
        return $this->container['board'];
    }

    /**
     * Sets board
     *
     * @param \Membercare\Client\Model\Board $board board
     *
     * @return $this
     */
    public function setBoard($board)
    {
        $this->container['board'] = $board;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \Membercare\Client\Model\SimpleOrganization
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \Membercare\Client\Model\SimpleOrganization $organization organization
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Membercare\Client\Model\Member
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Membercare\Client\Model\Member $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
