<?php
/**
 * BalanceCalculationCriteria
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * BalanceCalculationCriteria Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BalanceCalculationCriteria implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BalanceCalculationCriteria';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'max_outstanding_balance' => 'double',
        'contexts' => '\Membercare\Client\Model\ServiceSourceFlag',
        'only_invoices_created_after' => '\DateTime',
        'discard_payments_made_after' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'max_outstanding_balance' => 'double',
        'contexts' => null,
        'only_invoices_created_after' => 'date-time',
        'discard_payments_made_after' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'max_outstanding_balance' => 'maxOutstandingBalance',
        'contexts' => 'contexts',
        'only_invoices_created_after' => 'onlyInvoicesCreatedAfter',
        'discard_payments_made_after' => 'discardPaymentsMadeAfter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'max_outstanding_balance' => 'setMaxOutstandingBalance',
        'contexts' => 'setContexts',
        'only_invoices_created_after' => 'setOnlyInvoicesCreatedAfter',
        'discard_payments_made_after' => 'setDiscardPaymentsMadeAfter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'max_outstanding_balance' => 'getMaxOutstandingBalance',
        'contexts' => 'getContexts',
        'only_invoices_created_after' => 'getOnlyInvoicesCreatedAfter',
        'discard_payments_made_after' => 'getDiscardPaymentsMadeAfter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['max_outstanding_balance'] = isset($data['max_outstanding_balance']) ? $data['max_outstanding_balance'] : null;
        $this->container['contexts'] = isset($data['contexts']) ? $data['contexts'] : null;
        $this->container['only_invoices_created_after'] = isset($data['only_invoices_created_after']) ? $data['only_invoices_created_after'] : null;
        $this->container['discard_payments_made_after'] = isset($data['discard_payments_made_after']) ? $data['discard_payments_made_after'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets max_outstanding_balance
     *
     * @return double
     */
    public function getMaxOutstandingBalance()
    {
        return $this->container['max_outstanding_balance'];
    }

    /**
     * Sets max_outstanding_balance
     *
     * @param double $max_outstanding_balance The max outstanding balance allowed in the given contexts
     *
     * @return $this
     */
    public function setMaxOutstandingBalance($max_outstanding_balance)
    {
        $this->container['max_outstanding_balance'] = $max_outstanding_balance;

        return $this;
    }

    /**
     * Gets contexts
     *
     * @return \Membercare\Client\Model\ServiceSourceFlag
     */
    public function getContexts()
    {
        return $this->container['contexts'];
    }

    /**
     * Sets contexts
     *
     * @param \Membercare\Client\Model\ServiceSourceFlag $contexts contexts
     *
     * @return $this
     */
    public function setContexts($contexts)
    {
        $this->container['contexts'] = $contexts;

        return $this;
    }

    /**
     * Gets only_invoices_created_after
     *
     * @return \DateTime
     */
    public function getOnlyInvoicesCreatedAfter()
    {
        return $this->container['only_invoices_created_after'];
    }

    /**
     * Sets only_invoices_created_after
     *
     * @param \DateTime $only_invoices_created_after Calculate only for invoices created after
     *
     * @return $this
     */
    public function setOnlyInvoicesCreatedAfter($only_invoices_created_after)
    {
        $this->container['only_invoices_created_after'] = $only_invoices_created_after;

        return $this;
    }

    /**
     * Gets discard_payments_made_after
     *
     * @return \DateTime
     */
    public function getDiscardPaymentsMadeAfter()
    {
        return $this->container['discard_payments_made_after'];
    }

    /**
     * Sets discard_payments_made_after
     *
     * @param \DateTime $discard_payments_made_after If a payment has been made after this date it will not be taken into account
     *
     * @return $this
     */
    public function setDiscardPaymentsMadeAfter($discard_payments_made_after)
    {
        $this->container['discard_payments_made_after'] = $discard_payments_made_after;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
