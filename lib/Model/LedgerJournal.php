<?php
/**
 * LedgerJournal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * LedgerJournal Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LedgerJournal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LedgerJournal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'batch_date' => '\DateTime',
        'approved' => 'bool',
        'accounting_revision_number' => 'int',
        'finance_status' => '\Membercare\Client\Model\FinanceStatus',
        'min_income_date' => '\DateTime',
        'max_income_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'batch_date' => 'date-time',
        'approved' => null,
        'accounting_revision_number' => 'int64',
        'finance_status' => null,
        'min_income_date' => 'date-time',
        'max_income_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'batch_date' => 'batchDate',
        'approved' => 'approved',
        'accounting_revision_number' => 'accountingRevisionNumber',
        'finance_status' => 'financeStatus',
        'min_income_date' => 'minIncomeDate',
        'max_income_date' => 'maxIncomeDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'batch_date' => 'setBatchDate',
        'approved' => 'setApproved',
        'accounting_revision_number' => 'setAccountingRevisionNumber',
        'finance_status' => 'setFinanceStatus',
        'min_income_date' => 'setMinIncomeDate',
        'max_income_date' => 'setMaxIncomeDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'batch_date' => 'getBatchDate',
        'approved' => 'getApproved',
        'accounting_revision_number' => 'getAccountingRevisionNumber',
        'finance_status' => 'getFinanceStatus',
        'min_income_date' => 'getMinIncomeDate',
        'max_income_date' => 'getMaxIncomeDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['batch_date'] = isset($data['batch_date']) ? $data['batch_date'] : null;
        $this->container['approved'] = isset($data['approved']) ? $data['approved'] : null;
        $this->container['accounting_revision_number'] = isset($data['accounting_revision_number']) ? $data['accounting_revision_number'] : null;
        $this->container['finance_status'] = isset($data['finance_status']) ? $data['finance_status'] : null;
        $this->container['min_income_date'] = isset($data['min_income_date']) ? $data['min_income_date'] : null;
        $this->container['max_income_date'] = isset($data['max_income_date']) ? $data['max_income_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets batch_date
     *
     * @return \DateTime
     */
    public function getBatchDate()
    {
        return $this->container['batch_date'];
    }

    /**
     * Sets batch_date
     *
     * @param \DateTime $batch_date batch_date
     *
     * @return $this
     */
    public function setBatchDate($batch_date)
    {
        $this->container['batch_date'] = $batch_date;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return bool
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param bool $approved approved
     *
     * @return $this
     */
    public function setApproved($approved)
    {
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets accounting_revision_number
     *
     * @return int
     */
    public function getAccountingRevisionNumber()
    {
        return $this->container['accounting_revision_number'];
    }

    /**
     * Sets accounting_revision_number
     *
     * @param int $accounting_revision_number accounting_revision_number
     *
     * @return $this
     */
    public function setAccountingRevisionNumber($accounting_revision_number)
    {
        $this->container['accounting_revision_number'] = $accounting_revision_number;

        return $this;
    }

    /**
     * Gets finance_status
     *
     * @return \Membercare\Client\Model\FinanceStatus
     */
    public function getFinanceStatus()
    {
        return $this->container['finance_status'];
    }

    /**
     * Sets finance_status
     *
     * @param \Membercare\Client\Model\FinanceStatus $finance_status finance_status
     *
     * @return $this
     */
    public function setFinanceStatus($finance_status)
    {
        $this->container['finance_status'] = $finance_status;

        return $this;
    }

    /**
     * Gets min_income_date
     *
     * @return \DateTime
     */
    public function getMinIncomeDate()
    {
        return $this->container['min_income_date'];
    }

    /**
     * Sets min_income_date
     *
     * @param \DateTime $min_income_date min_income_date
     *
     * @return $this
     */
    public function setMinIncomeDate($min_income_date)
    {
        $this->container['min_income_date'] = $min_income_date;

        return $this;
    }

    /**
     * Gets max_income_date
     *
     * @return \DateTime
     */
    public function getMaxIncomeDate()
    {
        return $this->container['max_income_date'];
    }

    /**
     * Sets max_income_date
     *
     * @param \DateTime $max_income_date max_income_date
     *
     * @return $this
     */
    public function setMaxIncomeDate($max_income_date)
    {
        $this->container['max_income_date'] = $max_income_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
