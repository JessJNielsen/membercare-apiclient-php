<?php
/**
 * Assembly
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * Assembly Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Assembly implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Assembly';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'defined_types' => '\Membercare\Client\Model\TypeInfo[]',
        'exported_types' => '\Membercare\Client\Model\Type[]',
        'code_base' => 'string',
        'entry_point' => '\Membercare\Client\Model\MethodInfo',
        'full_name' => 'string',
        'image_runtime_version' => 'string',
        'is_dynamic' => 'bool',
        'location' => 'string',
        'reflection_only' => 'bool',
        'is_collectible' => 'bool',
        'is_fully_trusted' => 'bool',
        'custom_attributes' => '\Membercare\Client\Model\CustomAttributeData[]',
        'escaped_code_base' => 'string',
        'manifest_module' => '\Membercare\Client\Model\Module',
        'modules' => '\Membercare\Client\Model\Module[]',
        'global_assembly_cache' => 'bool',
        'host_context' => 'int',
        'security_rule_set' => '\Membercare\Client\Model\SecurityRuleSet'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'defined_types' => null,
        'exported_types' => null,
        'code_base' => null,
        'entry_point' => null,
        'full_name' => null,
        'image_runtime_version' => null,
        'is_dynamic' => null,
        'location' => null,
        'reflection_only' => null,
        'is_collectible' => null,
        'is_fully_trusted' => null,
        'custom_attributes' => null,
        'escaped_code_base' => null,
        'manifest_module' => null,
        'modules' => null,
        'global_assembly_cache' => null,
        'host_context' => 'int64',
        'security_rule_set' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'defined_types' => 'definedTypes',
        'exported_types' => 'exportedTypes',
        'code_base' => 'codeBase',
        'entry_point' => 'entryPoint',
        'full_name' => 'fullName',
        'image_runtime_version' => 'imageRuntimeVersion',
        'is_dynamic' => 'isDynamic',
        'location' => 'location',
        'reflection_only' => 'reflectionOnly',
        'is_collectible' => 'isCollectible',
        'is_fully_trusted' => 'isFullyTrusted',
        'custom_attributes' => 'customAttributes',
        'escaped_code_base' => 'escapedCodeBase',
        'manifest_module' => 'manifestModule',
        'modules' => 'modules',
        'global_assembly_cache' => 'globalAssemblyCache',
        'host_context' => 'hostContext',
        'security_rule_set' => 'securityRuleSet'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'defined_types' => 'setDefinedTypes',
        'exported_types' => 'setExportedTypes',
        'code_base' => 'setCodeBase',
        'entry_point' => 'setEntryPoint',
        'full_name' => 'setFullName',
        'image_runtime_version' => 'setImageRuntimeVersion',
        'is_dynamic' => 'setIsDynamic',
        'location' => 'setLocation',
        'reflection_only' => 'setReflectionOnly',
        'is_collectible' => 'setIsCollectible',
        'is_fully_trusted' => 'setIsFullyTrusted',
        'custom_attributes' => 'setCustomAttributes',
        'escaped_code_base' => 'setEscapedCodeBase',
        'manifest_module' => 'setManifestModule',
        'modules' => 'setModules',
        'global_assembly_cache' => 'setGlobalAssemblyCache',
        'host_context' => 'setHostContext',
        'security_rule_set' => 'setSecurityRuleSet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'defined_types' => 'getDefinedTypes',
        'exported_types' => 'getExportedTypes',
        'code_base' => 'getCodeBase',
        'entry_point' => 'getEntryPoint',
        'full_name' => 'getFullName',
        'image_runtime_version' => 'getImageRuntimeVersion',
        'is_dynamic' => 'getIsDynamic',
        'location' => 'getLocation',
        'reflection_only' => 'getReflectionOnly',
        'is_collectible' => 'getIsCollectible',
        'is_fully_trusted' => 'getIsFullyTrusted',
        'custom_attributes' => 'getCustomAttributes',
        'escaped_code_base' => 'getEscapedCodeBase',
        'manifest_module' => 'getManifestModule',
        'modules' => 'getModules',
        'global_assembly_cache' => 'getGlobalAssemblyCache',
        'host_context' => 'getHostContext',
        'security_rule_set' => 'getSecurityRuleSet'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['defined_types'] = isset($data['defined_types']) ? $data['defined_types'] : null;
        $this->container['exported_types'] = isset($data['exported_types']) ? $data['exported_types'] : null;
        $this->container['code_base'] = isset($data['code_base']) ? $data['code_base'] : null;
        $this->container['entry_point'] = isset($data['entry_point']) ? $data['entry_point'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['image_runtime_version'] = isset($data['image_runtime_version']) ? $data['image_runtime_version'] : null;
        $this->container['is_dynamic'] = isset($data['is_dynamic']) ? $data['is_dynamic'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['reflection_only'] = isset($data['reflection_only']) ? $data['reflection_only'] : null;
        $this->container['is_collectible'] = isset($data['is_collectible']) ? $data['is_collectible'] : null;
        $this->container['is_fully_trusted'] = isset($data['is_fully_trusted']) ? $data['is_fully_trusted'] : null;
        $this->container['custom_attributes'] = isset($data['custom_attributes']) ? $data['custom_attributes'] : null;
        $this->container['escaped_code_base'] = isset($data['escaped_code_base']) ? $data['escaped_code_base'] : null;
        $this->container['manifest_module'] = isset($data['manifest_module']) ? $data['manifest_module'] : null;
        $this->container['modules'] = isset($data['modules']) ? $data['modules'] : null;
        $this->container['global_assembly_cache'] = isset($data['global_assembly_cache']) ? $data['global_assembly_cache'] : null;
        $this->container['host_context'] = isset($data['host_context']) ? $data['host_context'] : null;
        $this->container['security_rule_set'] = isset($data['security_rule_set']) ? $data['security_rule_set'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets defined_types
     *
     * @return \Membercare\Client\Model\TypeInfo[]
     */
    public function getDefinedTypes()
    {
        return $this->container['defined_types'];
    }

    /**
     * Sets defined_types
     *
     * @param \Membercare\Client\Model\TypeInfo[] $defined_types defined_types
     *
     * @return $this
     */
    public function setDefinedTypes($defined_types)
    {
        $this->container['defined_types'] = $defined_types;

        return $this;
    }

    /**
     * Gets exported_types
     *
     * @return \Membercare\Client\Model\Type[]
     */
    public function getExportedTypes()
    {
        return $this->container['exported_types'];
    }

    /**
     * Sets exported_types
     *
     * @param \Membercare\Client\Model\Type[] $exported_types exported_types
     *
     * @return $this
     */
    public function setExportedTypes($exported_types)
    {
        $this->container['exported_types'] = $exported_types;

        return $this;
    }

    /**
     * Gets code_base
     *
     * @return string
     */
    public function getCodeBase()
    {
        return $this->container['code_base'];
    }

    /**
     * Sets code_base
     *
     * @param string $code_base code_base
     *
     * @return $this
     */
    public function setCodeBase($code_base)
    {
        $this->container['code_base'] = $code_base;

        return $this;
    }

    /**
     * Gets entry_point
     *
     * @return \Membercare\Client\Model\MethodInfo
     */
    public function getEntryPoint()
    {
        return $this->container['entry_point'];
    }

    /**
     * Sets entry_point
     *
     * @param \Membercare\Client\Model\MethodInfo $entry_point entry_point
     *
     * @return $this
     */
    public function setEntryPoint($entry_point)
    {
        $this->container['entry_point'] = $entry_point;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name full_name
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets image_runtime_version
     *
     * @return string
     */
    public function getImageRuntimeVersion()
    {
        return $this->container['image_runtime_version'];
    }

    /**
     * Sets image_runtime_version
     *
     * @param string $image_runtime_version image_runtime_version
     *
     * @return $this
     */
    public function setImageRuntimeVersion($image_runtime_version)
    {
        $this->container['image_runtime_version'] = $image_runtime_version;

        return $this;
    }

    /**
     * Gets is_dynamic
     *
     * @return bool
     */
    public function getIsDynamic()
    {
        return $this->container['is_dynamic'];
    }

    /**
     * Sets is_dynamic
     *
     * @param bool $is_dynamic is_dynamic
     *
     * @return $this
     */
    public function setIsDynamic($is_dynamic)
    {
        $this->container['is_dynamic'] = $is_dynamic;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets reflection_only
     *
     * @return bool
     */
    public function getReflectionOnly()
    {
        return $this->container['reflection_only'];
    }

    /**
     * Sets reflection_only
     *
     * @param bool $reflection_only reflection_only
     *
     * @return $this
     */
    public function setReflectionOnly($reflection_only)
    {
        $this->container['reflection_only'] = $reflection_only;

        return $this;
    }

    /**
     * Gets is_collectible
     *
     * @return bool
     */
    public function getIsCollectible()
    {
        return $this->container['is_collectible'];
    }

    /**
     * Sets is_collectible
     *
     * @param bool $is_collectible is_collectible
     *
     * @return $this
     */
    public function setIsCollectible($is_collectible)
    {
        $this->container['is_collectible'] = $is_collectible;

        return $this;
    }

    /**
     * Gets is_fully_trusted
     *
     * @return bool
     */
    public function getIsFullyTrusted()
    {
        return $this->container['is_fully_trusted'];
    }

    /**
     * Sets is_fully_trusted
     *
     * @param bool $is_fully_trusted is_fully_trusted
     *
     * @return $this
     */
    public function setIsFullyTrusted($is_fully_trusted)
    {
        $this->container['is_fully_trusted'] = $is_fully_trusted;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \Membercare\Client\Model\CustomAttributeData[]
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \Membercare\Client\Model\CustomAttributeData[] $custom_attributes custom_attributes
     *
     * @return $this
     */
    public function setCustomAttributes($custom_attributes)
    {
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets escaped_code_base
     *
     * @return string
     */
    public function getEscapedCodeBase()
    {
        return $this->container['escaped_code_base'];
    }

    /**
     * Sets escaped_code_base
     *
     * @param string $escaped_code_base escaped_code_base
     *
     * @return $this
     */
    public function setEscapedCodeBase($escaped_code_base)
    {
        $this->container['escaped_code_base'] = $escaped_code_base;

        return $this;
    }

    /**
     * Gets manifest_module
     *
     * @return \Membercare\Client\Model\Module
     */
    public function getManifestModule()
    {
        return $this->container['manifest_module'];
    }

    /**
     * Sets manifest_module
     *
     * @param \Membercare\Client\Model\Module $manifest_module manifest_module
     *
     * @return $this
     */
    public function setManifestModule($manifest_module)
    {
        $this->container['manifest_module'] = $manifest_module;

        return $this;
    }

    /**
     * Gets modules
     *
     * @return \Membercare\Client\Model\Module[]
     */
    public function getModules()
    {
        return $this->container['modules'];
    }

    /**
     * Sets modules
     *
     * @param \Membercare\Client\Model\Module[] $modules modules
     *
     * @return $this
     */
    public function setModules($modules)
    {
        $this->container['modules'] = $modules;

        return $this;
    }

    /**
     * Gets global_assembly_cache
     *
     * @return bool
     */
    public function getGlobalAssemblyCache()
    {
        return $this->container['global_assembly_cache'];
    }

    /**
     * Sets global_assembly_cache
     *
     * @param bool $global_assembly_cache global_assembly_cache
     *
     * @return $this
     */
    public function setGlobalAssemblyCache($global_assembly_cache)
    {
        $this->container['global_assembly_cache'] = $global_assembly_cache;

        return $this;
    }

    /**
     * Gets host_context
     *
     * @return int
     */
    public function getHostContext()
    {
        return $this->container['host_context'];
    }

    /**
     * Sets host_context
     *
     * @param int $host_context host_context
     *
     * @return $this
     */
    public function setHostContext($host_context)
    {
        $this->container['host_context'] = $host_context;

        return $this;
    }

    /**
     * Gets security_rule_set
     *
     * @return \Membercare\Client\Model\SecurityRuleSet
     */
    public function getSecurityRuleSet()
    {
        return $this->container['security_rule_set'];
    }

    /**
     * Sets security_rule_set
     *
     * @param \Membercare\Client\Model\SecurityRuleSet $security_rule_set security_rule_set
     *
     * @return $this
     */
    public function setSecurityRuleSet($security_rule_set)
    {
        $this->container['security_rule_set'] = $security_rule_set;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
