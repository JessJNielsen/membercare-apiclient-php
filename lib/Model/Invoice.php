<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @description Represents an Invoice. An Invoice is a list of Items that has been ordered/purchased.
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Invoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'payer' => '\Membercare\Client\Model\Debtor',
        'send_invoice_to' => '\Membercare\Client\Model\Debtor',
        'deliver_products_to' => '\Membercare\Client\Model\Debtor',
        'finance_status' => '\Membercare\Client\Model\FinanceStatus',
        'finance_date' => '\DateTime',
        'pay_due_date' => '\DateTime',
        'income_date' => '\DateTime',
        'credited_invoice_id' => 'int',
        'credited_invoice_link' => 'string',
        'e_invoice_info' => '\Membercare\Client\Model\EInvoiceInfo',
        'source' => '\Membercare\Client\Model\ServiceSource',
        'payments' => '\Membercare\Client\Model\Payment[]',
        'invoice_items' => '\Membercare\Client\Model\InvoiceItem[]',
        'invoice_texts' => '\Membercare\Client\Model\InvoiceText[]',
        'recurring_payment_identification' => 'string',
        'creation_info' => '\Membercare\Client\Model\CrudByInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'payer' => null,
        'send_invoice_to' => null,
        'deliver_products_to' => null,
        'finance_status' => null,
        'finance_date' => 'date-time',
        'pay_due_date' => 'date-time',
        'income_date' => 'date-time',
        'credited_invoice_id' => 'int64',
        'credited_invoice_link' => null,
        'e_invoice_info' => null,
        'source' => null,
        'payments' => null,
        'invoice_items' => null,
        'invoice_texts' => null,
        'recurring_payment_identification' => null,
        'creation_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'payer' => 'payer',
        'send_invoice_to' => 'sendInvoiceTo',
        'deliver_products_to' => 'deliverProductsTo',
        'finance_status' => 'financeStatus',
        'finance_date' => 'financeDate',
        'pay_due_date' => 'payDueDate',
        'income_date' => 'incomeDate',
        'credited_invoice_id' => 'creditedInvoiceId',
        'credited_invoice_link' => 'creditedInvoiceLink',
        'e_invoice_info' => 'eInvoiceInfo',
        'source' => 'source',
        'payments' => 'payments',
        'invoice_items' => 'invoiceItems',
        'invoice_texts' => 'invoiceTexts',
        'recurring_payment_identification' => 'recurringPaymentIdentification',
        'creation_info' => 'creationInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'payer' => 'setPayer',
        'send_invoice_to' => 'setSendInvoiceTo',
        'deliver_products_to' => 'setDeliverProductsTo',
        'finance_status' => 'setFinanceStatus',
        'finance_date' => 'setFinanceDate',
        'pay_due_date' => 'setPayDueDate',
        'income_date' => 'setIncomeDate',
        'credited_invoice_id' => 'setCreditedInvoiceId',
        'credited_invoice_link' => 'setCreditedInvoiceLink',
        'e_invoice_info' => 'setEInvoiceInfo',
        'source' => 'setSource',
        'payments' => 'setPayments',
        'invoice_items' => 'setInvoiceItems',
        'invoice_texts' => 'setInvoiceTexts',
        'recurring_payment_identification' => 'setRecurringPaymentIdentification',
        'creation_info' => 'setCreationInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'payer' => 'getPayer',
        'send_invoice_to' => 'getSendInvoiceTo',
        'deliver_products_to' => 'getDeliverProductsTo',
        'finance_status' => 'getFinanceStatus',
        'finance_date' => 'getFinanceDate',
        'pay_due_date' => 'getPayDueDate',
        'income_date' => 'getIncomeDate',
        'credited_invoice_id' => 'getCreditedInvoiceId',
        'credited_invoice_link' => 'getCreditedInvoiceLink',
        'e_invoice_info' => 'getEInvoiceInfo',
        'source' => 'getSource',
        'payments' => 'getPayments',
        'invoice_items' => 'getInvoiceItems',
        'invoice_texts' => 'getInvoiceTexts',
        'recurring_payment_identification' => 'getRecurringPaymentIdentification',
        'creation_info' => 'getCreationInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['payer'] = isset($data['payer']) ? $data['payer'] : null;
        $this->container['send_invoice_to'] = isset($data['send_invoice_to']) ? $data['send_invoice_to'] : null;
        $this->container['deliver_products_to'] = isset($data['deliver_products_to']) ? $data['deliver_products_to'] : null;
        $this->container['finance_status'] = isset($data['finance_status']) ? $data['finance_status'] : null;
        $this->container['finance_date'] = isset($data['finance_date']) ? $data['finance_date'] : null;
        $this->container['pay_due_date'] = isset($data['pay_due_date']) ? $data['pay_due_date'] : null;
        $this->container['income_date'] = isset($data['income_date']) ? $data['income_date'] : null;
        $this->container['credited_invoice_id'] = isset($data['credited_invoice_id']) ? $data['credited_invoice_id'] : null;
        $this->container['credited_invoice_link'] = isset($data['credited_invoice_link']) ? $data['credited_invoice_link'] : null;
        $this->container['e_invoice_info'] = isset($data['e_invoice_info']) ? $data['e_invoice_info'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
        $this->container['invoice_items'] = isset($data['invoice_items']) ? $data['invoice_items'] : null;
        $this->container['invoice_texts'] = isset($data['invoice_texts']) ? $data['invoice_texts'] : null;
        $this->container['recurring_payment_identification'] = isset($data['recurring_payment_identification']) ? $data['recurring_payment_identification'] : null;
        $this->container['creation_info'] = isset($data['creation_info']) ? $data['creation_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The Id used to identity the Invoice.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return \Membercare\Client\Model\Debtor
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param \Membercare\Client\Model\Debtor $payer payer
     *
     * @return $this
     */
    public function setPayer($payer)
    {
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets send_invoice_to
     *
     * @return \Membercare\Client\Model\Debtor
     */
    public function getSendInvoiceTo()
    {
        return $this->container['send_invoice_to'];
    }

    /**
     * Sets send_invoice_to
     *
     * @param \Membercare\Client\Model\Debtor $send_invoice_to send_invoice_to
     *
     * @return $this
     */
    public function setSendInvoiceTo($send_invoice_to)
    {
        $this->container['send_invoice_to'] = $send_invoice_to;

        return $this;
    }

    /**
     * Gets deliver_products_to
     *
     * @return \Membercare\Client\Model\Debtor
     */
    public function getDeliverProductsTo()
    {
        return $this->container['deliver_products_to'];
    }

    /**
     * Sets deliver_products_to
     *
     * @param \Membercare\Client\Model\Debtor $deliver_products_to deliver_products_to
     *
     * @return $this
     */
    public function setDeliverProductsTo($deliver_products_to)
    {
        $this->container['deliver_products_to'] = $deliver_products_to;

        return $this;
    }

    /**
     * Gets finance_status
     *
     * @return \Membercare\Client\Model\FinanceStatus
     */
    public function getFinanceStatus()
    {
        return $this->container['finance_status'];
    }

    /**
     * Sets finance_status
     *
     * @param \Membercare\Client\Model\FinanceStatus $finance_status finance_status
     *
     * @return $this
     */
    public function setFinanceStatus($finance_status)
    {
        $this->container['finance_status'] = $finance_status;

        return $this;
    }

    /**
     * Gets finance_date
     *
     * @return \DateTime
     */
    public function getFinanceDate()
    {
        return $this->container['finance_date'];
    }

    /**
     * Sets finance_date
     *
     * @param \DateTime $finance_date Finance date.
     *
     * @return $this
     */
    public function setFinanceDate($finance_date)
    {
        $this->container['finance_date'] = $finance_date;

        return $this;
    }

    /**
     * Gets pay_due_date
     *
     * @return \DateTime
     */
    public function getPayDueDate()
    {
        return $this->container['pay_due_date'];
    }

    /**
     * Sets pay_due_date
     *
     * @param \DateTime $pay_due_date Due date for payment.
     *
     * @return $this
     */
    public function setPayDueDate($pay_due_date)
    {
        $this->container['pay_due_date'] = $pay_due_date;

        return $this;
    }

    /**
     * Gets income_date
     *
     * @return \DateTime
     */
    public function getIncomeDate()
    {
        return $this->container['income_date'];
    }

    /**
     * Sets income_date
     *
     * @param \DateTime $income_date Income date.
     *
     * @return $this
     */
    public function setIncomeDate($income_date)
    {
        $this->container['income_date'] = $income_date;

        return $this;
    }

    /**
     * Gets credited_invoice_id
     *
     * @return int
     */
    public function getCreditedInvoiceId()
    {
        return $this->container['credited_invoice_id'];
    }

    /**
     * Sets credited_invoice_id
     *
     * @param int $credited_invoice_id If invoice is crediting another Invoice, this is set
     *
     * @return $this
     */
    public function setCreditedInvoiceId($credited_invoice_id)
    {
        $this->container['credited_invoice_id'] = $credited_invoice_id;

        return $this;
    }

    /**
     * Gets credited_invoice_link
     *
     * @return string
     */
    public function getCreditedInvoiceLink()
    {
        return $this->container['credited_invoice_link'];
    }

    /**
     * Sets credited_invoice_link
     *
     * @param string $credited_invoice_link If invoice is crediting another Invoice, this link points to the Invoice where the credited item resides.
     *
     * @return $this
     */
    public function setCreditedInvoiceLink($credited_invoice_link)
    {
        $this->container['credited_invoice_link'] = $credited_invoice_link;

        return $this;
    }

    /**
     * Gets e_invoice_info
     *
     * @return \Membercare\Client\Model\EInvoiceInfo
     */
    public function getEInvoiceInfo()
    {
        return $this->container['e_invoice_info'];
    }

    /**
     * Sets e_invoice_info
     *
     * @param \Membercare\Client\Model\EInvoiceInfo $e_invoice_info e_invoice_info
     *
     * @return $this
     */
    public function setEInvoiceInfo($e_invoice_info)
    {
        $this->container['e_invoice_info'] = $e_invoice_info;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \Membercare\Client\Model\ServiceSource
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \Membercare\Client\Model\ServiceSource $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \Membercare\Client\Model\Payment[]
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \Membercare\Client\Model\Payment[] $payments List of Payments
     *
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets invoice_items
     *
     * @return \Membercare\Client\Model\InvoiceItem[]
     */
    public function getInvoiceItems()
    {
        return $this->container['invoice_items'];
    }

    /**
     * Sets invoice_items
     *
     * @param \Membercare\Client\Model\InvoiceItem[] $invoice_items List of InvoiceItems
     *
     * @return $this
     */
    public function setInvoiceItems($invoice_items)
    {
        $this->container['invoice_items'] = $invoice_items;

        return $this;
    }

    /**
     * Gets invoice_texts
     *
     * @return \Membercare\Client\Model\InvoiceText[]
     */
    public function getInvoiceTexts()
    {
        return $this->container['invoice_texts'];
    }

    /**
     * Sets invoice_texts
     *
     * @param \Membercare\Client\Model\InvoiceText[] $invoice_texts List of InvoiceTexts
     *
     * @return $this
     */
    public function setInvoiceTexts($invoice_texts)
    {
        $this->container['invoice_texts'] = $invoice_texts;

        return $this;
    }

    /**
     * Gets recurring_payment_identification
     *
     * @return string
     */
    public function getRecurringPaymentIdentification()
    {
        return $this->container['recurring_payment_identification'];
    }

    /**
     * Sets recurring_payment_identification
     *
     * @param string $recurring_payment_identification Credit card identification for automated recurring payments  Only used for customers using Payer.se for recurring Donations on Membersite
     *
     * @return $this
     */
    public function setRecurringPaymentIdentification($recurring_payment_identification)
    {
        $this->container['recurring_payment_identification'] = $recurring_payment_identification;

        return $this;
    }

    /**
     * Gets creation_info
     *
     * @return \Membercare\Client\Model\CrudByInfo
     */
    public function getCreationInfo()
    {
        return $this->container['creation_info'];
    }

    /**
     * Sets creation_info
     *
     * @param \Membercare\Client\Model\CrudByInfo $creation_info creation_info
     *
     * @return $this
     */
    public function setCreationInfo($creation_info)
    {
        $this->container['creation_info'] = $creation_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
