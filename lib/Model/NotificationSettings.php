<?php
/**
 * NotificationSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * NotificationSettings Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NotificationSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'enable_confirmation_by_email' => 'bool',
        'enable_confirmation_by_pdf' => 'bool',
        'enable_confirmation_by_sms' => 'bool',
        'enable_reminder_by_email' => 'bool',
        'enable_reminder_by_sms' => 'bool',
        'automatic_confirmation' => 'bool',
        'sender_name' => 'string',
        'sender_e_mail' => 'string',
        'reply_to_e_mail' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'enable_confirmation_by_email' => null,
        'enable_confirmation_by_pdf' => null,
        'enable_confirmation_by_sms' => null,
        'enable_reminder_by_email' => null,
        'enable_reminder_by_sms' => null,
        'automatic_confirmation' => null,
        'sender_name' => null,
        'sender_e_mail' => null,
        'reply_to_e_mail' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'enable_confirmation_by_email' => 'enableConfirmationByEmail',
        'enable_confirmation_by_pdf' => 'enableConfirmationByPdf',
        'enable_confirmation_by_sms' => 'enableConfirmationBySms',
        'enable_reminder_by_email' => 'enableReminderByEmail',
        'enable_reminder_by_sms' => 'enableReminderBySms',
        'automatic_confirmation' => 'automaticConfirmation',
        'sender_name' => 'senderName',
        'sender_e_mail' => 'senderEMail',
        'reply_to_e_mail' => 'replyToEMail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'enable_confirmation_by_email' => 'setEnableConfirmationByEmail',
        'enable_confirmation_by_pdf' => 'setEnableConfirmationByPdf',
        'enable_confirmation_by_sms' => 'setEnableConfirmationBySms',
        'enable_reminder_by_email' => 'setEnableReminderByEmail',
        'enable_reminder_by_sms' => 'setEnableReminderBySms',
        'automatic_confirmation' => 'setAutomaticConfirmation',
        'sender_name' => 'setSenderName',
        'sender_e_mail' => 'setSenderEMail',
        'reply_to_e_mail' => 'setReplyToEMail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'enable_confirmation_by_email' => 'getEnableConfirmationByEmail',
        'enable_confirmation_by_pdf' => 'getEnableConfirmationByPdf',
        'enable_confirmation_by_sms' => 'getEnableConfirmationBySms',
        'enable_reminder_by_email' => 'getEnableReminderByEmail',
        'enable_reminder_by_sms' => 'getEnableReminderBySms',
        'automatic_confirmation' => 'getAutomaticConfirmation',
        'sender_name' => 'getSenderName',
        'sender_e_mail' => 'getSenderEMail',
        'reply_to_e_mail' => 'getReplyToEMail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['enable_confirmation_by_email'] = isset($data['enable_confirmation_by_email']) ? $data['enable_confirmation_by_email'] : null;
        $this->container['enable_confirmation_by_pdf'] = isset($data['enable_confirmation_by_pdf']) ? $data['enable_confirmation_by_pdf'] : null;
        $this->container['enable_confirmation_by_sms'] = isset($data['enable_confirmation_by_sms']) ? $data['enable_confirmation_by_sms'] : null;
        $this->container['enable_reminder_by_email'] = isset($data['enable_reminder_by_email']) ? $data['enable_reminder_by_email'] : null;
        $this->container['enable_reminder_by_sms'] = isset($data['enable_reminder_by_sms']) ? $data['enable_reminder_by_sms'] : null;
        $this->container['automatic_confirmation'] = isset($data['automatic_confirmation']) ? $data['automatic_confirmation'] : null;
        $this->container['sender_name'] = isset($data['sender_name']) ? $data['sender_name'] : null;
        $this->container['sender_e_mail'] = isset($data['sender_e_mail']) ? $data['sender_e_mail'] : null;
        $this->container['reply_to_e_mail'] = isset($data['reply_to_e_mail']) ? $data['reply_to_e_mail'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets enable_confirmation_by_email
     *
     * @return bool
     */
    public function getEnableConfirmationByEmail()
    {
        return $this->container['enable_confirmation_by_email'];
    }

    /**
     * Sets enable_confirmation_by_email
     *
     * @param bool $enable_confirmation_by_email enable_confirmation_by_email
     *
     * @return $this
     */
    public function setEnableConfirmationByEmail($enable_confirmation_by_email)
    {
        $this->container['enable_confirmation_by_email'] = $enable_confirmation_by_email;

        return $this;
    }

    /**
     * Gets enable_confirmation_by_pdf
     *
     * @return bool
     */
    public function getEnableConfirmationByPdf()
    {
        return $this->container['enable_confirmation_by_pdf'];
    }

    /**
     * Sets enable_confirmation_by_pdf
     *
     * @param bool $enable_confirmation_by_pdf enable_confirmation_by_pdf
     *
     * @return $this
     */
    public function setEnableConfirmationByPdf($enable_confirmation_by_pdf)
    {
        $this->container['enable_confirmation_by_pdf'] = $enable_confirmation_by_pdf;

        return $this;
    }

    /**
     * Gets enable_confirmation_by_sms
     *
     * @return bool
     */
    public function getEnableConfirmationBySms()
    {
        return $this->container['enable_confirmation_by_sms'];
    }

    /**
     * Sets enable_confirmation_by_sms
     *
     * @param bool $enable_confirmation_by_sms enable_confirmation_by_sms
     *
     * @return $this
     */
    public function setEnableConfirmationBySms($enable_confirmation_by_sms)
    {
        $this->container['enable_confirmation_by_sms'] = $enable_confirmation_by_sms;

        return $this;
    }

    /**
     * Gets enable_reminder_by_email
     *
     * @return bool
     */
    public function getEnableReminderByEmail()
    {
        return $this->container['enable_reminder_by_email'];
    }

    /**
     * Sets enable_reminder_by_email
     *
     * @param bool $enable_reminder_by_email enable_reminder_by_email
     *
     * @return $this
     */
    public function setEnableReminderByEmail($enable_reminder_by_email)
    {
        $this->container['enable_reminder_by_email'] = $enable_reminder_by_email;

        return $this;
    }

    /**
     * Gets enable_reminder_by_sms
     *
     * @return bool
     */
    public function getEnableReminderBySms()
    {
        return $this->container['enable_reminder_by_sms'];
    }

    /**
     * Sets enable_reminder_by_sms
     *
     * @param bool $enable_reminder_by_sms enable_reminder_by_sms
     *
     * @return $this
     */
    public function setEnableReminderBySms($enable_reminder_by_sms)
    {
        $this->container['enable_reminder_by_sms'] = $enable_reminder_by_sms;

        return $this;
    }

    /**
     * Gets automatic_confirmation
     *
     * @return bool
     */
    public function getAutomaticConfirmation()
    {
        return $this->container['automatic_confirmation'];
    }

    /**
     * Sets automatic_confirmation
     *
     * @param bool $automatic_confirmation automatic_confirmation
     *
     * @return $this
     */
    public function setAutomaticConfirmation($automatic_confirmation)
    {
        $this->container['automatic_confirmation'] = $automatic_confirmation;

        return $this;
    }

    /**
     * Gets sender_name
     *
     * @return string
     */
    public function getSenderName()
    {
        return $this->container['sender_name'];
    }

    /**
     * Sets sender_name
     *
     * @param string $sender_name sender_name
     *
     * @return $this
     */
    public function setSenderName($sender_name)
    {
        $this->container['sender_name'] = $sender_name;

        return $this;
    }

    /**
     * Gets sender_e_mail
     *
     * @return string
     */
    public function getSenderEMail()
    {
        return $this->container['sender_e_mail'];
    }

    /**
     * Sets sender_e_mail
     *
     * @param string $sender_e_mail sender_e_mail
     *
     * @return $this
     */
    public function setSenderEMail($sender_e_mail)
    {
        $this->container['sender_e_mail'] = $sender_e_mail;

        return $this;
    }

    /**
     * Gets reply_to_e_mail
     *
     * @return string
     */
    public function getReplyToEMail()
    {
        return $this->container['reply_to_e_mail'];
    }

    /**
     * Sets reply_to_e_mail
     *
     * @param string $reply_to_e_mail reply_to_e_mail
     *
     * @return $this
     */
    public function setReplyToEMail($reply_to_e_mail)
    {
        $this->container['reply_to_e_mail'] = $reply_to_e_mail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
