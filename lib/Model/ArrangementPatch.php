<?php
/**
 * ArrangementPatch
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * ArrangementPatch Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArrangementPatch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArrangementPatch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'name' => 'string',
        'description' => 'string',
        'texts' => '\Membercare\Client\Model\ArrangementText[]',
        'short_description' => 'string',
        'long_description' => 'string',
        'start_date_time' => '\DateTime',
        'end_date_time' => '\DateTime',
        'enroll_before' => '\DateTime',
        'show_on_web' => 'bool',
        'for_invitees_only' => 'bool',
        'category' => '\Membercare\Client\Model\ArrangementCategory',
        'sub_category' => '\Membercare\Client\Model\ArrangementSubCategory',
        'area' => '\Membercare\Client\Model\ArrangementArea',
        'section' => '\Membercare\Client\Model\ArrangementGroup'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'name' => null,
        'description' => null,
        'texts' => null,
        'short_description' => null,
        'long_description' => null,
        'start_date_time' => 'date-time',
        'end_date_time' => 'date-time',
        'enroll_before' => 'date-time',
        'show_on_web' => null,
        'for_invitees_only' => null,
        'category' => null,
        'sub_category' => null,
        'area' => null,
        'section' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'name' => 'name',
        'description' => 'description',
        'texts' => 'texts',
        'short_description' => 'shortDescription',
        'long_description' => 'longDescription',
        'start_date_time' => 'startDateTime',
        'end_date_time' => 'endDateTime',
        'enroll_before' => 'enrollBefore',
        'show_on_web' => 'showOnWeb',
        'for_invitees_only' => 'forInviteesOnly',
        'category' => 'category',
        'sub_category' => 'subCategory',
        'area' => 'area',
        'section' => 'section'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'name' => 'setName',
        'description' => 'setDescription',
        'texts' => 'setTexts',
        'short_description' => 'setShortDescription',
        'long_description' => 'setLongDescription',
        'start_date_time' => 'setStartDateTime',
        'end_date_time' => 'setEndDateTime',
        'enroll_before' => 'setEnrollBefore',
        'show_on_web' => 'setShowOnWeb',
        'for_invitees_only' => 'setForInviteesOnly',
        'category' => 'setCategory',
        'sub_category' => 'setSubCategory',
        'area' => 'setArea',
        'section' => 'setSection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'name' => 'getName',
        'description' => 'getDescription',
        'texts' => 'getTexts',
        'short_description' => 'getShortDescription',
        'long_description' => 'getLongDescription',
        'start_date_time' => 'getStartDateTime',
        'end_date_time' => 'getEndDateTime',
        'enroll_before' => 'getEnrollBefore',
        'show_on_web' => 'getShowOnWeb',
        'for_invitees_only' => 'getForInviteesOnly',
        'category' => 'getCategory',
        'sub_category' => 'getSubCategory',
        'area' => 'getArea',
        'section' => 'getSection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['texts'] = isset($data['texts']) ? $data['texts'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['start_date_time'] = isset($data['start_date_time']) ? $data['start_date_time'] : null;
        $this->container['end_date_time'] = isset($data['end_date_time']) ? $data['end_date_time'] : null;
        $this->container['enroll_before'] = isset($data['enroll_before']) ? $data['enroll_before'] : null;
        $this->container['show_on_web'] = isset($data['show_on_web']) ? $data['show_on_web'] : null;
        $this->container['for_invitees_only'] = isset($data['for_invitees_only']) ? $data['for_invitees_only'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['sub_category'] = isset($data['sub_category']) ? $data['sub_category'] : null;
        $this->container['area'] = isset($data['area']) ? $data['area'] : null;
        $this->container['section'] = isset($data['section']) ? $data['section'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The Name of the arrangement
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the arrangement
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets texts
     *
     * @return \Membercare\Client\Model\ArrangementText[]
     */
    public function getTexts()
    {
        return $this->container['texts'];
    }

    /**
     * Sets texts
     *
     * @param \Membercare\Client\Model\ArrangementText[] $texts Determines which type of arrangement text it is.  1 = ShortDescription, 2 = LongDescription, 3 = Syllabus, 4 = Program.
     *
     * @return $this
     */
    public function setTexts($texts)
    {
        $this->container['texts'] = $texts;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description Short description of the arrangement as html.
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string $long_description Long description of the arrangement as html.
     *
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets start_date_time
     *
     * @return \DateTime
     */
    public function getStartDateTime()
    {
        return $this->container['start_date_time'];
    }

    /**
     * Sets start_date_time
     *
     * @param \DateTime $start_date_time The start datetime of the arrangement.
     *
     * @return $this
     */
    public function setStartDateTime($start_date_time)
    {
        $this->container['start_date_time'] = $start_date_time;

        return $this;
    }

    /**
     * Gets end_date_time
     *
     * @return \DateTime
     */
    public function getEndDateTime()
    {
        return $this->container['end_date_time'];
    }

    /**
     * Sets end_date_time
     *
     * @param \DateTime $end_date_time The end datetime of the arrangment.
     *
     * @return $this
     */
    public function setEndDateTime($end_date_time)
    {
        $this->container['end_date_time'] = $end_date_time;

        return $this;
    }

    /**
     * Gets enroll_before
     *
     * @return \DateTime
     */
    public function getEnrollBefore()
    {
        return $this->container['enroll_before'];
    }

    /**
     * Sets enroll_before
     *
     * @param \DateTime $enroll_before The latest date where it is possible to enroll the arrangement
     *
     * @return $this
     */
    public function setEnrollBefore($enroll_before)
    {
        $this->container['enroll_before'] = $enroll_before;

        return $this;
    }

    /**
     * Gets show_on_web
     *
     * @return bool
     */
    public function getShowOnWeb()
    {
        return $this->container['show_on_web'];
    }

    /**
     * Sets show_on_web
     *
     * @param bool $show_on_web Show on web
     *
     * @return $this
     */
    public function setShowOnWeb($show_on_web)
    {
        $this->container['show_on_web'] = $show_on_web;

        return $this;
    }

    /**
     * Gets for_invitees_only
     *
     * @return bool
     */
    public function getForInviteesOnly()
    {
        return $this->container['for_invitees_only'];
    }

    /**
     * Sets for_invitees_only
     *
     * @param bool $for_invitees_only Is the arrangement only for invited members
     *
     * @return $this
     */
    public function setForInviteesOnly($for_invitees_only)
    {
        $this->container['for_invitees_only'] = $for_invitees_only;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Membercare\Client\Model\ArrangementCategory
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Membercare\Client\Model\ArrangementCategory $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets sub_category
     *
     * @return \Membercare\Client\Model\ArrangementSubCategory
     */
    public function getSubCategory()
    {
        return $this->container['sub_category'];
    }

    /**
     * Sets sub_category
     *
     * @param \Membercare\Client\Model\ArrangementSubCategory $sub_category sub_category
     *
     * @return $this
     */
    public function setSubCategory($sub_category)
    {
        $this->container['sub_category'] = $sub_category;

        return $this;
    }

    /**
     * Gets area
     *
     * @return \Membercare\Client\Model\ArrangementArea
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param \Membercare\Client\Model\ArrangementArea $area area
     *
     * @return $this
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets section
     *
     * @return \Membercare\Client\Model\ArrangementGroup
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param \Membercare\Client\Model\ArrangementGroup $section section
     *
     * @return $this
     */
    public function setSection($section)
    {
        $this->container['section'] = $section;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
