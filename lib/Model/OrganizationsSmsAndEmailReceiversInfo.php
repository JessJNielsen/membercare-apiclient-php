<?php
/**
 * OrganizationsSmsAndEmailReceiversInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * OrganizationsSmsAndEmailReceiversInfo Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationsSmsAndEmailReceiversInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationsSmsAndEmailReceiversInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organization_identification' => 'string',
        'organization_name' => 'string',
        'sms_receiver_debtor_account_numbers' => 'string[]',
        'email_receiver_debtor_account_numbers' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organization_identification' => null,
        'organization_name' => null,
        'sms_receiver_debtor_account_numbers' => null,
        'email_receiver_debtor_account_numbers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization_identification' => 'organizationIdentification',
        'organization_name' => 'organizationName',
        'sms_receiver_debtor_account_numbers' => 'smsReceiverDebtorAccountNumbers',
        'email_receiver_debtor_account_numbers' => 'emailReceiverDebtorAccountNumbers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization_identification' => 'setOrganizationIdentification',
        'organization_name' => 'setOrganizationName',
        'sms_receiver_debtor_account_numbers' => 'setSmsReceiverDebtorAccountNumbers',
        'email_receiver_debtor_account_numbers' => 'setEmailReceiverDebtorAccountNumbers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization_identification' => 'getOrganizationIdentification',
        'organization_name' => 'getOrganizationName',
        'sms_receiver_debtor_account_numbers' => 'getSmsReceiverDebtorAccountNumbers',
        'email_receiver_debtor_account_numbers' => 'getEmailReceiverDebtorAccountNumbers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organization_identification'] = isset($data['organization_identification']) ? $data['organization_identification'] : null;
        $this->container['organization_name'] = isset($data['organization_name']) ? $data['organization_name'] : null;
        $this->container['sms_receiver_debtor_account_numbers'] = isset($data['sms_receiver_debtor_account_numbers']) ? $data['sms_receiver_debtor_account_numbers'] : null;
        $this->container['email_receiver_debtor_account_numbers'] = isset($data['email_receiver_debtor_account_numbers']) ? $data['email_receiver_debtor_account_numbers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization_identification
     *
     * @return string
     */
    public function getOrganizationIdentification()
    {
        return $this->container['organization_identification'];
    }

    /**
     * Sets organization_identification
     *
     * @param string $organization_identification organization_identification
     *
     * @return $this
     */
    public function setOrganizationIdentification($organization_identification)
    {
        $this->container['organization_identification'] = $organization_identification;

        return $this;
    }

    /**
     * Gets organization_name
     *
     * @return string
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     *
     * @param string $organization_name organization_name
     *
     * @return $this
     */
    public function setOrganizationName($organization_name)
    {
        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets sms_receiver_debtor_account_numbers
     *
     * @return string[]
     */
    public function getSmsReceiverDebtorAccountNumbers()
    {
        return $this->container['sms_receiver_debtor_account_numbers'];
    }

    /**
     * Sets sms_receiver_debtor_account_numbers
     *
     * @param string[] $sms_receiver_debtor_account_numbers sms_receiver_debtor_account_numbers
     *
     * @return $this
     */
    public function setSmsReceiverDebtorAccountNumbers($sms_receiver_debtor_account_numbers)
    {
        $this->container['sms_receiver_debtor_account_numbers'] = $sms_receiver_debtor_account_numbers;

        return $this;
    }

    /**
     * Gets email_receiver_debtor_account_numbers
     *
     * @return string[]
     */
    public function getEmailReceiverDebtorAccountNumbers()
    {
        return $this->container['email_receiver_debtor_account_numbers'];
    }

    /**
     * Sets email_receiver_debtor_account_numbers
     *
     * @param string[] $email_receiver_debtor_account_numbers email_receiver_debtor_account_numbers
     *
     * @return $this
     */
    public function setEmailReceiverDebtorAccountNumbers($email_receiver_debtor_account_numbers)
    {
        $this->container['email_receiver_debtor_account_numbers'] = $email_receiver_debtor_account_numbers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
