<?php
/**
 * ExternalPurchaseItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * ExternalPurchaseItem Class Doc Comment
 *
 * @category Class
 * @description Information about an external item purchase
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExternalPurchaseItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExternalPurchaseItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'description' => 'string',
        'amount' => 'double',
        'total_price_without_vat' => 'double',
        'sequence' => 'int',
        'finance_dimensions' => '\Membercare\Client\Model\FinanceDimensions',
        'total_vat' => 'double',
        'external_source_identification' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'description' => null,
        'amount' => 'double',
        'total_price_without_vat' => 'double',
        'sequence' => 'int64',
        'finance_dimensions' => null,
        'total_vat' => 'double',
        'external_source_identification' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'description' => 'description',
        'amount' => 'amount',
        'total_price_without_vat' => 'totalPriceWithoutVat',
        'sequence' => 'sequence',
        'finance_dimensions' => 'financeDimensions',
        'total_vat' => 'totalVat',
        'external_source_identification' => 'externalSourceIdentification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'description' => 'setDescription',
        'amount' => 'setAmount',
        'total_price_without_vat' => 'setTotalPriceWithoutVat',
        'sequence' => 'setSequence',
        'finance_dimensions' => 'setFinanceDimensions',
        'total_vat' => 'setTotalVat',
        'external_source_identification' => 'setExternalSourceIdentification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'description' => 'getDescription',
        'amount' => 'getAmount',
        'total_price_without_vat' => 'getTotalPriceWithoutVat',
        'sequence' => 'getSequence',
        'finance_dimensions' => 'getFinanceDimensions',
        'total_vat' => 'getTotalVat',
        'external_source_identification' => 'getExternalSourceIdentification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['total_price_without_vat'] = isset($data['total_price_without_vat']) ? $data['total_price_without_vat'] : null;
        $this->container['sequence'] = isset($data['sequence']) ? $data['sequence'] : null;
        $this->container['finance_dimensions'] = isset($data['finance_dimensions']) ? $data['finance_dimensions'] : null;
        $this->container['total_vat'] = isset($data['total_vat']) ? $data['total_vat'] : null;
        $this->container['external_source_identification'] = isset($data['external_source_identification']) ? $data['external_source_identification'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the item.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount The amount of the purchased item(s).
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets total_price_without_vat
     *
     * @return double
     */
    public function getTotalPriceWithoutVat()
    {
        return $this->container['total_price_without_vat'];
    }

    /**
     * Sets total_price_without_vat
     *
     * @param double $total_price_without_vat The total price of the purchased item(s)
     *
     * @return $this
     */
    public function setTotalPriceWithoutVat($total_price_without_vat)
    {
        $this->container['total_price_without_vat'] = $total_price_without_vat;

        return $this;
    }

    /**
     * Gets sequence
     *
     * @return int
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param int $sequence The sequence (starting from 1) of the orderline in regard to the complete order.
     *
     * @return $this
     */
    public function setSequence($sequence)
    {
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets finance_dimensions
     *
     * @return \Membercare\Client\Model\FinanceDimensions
     */
    public function getFinanceDimensions()
    {
        return $this->container['finance_dimensions'];
    }

    /**
     * Sets finance_dimensions
     *
     * @param \Membercare\Client\Model\FinanceDimensions $finance_dimensions finance_dimensions
     *
     * @return $this
     */
    public function setFinanceDimensions($finance_dimensions)
    {
        $this->container['finance_dimensions'] = $finance_dimensions;

        return $this;
    }

    /**
     * Gets total_vat
     *
     * @return double
     */
    public function getTotalVat()
    {
        return $this->container['total_vat'];
    }

    /**
     * Sets total_vat
     *
     * @param double $total_vat The total vat price of the purchased item(s).
     *
     * @return $this
     */
    public function setTotalVat($total_vat)
    {
        $this->container['total_vat'] = $total_vat;

        return $this;
    }

    /**
     * Gets external_source_identification
     *
     * @return string
     */
    public function getExternalSourceIdentification()
    {
        return $this->container['external_source_identification'];
    }

    /**
     * Sets external_source_identification
     *
     * @param string $external_source_identification An identification of the external source.  Optional
     *
     * @return $this
     */
    public function setExternalSourceIdentification($external_source_identification)
    {
        $this->container['external_source_identification'] = $external_source_identification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
