<?php
/**
 * MembershipStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * MembershipStatistics Class Doc Comment
 *
 * @category Class
 * @description Info about number of outgoing and incoming members of a specific membership category at a specific date.
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MembershipStatistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MembershipStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'membership_category' => '\Membercare\Client\Model\MembershipCategory',
        'number_of_applicants' => 'int',
        'number_of_new_members' => 'int',
        'number_of_disaffiliated_members' => 'int',
        'total_members' => 'int',
        'number_of_applicants_membership_category' => 'int',
        'number_of_new_members_membership_category' => 'int',
        'number_of_disaffiliated_members_membership_category' => 'int',
        'total_members_membership_category' => 'int',
        'date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'membership_category' => null,
        'number_of_applicants' => 'int64',
        'number_of_new_members' => 'int64',
        'number_of_disaffiliated_members' => 'int64',
        'total_members' => 'int64',
        'number_of_applicants_membership_category' => 'int64',
        'number_of_new_members_membership_category' => 'int64',
        'number_of_disaffiliated_members_membership_category' => 'int64',
        'total_members_membership_category' => 'int64',
        'date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'membership_category' => 'membershipCategory',
        'number_of_applicants' => 'numberOfApplicants',
        'number_of_new_members' => 'numberOfNewMembers',
        'number_of_disaffiliated_members' => 'numberOfDisaffiliatedMembers',
        'total_members' => 'totalMembers',
        'number_of_applicants_membership_category' => 'numberOfApplicantsMembershipCategory',
        'number_of_new_members_membership_category' => 'numberOfNewMembersMembershipCategory',
        'number_of_disaffiliated_members_membership_category' => 'numberOfDisaffiliatedMembersMembershipCategory',
        'total_members_membership_category' => 'totalMembersMembershipCategory',
        'date' => 'date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'membership_category' => 'setMembershipCategory',
        'number_of_applicants' => 'setNumberOfApplicants',
        'number_of_new_members' => 'setNumberOfNewMembers',
        'number_of_disaffiliated_members' => 'setNumberOfDisaffiliatedMembers',
        'total_members' => 'setTotalMembers',
        'number_of_applicants_membership_category' => 'setNumberOfApplicantsMembershipCategory',
        'number_of_new_members_membership_category' => 'setNumberOfNewMembersMembershipCategory',
        'number_of_disaffiliated_members_membership_category' => 'setNumberOfDisaffiliatedMembersMembershipCategory',
        'total_members_membership_category' => 'setTotalMembersMembershipCategory',
        'date' => 'setDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'membership_category' => 'getMembershipCategory',
        'number_of_applicants' => 'getNumberOfApplicants',
        'number_of_new_members' => 'getNumberOfNewMembers',
        'number_of_disaffiliated_members' => 'getNumberOfDisaffiliatedMembers',
        'total_members' => 'getTotalMembers',
        'number_of_applicants_membership_category' => 'getNumberOfApplicantsMembershipCategory',
        'number_of_new_members_membership_category' => 'getNumberOfNewMembersMembershipCategory',
        'number_of_disaffiliated_members_membership_category' => 'getNumberOfDisaffiliatedMembersMembershipCategory',
        'total_members_membership_category' => 'getTotalMembersMembershipCategory',
        'date' => 'getDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['membership_category'] = isset($data['membership_category']) ? $data['membership_category'] : null;
        $this->container['number_of_applicants'] = isset($data['number_of_applicants']) ? $data['number_of_applicants'] : null;
        $this->container['number_of_new_members'] = isset($data['number_of_new_members']) ? $data['number_of_new_members'] : null;
        $this->container['number_of_disaffiliated_members'] = isset($data['number_of_disaffiliated_members']) ? $data['number_of_disaffiliated_members'] : null;
        $this->container['total_members'] = isset($data['total_members']) ? $data['total_members'] : null;
        $this->container['number_of_applicants_membership_category'] = isset($data['number_of_applicants_membership_category']) ? $data['number_of_applicants_membership_category'] : null;
        $this->container['number_of_new_members_membership_category'] = isset($data['number_of_new_members_membership_category']) ? $data['number_of_new_members_membership_category'] : null;
        $this->container['number_of_disaffiliated_members_membership_category'] = isset($data['number_of_disaffiliated_members_membership_category']) ? $data['number_of_disaffiliated_members_membership_category'] : null;
        $this->container['total_members_membership_category'] = isset($data['total_members_membership_category']) ? $data['total_members_membership_category'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets membership_category
     *
     * @return \Membercare\Client\Model\MembershipCategory
     */
    public function getMembershipCategory()
    {
        return $this->container['membership_category'];
    }

    /**
     * Sets membership_category
     *
     * @param \Membercare\Client\Model\MembershipCategory $membership_category membership_category
     *
     * @return $this
     */
    public function setMembershipCategory($membership_category)
    {
        $this->container['membership_category'] = $membership_category;

        return $this;
    }

    /**
     * Gets number_of_applicants
     *
     * @return int
     */
    public function getNumberOfApplicants()
    {
        return $this->container['number_of_applicants'];
    }

    /**
     * Sets number_of_applicants
     *
     * @param int $number_of_applicants Number of members that applied for a membership this date
     *
     * @return $this
     */
    public function setNumberOfApplicants($number_of_applicants)
    {
        $this->container['number_of_applicants'] = $number_of_applicants;

        return $this;
    }

    /**
     * Gets number_of_new_members
     *
     * @return int
     */
    public function getNumberOfNewMembers()
    {
        return $this->container['number_of_new_members'];
    }

    /**
     * Sets number_of_new_members
     *
     * @param int $number_of_new_members Members joining the specified membership category at the specified date.
     *
     * @return $this
     */
    public function setNumberOfNewMembers($number_of_new_members)
    {
        $this->container['number_of_new_members'] = $number_of_new_members;

        return $this;
    }

    /**
     * Gets number_of_disaffiliated_members
     *
     * @return int
     */
    public function getNumberOfDisaffiliatedMembers()
    {
        return $this->container['number_of_disaffiliated_members'];
    }

    /**
     * Sets number_of_disaffiliated_members
     *
     * @param int $number_of_disaffiliated_members Members leaving the specified membership category at the specified date.
     *
     * @return $this
     */
    public function setNumberOfDisaffiliatedMembers($number_of_disaffiliated_members)
    {
        $this->container['number_of_disaffiliated_members'] = $number_of_disaffiliated_members;

        return $this;
    }

    /**
     * Gets total_members
     *
     * @return int
     */
    public function getTotalMembers()
    {
        return $this->container['total_members'];
    }

    /**
     * Sets total_members
     *
     * @param int $total_members Total members with the specified membership category at the specified date.
     *
     * @return $this
     */
    public function setTotalMembers($total_members)
    {
        $this->container['total_members'] = $total_members;

        return $this;
    }

    /**
     * Gets number_of_applicants_membership_category
     *
     * @return int
     */
    public function getNumberOfApplicantsMembershipCategory()
    {
        return $this->container['number_of_applicants_membership_category'];
    }

    /**
     * Sets number_of_applicants_membership_category
     *
     * @param int $number_of_applicants_membership_category Number of members that applied for a membership this date
     *
     * @return $this
     */
    public function setNumberOfApplicantsMembershipCategory($number_of_applicants_membership_category)
    {
        $this->container['number_of_applicants_membership_category'] = $number_of_applicants_membership_category;

        return $this;
    }

    /**
     * Gets number_of_new_members_membership_category
     *
     * @return int
     */
    public function getNumberOfNewMembersMembershipCategory()
    {
        return $this->container['number_of_new_members_membership_category'];
    }

    /**
     * Sets number_of_new_members_membership_category
     *
     * @param int $number_of_new_members_membership_category Members joining the specified membership category at the specified date.
     *
     * @return $this
     */
    public function setNumberOfNewMembersMembershipCategory($number_of_new_members_membership_category)
    {
        $this->container['number_of_new_members_membership_category'] = $number_of_new_members_membership_category;

        return $this;
    }

    /**
     * Gets number_of_disaffiliated_members_membership_category
     *
     * @return int
     */
    public function getNumberOfDisaffiliatedMembersMembershipCategory()
    {
        return $this->container['number_of_disaffiliated_members_membership_category'];
    }

    /**
     * Sets number_of_disaffiliated_members_membership_category
     *
     * @param int $number_of_disaffiliated_members_membership_category Members leaving the specified membership category at the specified date.
     *
     * @return $this
     */
    public function setNumberOfDisaffiliatedMembersMembershipCategory($number_of_disaffiliated_members_membership_category)
    {
        $this->container['number_of_disaffiliated_members_membership_category'] = $number_of_disaffiliated_members_membership_category;

        return $this;
    }

    /**
     * Gets total_members_membership_category
     *
     * @return int
     */
    public function getTotalMembersMembershipCategory()
    {
        return $this->container['total_members_membership_category'];
    }

    /**
     * Sets total_members_membership_category
     *
     * @param int $total_members_membership_category Total members with the specified membership category at the specified date.
     *
     * @return $this
     */
    public function setTotalMembersMembershipCategory($total_members_membership_category)
    {
        $this->container['total_members_membership_category'] = $total_members_membership_category;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The date.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
