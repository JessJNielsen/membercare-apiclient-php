<?php
/**
 * ArrangementTemplatePost
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * ArrangementTemplatePost Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArrangementTemplatePost implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArrangementTemplatePost';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'start_time' => '\DateTime',
        'total_seats' => 'int',
        'end_time' => '\DateTime',
        'earliest_participant_list_view_date_time' => '\DateTime',
        'last_participant_list_view_date_time' => '\DateTime',
        'cancel_signup_before_date_time' => '\DateTime',
        'description' => 'string',
        'short_description' => 'string',
        'long_description' => 'string',
        'texts' => '\Membercare\Client\Model\ArrangementText[]',
        'enroll_before' => '\DateTime',
        'for_invitees_only' => 'bool',
        'web_enabled' => 'bool',
        'recurrence' => '\Membercare\Client\Model\ArrangementTemplatePostRecurrence',
        'event_crews' => '\Membercare\Client\Model\EventCrew[]',
        'allowed_participant_categories' => '\Membercare\Client\Model\AllowedParticipantCategory[]',
        'custom_field_values' => '\Membercare\Client\Model\CustomFieldValue[]',
        'post_arrangement_regular_service_templates' => '\Membercare\Client\Model\PostArrangementTemplateRegularService[]',
        'arrangement_template' => '\Membercare\Client\Model\ArrangementTemplate',
        'organizations' => '\Membercare\Client\Model\SimpleOrganization[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'start_time' => 'date-time',
        'total_seats' => 'int64',
        'end_time' => 'date-time',
        'earliest_participant_list_view_date_time' => 'date-time',
        'last_participant_list_view_date_time' => 'date-time',
        'cancel_signup_before_date_time' => 'date-time',
        'description' => null,
        'short_description' => null,
        'long_description' => null,
        'texts' => null,
        'enroll_before' => 'date-time',
        'for_invitees_only' => null,
        'web_enabled' => null,
        'recurrence' => null,
        'event_crews' => null,
        'allowed_participant_categories' => null,
        'custom_field_values' => null,
        'post_arrangement_regular_service_templates' => null,
        'arrangement_template' => null,
        'organizations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'start_time' => 'startTime',
        'total_seats' => 'totalSeats',
        'end_time' => 'endTime',
        'earliest_participant_list_view_date_time' => 'earliestParticipantListViewDateTime',
        'last_participant_list_view_date_time' => 'lastParticipantListViewDateTime',
        'cancel_signup_before_date_time' => 'cancelSignupBeforeDateTime',
        'description' => 'description',
        'short_description' => 'shortDescription',
        'long_description' => 'longDescription',
        'texts' => 'texts',
        'enroll_before' => 'enrollBefore',
        'for_invitees_only' => 'forInviteesOnly',
        'web_enabled' => 'webEnabled',
        'recurrence' => 'recurrence',
        'event_crews' => 'eventCrews',
        'allowed_participant_categories' => 'allowedParticipantCategories',
        'custom_field_values' => 'customFieldValues',
        'post_arrangement_regular_service_templates' => 'postArrangementRegularServiceTemplates',
        'arrangement_template' => 'arrangementTemplate',
        'organizations' => 'organizations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'start_time' => 'setStartTime',
        'total_seats' => 'setTotalSeats',
        'end_time' => 'setEndTime',
        'earliest_participant_list_view_date_time' => 'setEarliestParticipantListViewDateTime',
        'last_participant_list_view_date_time' => 'setLastParticipantListViewDateTime',
        'cancel_signup_before_date_time' => 'setCancelSignupBeforeDateTime',
        'description' => 'setDescription',
        'short_description' => 'setShortDescription',
        'long_description' => 'setLongDescription',
        'texts' => 'setTexts',
        'enroll_before' => 'setEnrollBefore',
        'for_invitees_only' => 'setForInviteesOnly',
        'web_enabled' => 'setWebEnabled',
        'recurrence' => 'setRecurrence',
        'event_crews' => 'setEventCrews',
        'allowed_participant_categories' => 'setAllowedParticipantCategories',
        'custom_field_values' => 'setCustomFieldValues',
        'post_arrangement_regular_service_templates' => 'setPostArrangementRegularServiceTemplates',
        'arrangement_template' => 'setArrangementTemplate',
        'organizations' => 'setOrganizations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'start_time' => 'getStartTime',
        'total_seats' => 'getTotalSeats',
        'end_time' => 'getEndTime',
        'earliest_participant_list_view_date_time' => 'getEarliestParticipantListViewDateTime',
        'last_participant_list_view_date_time' => 'getLastParticipantListViewDateTime',
        'cancel_signup_before_date_time' => 'getCancelSignupBeforeDateTime',
        'description' => 'getDescription',
        'short_description' => 'getShortDescription',
        'long_description' => 'getLongDescription',
        'texts' => 'getTexts',
        'enroll_before' => 'getEnrollBefore',
        'for_invitees_only' => 'getForInviteesOnly',
        'web_enabled' => 'getWebEnabled',
        'recurrence' => 'getRecurrence',
        'event_crews' => 'getEventCrews',
        'allowed_participant_categories' => 'getAllowedParticipantCategories',
        'custom_field_values' => 'getCustomFieldValues',
        'post_arrangement_regular_service_templates' => 'getPostArrangementRegularServiceTemplates',
        'arrangement_template' => 'getArrangementTemplate',
        'organizations' => 'getOrganizations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['total_seats'] = isset($data['total_seats']) ? $data['total_seats'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['earliest_participant_list_view_date_time'] = isset($data['earliest_participant_list_view_date_time']) ? $data['earliest_participant_list_view_date_time'] : null;
        $this->container['last_participant_list_view_date_time'] = isset($data['last_participant_list_view_date_time']) ? $data['last_participant_list_view_date_time'] : null;
        $this->container['cancel_signup_before_date_time'] = isset($data['cancel_signup_before_date_time']) ? $data['cancel_signup_before_date_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['texts'] = isset($data['texts']) ? $data['texts'] : null;
        $this->container['enroll_before'] = isset($data['enroll_before']) ? $data['enroll_before'] : null;
        $this->container['for_invitees_only'] = isset($data['for_invitees_only']) ? $data['for_invitees_only'] : null;
        $this->container['web_enabled'] = isset($data['web_enabled']) ? $data['web_enabled'] : null;
        $this->container['recurrence'] = isset($data['recurrence']) ? $data['recurrence'] : null;
        $this->container['event_crews'] = isset($data['event_crews']) ? $data['event_crews'] : null;
        $this->container['allowed_participant_categories'] = isset($data['allowed_participant_categories']) ? $data['allowed_participant_categories'] : null;
        $this->container['custom_field_values'] = isset($data['custom_field_values']) ? $data['custom_field_values'] : null;
        $this->container['post_arrangement_regular_service_templates'] = isset($data['post_arrangement_regular_service_templates']) ? $data['post_arrangement_regular_service_templates'] : null;
        $this->container['arrangement_template'] = isset($data['arrangement_template']) ? $data['arrangement_template'] : null;
        $this->container['organizations'] = isset($data['organizations']) ? $data['organizations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime $start_time Timespan from 1900-1-1 indicating starttime for the Arrangement
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets total_seats
     *
     * @return int
     */
    public function getTotalSeats()
    {
        return $this->container['total_seats'];
    }

    /**
     * Sets total_seats
     *
     * @param int $total_seats Maximum total seats in the event
     *
     * @return $this
     */
    public function setTotalSeats($total_seats)
    {
        $this->container['total_seats'] = $total_seats;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime $end_time Timespan from 1900-1-1 indicating endtime for the Arrangement
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets earliest_participant_list_view_date_time
     *
     * @return \DateTime
     */
    public function getEarliestParticipantListViewDateTime()
    {
        return $this->container['earliest_participant_list_view_date_time'];
    }

    /**
     * Sets earliest_participant_list_view_date_time
     *
     * @param \DateTime $earliest_participant_list_view_date_time Earliest date of participant list to be shown
     *
     * @return $this
     */
    public function setEarliestParticipantListViewDateTime($earliest_participant_list_view_date_time)
    {
        $this->container['earliest_participant_list_view_date_time'] = $earliest_participant_list_view_date_time;

        return $this;
    }

    /**
     * Gets last_participant_list_view_date_time
     *
     * @return \DateTime
     */
    public function getLastParticipantListViewDateTime()
    {
        return $this->container['last_participant_list_view_date_time'];
    }

    /**
     * Sets last_participant_list_view_date_time
     *
     * @param \DateTime $last_participant_list_view_date_time Last date of participant list to be shown
     *
     * @return $this
     */
    public function setLastParticipantListViewDateTime($last_participant_list_view_date_time)
    {
        $this->container['last_participant_list_view_date_time'] = $last_participant_list_view_date_time;

        return $this;
    }

    /**
     * Gets cancel_signup_before_date_time
     *
     * @return \DateTime
     */
    public function getCancelSignupBeforeDateTime()
    {
        return $this->container['cancel_signup_before_date_time'];
    }

    /**
     * Sets cancel_signup_before_date_time
     *
     * @param \DateTime $cancel_signup_before_date_time Last date of cancelling participation
     *
     * @return $this
     */
    public function setCancelSignupBeforeDateTime($cancel_signup_before_date_time)
    {
        $this->container['cancel_signup_before_date_time'] = $cancel_signup_before_date_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description short_description
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string $long_description long_description
     *
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets texts
     *
     * @return \Membercare\Client\Model\ArrangementText[]
     */
    public function getTexts()
    {
        return $this->container['texts'];
    }

    /**
     * Sets texts
     *
     * @param \Membercare\Client\Model\ArrangementText[] $texts texts
     *
     * @return $this
     */
    public function setTexts($texts)
    {
        $this->container['texts'] = $texts;

        return $this;
    }

    /**
     * Gets enroll_before
     *
     * @return \DateTime
     */
    public function getEnrollBefore()
    {
        return $this->container['enroll_before'];
    }

    /**
     * Sets enroll_before
     *
     * @param \DateTime $enroll_before enroll_before
     *
     * @return $this
     */
    public function setEnrollBefore($enroll_before)
    {
        $this->container['enroll_before'] = $enroll_before;

        return $this;
    }

    /**
     * Gets for_invitees_only
     *
     * @return bool
     */
    public function getForInviteesOnly()
    {
        return $this->container['for_invitees_only'];
    }

    /**
     * Sets for_invitees_only
     *
     * @param bool $for_invitees_only for_invitees_only
     *
     * @return $this
     */
    public function setForInviteesOnly($for_invitees_only)
    {
        $this->container['for_invitees_only'] = $for_invitees_only;

        return $this;
    }

    /**
     * Gets web_enabled
     *
     * @return bool
     */
    public function getWebEnabled()
    {
        return $this->container['web_enabled'];
    }

    /**
     * Sets web_enabled
     *
     * @param bool $web_enabled web_enabled
     *
     * @return $this
     */
    public function setWebEnabled($web_enabled)
    {
        $this->container['web_enabled'] = $web_enabled;

        return $this;
    }

    /**
     * Gets recurrence
     *
     * @return \Membercare\Client\Model\ArrangementTemplatePostRecurrence
     */
    public function getRecurrence()
    {
        return $this->container['recurrence'];
    }

    /**
     * Sets recurrence
     *
     * @param \Membercare\Client\Model\ArrangementTemplatePostRecurrence $recurrence recurrence
     *
     * @return $this
     */
    public function setRecurrence($recurrence)
    {
        $this->container['recurrence'] = $recurrence;

        return $this;
    }

    /**
     * Gets event_crews
     *
     * @return \Membercare\Client\Model\EventCrew[]
     */
    public function getEventCrews()
    {
        return $this->container['event_crews'];
    }

    /**
     * Sets event_crews
     *
     * @param \Membercare\Client\Model\EventCrew[] $event_crews event_crews
     *
     * @return $this
     */
    public function setEventCrews($event_crews)
    {
        $this->container['event_crews'] = $event_crews;

        return $this;
    }

    /**
     * Gets allowed_participant_categories
     *
     * @return \Membercare\Client\Model\AllowedParticipantCategory[]
     */
    public function getAllowedParticipantCategories()
    {
        return $this->container['allowed_participant_categories'];
    }

    /**
     * Sets allowed_participant_categories
     *
     * @param \Membercare\Client\Model\AllowedParticipantCategory[] $allowed_participant_categories allowed_participant_categories
     *
     * @return $this
     */
    public function setAllowedParticipantCategories($allowed_participant_categories)
    {
        $this->container['allowed_participant_categories'] = $allowed_participant_categories;

        return $this;
    }

    /**
     * Gets custom_field_values
     *
     * @return \Membercare\Client\Model\CustomFieldValue[]
     */
    public function getCustomFieldValues()
    {
        return $this->container['custom_field_values'];
    }

    /**
     * Sets custom_field_values
     *
     * @param \Membercare\Client\Model\CustomFieldValue[] $custom_field_values custom_field_values
     *
     * @return $this
     */
    public function setCustomFieldValues($custom_field_values)
    {
        $this->container['custom_field_values'] = $custom_field_values;

        return $this;
    }

    /**
     * Gets post_arrangement_regular_service_templates
     *
     * @return \Membercare\Client\Model\PostArrangementTemplateRegularService[]
     */
    public function getPostArrangementRegularServiceTemplates()
    {
        return $this->container['post_arrangement_regular_service_templates'];
    }

    /**
     * Sets post_arrangement_regular_service_templates
     *
     * @param \Membercare\Client\Model\PostArrangementTemplateRegularService[] $post_arrangement_regular_service_templates post_arrangement_regular_service_templates
     *
     * @return $this
     */
    public function setPostArrangementRegularServiceTemplates($post_arrangement_regular_service_templates)
    {
        $this->container['post_arrangement_regular_service_templates'] = $post_arrangement_regular_service_templates;

        return $this;
    }

    /**
     * Gets arrangement_template
     *
     * @return \Membercare\Client\Model\ArrangementTemplate
     */
    public function getArrangementTemplate()
    {
        return $this->container['arrangement_template'];
    }

    /**
     * Sets arrangement_template
     *
     * @param \Membercare\Client\Model\ArrangementTemplate $arrangement_template arrangement_template
     *
     * @return $this
     */
    public function setArrangementTemplate($arrangement_template)
    {
        $this->container['arrangement_template'] = $arrangement_template;

        return $this;
    }

    /**
     * Gets organizations
     *
     * @return \Membercare\Client\Model\SimpleOrganization[]
     */
    public function getOrganizations()
    {
        return $this->container['organizations'];
    }

    /**
     * Sets organizations
     *
     * @param \Membercare\Client\Model\SimpleOrganization[] $organizations organizations
     *
     * @return $this
     */
    public function setOrganizations($organizations)
    {
        $this->container['organizations'] = $organizations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
