<?php
/**
 * BoardFunction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * BoardFunction Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BoardFunction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BoardFunction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'name' => 'string',
        'short_name' => 'string',
        'web_enabled' => 'bool',
        'web_edit_enabled' => 'bool',
        'valid' => 'bool',
        'sequence' => 'int',
        'allows_data_access' => 'bool',
        'roles' => '\Membercare\Client\Model\BoardMemberCategoryRole[]',
        'max_months' => 'int',
        'roles_propagate_to_hierarchy' => 'bool',
        'use_board_membership_sequence' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'name' => null,
        'short_name' => null,
        'web_enabled' => null,
        'web_edit_enabled' => null,
        'valid' => null,
        'sequence' => 'int64',
        'allows_data_access' => null,
        'roles' => null,
        'max_months' => 'int32',
        'roles_propagate_to_hierarchy' => null,
        'use_board_membership_sequence' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'name' => 'name',
        'short_name' => 'shortName',
        'web_enabled' => 'webEnabled',
        'web_edit_enabled' => 'webEditEnabled',
        'valid' => 'valid',
        'sequence' => 'sequence',
        'allows_data_access' => 'allowsDataAccess',
        'roles' => 'roles',
        'max_months' => 'maxMonths',
        'roles_propagate_to_hierarchy' => 'rolesPropagateToHierarchy',
        'use_board_membership_sequence' => 'useBoardMembershipSequence'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'name' => 'setName',
        'short_name' => 'setShortName',
        'web_enabled' => 'setWebEnabled',
        'web_edit_enabled' => 'setWebEditEnabled',
        'valid' => 'setValid',
        'sequence' => 'setSequence',
        'allows_data_access' => 'setAllowsDataAccess',
        'roles' => 'setRoles',
        'max_months' => 'setMaxMonths',
        'roles_propagate_to_hierarchy' => 'setRolesPropagateToHierarchy',
        'use_board_membership_sequence' => 'setUseBoardMembershipSequence'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'name' => 'getName',
        'short_name' => 'getShortName',
        'web_enabled' => 'getWebEnabled',
        'web_edit_enabled' => 'getWebEditEnabled',
        'valid' => 'getValid',
        'sequence' => 'getSequence',
        'allows_data_access' => 'getAllowsDataAccess',
        'roles' => 'getRoles',
        'max_months' => 'getMaxMonths',
        'roles_propagate_to_hierarchy' => 'getRolesPropagateToHierarchy',
        'use_board_membership_sequence' => 'getUseBoardMembershipSequence'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['short_name'] = isset($data['short_name']) ? $data['short_name'] : null;
        $this->container['web_enabled'] = isset($data['web_enabled']) ? $data['web_enabled'] : null;
        $this->container['web_edit_enabled'] = isset($data['web_edit_enabled']) ? $data['web_edit_enabled'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['sequence'] = isset($data['sequence']) ? $data['sequence'] : null;
        $this->container['allows_data_access'] = isset($data['allows_data_access']) ? $data['allows_data_access'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['max_months'] = isset($data['max_months']) ? $data['max_months'] : null;
        $this->container['roles_propagate_to_hierarchy'] = isset($data['roles_propagate_to_hierarchy']) ? $data['roles_propagate_to_hierarchy'] : null;
        $this->container['use_board_membership_sequence'] = isset($data['use_board_membership_sequence']) ? $data['use_board_membership_sequence'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name The short name
     *
     * @return $this
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets web_enabled
     *
     * @return bool
     */
    public function getWebEnabled()
    {
        return $this->container['web_enabled'];
    }

    /**
     * Sets web_enabled
     *
     * @param bool $web_enabled Should this be shown on web
     *
     * @return $this
     */
    public function setWebEnabled($web_enabled)
    {
        $this->container['web_enabled'] = $web_enabled;

        return $this;
    }

    /**
     * Gets web_edit_enabled
     *
     * @return bool
     */
    public function getWebEditEnabled()
    {
        return $this->container['web_edit_enabled'];
    }

    /**
     * Sets web_edit_enabled
     *
     * @param bool $web_edit_enabled Should this be editable on web
     *
     * @return $this
     */
    public function setWebEditEnabled($web_edit_enabled)
    {
        $this->container['web_edit_enabled'] = $web_edit_enabled;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool $valid Is this valid for use
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets sequence
     *
     * @return int
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param int $sequence Sequence for ordering
     *
     * @return $this
     */
    public function setSequence($sequence)
    {
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets allows_data_access
     *
     * @return bool
     */
    public function getAllowsDataAccess()
    {
        return $this->container['allows_data_access'];
    }

    /**
     * Sets allows_data_access
     *
     * @param bool $allows_data_access Indicates that this function will allow a user to access data
     *
     * @return $this
     */
    public function setAllowsDataAccess($allows_data_access)
    {
        $this->container['allows_data_access'] = $allows_data_access;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \Membercare\Client\Model\BoardMemberCategoryRole[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \Membercare\Client\Model\BoardMemberCategoryRole[] $roles Roles and rights applied to this boardFunction
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets max_months
     *
     * @return int
     */
    public function getMaxMonths()
    {
        return $this->container['max_months'];
    }

    /**
     * Sets max_months
     *
     * @param int $max_months This is the max amount of months a BoardFuction can last. Null is equal to infinity
     *
     * @return $this
     */
    public function setMaxMonths($max_months)
    {
        $this->container['max_months'] = $max_months;

        return $this;
    }

    /**
     * Gets roles_propagate_to_hierarchy
     *
     * @return bool
     */
    public function getRolesPropagateToHierarchy()
    {
        return $this->container['roles_propagate_to_hierarchy'];
    }

    /**
     * Sets roles_propagate_to_hierarchy
     *
     * @param bool $roles_propagate_to_hierarchy Indicates that the board member category roles of this board function propagates to all organizations in the underlying physical hierarchy
     *
     * @return $this
     */
    public function setRolesPropagateToHierarchy($roles_propagate_to_hierarchy)
    {
        $this->container['roles_propagate_to_hierarchy'] = $roles_propagate_to_hierarchy;

        return $this;
    }

    /**
     * Gets use_board_membership_sequence
     *
     * @return bool
     */
    public function getUseBoardMembershipSequence()
    {
        return $this->container['use_board_membership_sequence'];
    }

    /**
     * Sets use_board_membership_sequence
     *
     * @param bool $use_board_membership_sequence Indicates whether the BoardMember.Sequence should be appended to the category
     *
     * @return $this
     */
    public function setUseBoardMembershipSequence($use_board_membership_sequence)
    {
        $this->container['use_board_membership_sequence'] = $use_board_membership_sequence;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
