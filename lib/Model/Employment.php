<?php
/**
 * Employment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * Employment Class Doc Comment
 *
 * @category Class
 * @description An Employment object
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Employment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Employment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'company' => '\Membercare\Client\Model\Company',
        'person' => '\Membercare\Client\Model\Person',
        'employ_date' => '\DateTime',
        'unemploy_date' => '\DateTime',
        'employment_category' => '\Membercare\Client\Model\EmploymentCategory',
        'occupation_title' => '\Membercare\Client\Model\OccupationTitle',
        'official_title' => 'string',
        'contacts' => '\Membercare\Client\Model\Contact[]',
        'is_primary' => 'bool',
        'added_by_web' => 'bool',
        'agreement' => '\Membercare\Client\Model\Agreement',
        'hours' => 'double',
        'weeks' => 'int',
        'salary_addition' => 'string',
        'salary_step' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'company' => null,
        'person' => null,
        'employ_date' => 'date-time',
        'unemploy_date' => 'date-time',
        'employment_category' => null,
        'occupation_title' => null,
        'official_title' => null,
        'contacts' => null,
        'is_primary' => null,
        'added_by_web' => null,
        'agreement' => null,
        'hours' => 'double',
        'weeks' => 'int64',
        'salary_addition' => null,
        'salary_step' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'company' => 'company',
        'person' => 'person',
        'employ_date' => 'employDate',
        'unemploy_date' => 'unemployDate',
        'employment_category' => 'employmentCategory',
        'occupation_title' => 'occupationTitle',
        'official_title' => 'officialTitle',
        'contacts' => 'contacts',
        'is_primary' => 'isPrimary',
        'added_by_web' => 'addedByWeb',
        'agreement' => 'agreement',
        'hours' => 'hours',
        'weeks' => 'weeks',
        'salary_addition' => 'salaryAddition',
        'salary_step' => 'salaryStep'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'company' => 'setCompany',
        'person' => 'setPerson',
        'employ_date' => 'setEmployDate',
        'unemploy_date' => 'setUnemployDate',
        'employment_category' => 'setEmploymentCategory',
        'occupation_title' => 'setOccupationTitle',
        'official_title' => 'setOfficialTitle',
        'contacts' => 'setContacts',
        'is_primary' => 'setIsPrimary',
        'added_by_web' => 'setAddedByWeb',
        'agreement' => 'setAgreement',
        'hours' => 'setHours',
        'weeks' => 'setWeeks',
        'salary_addition' => 'setSalaryAddition',
        'salary_step' => 'setSalaryStep'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'company' => 'getCompany',
        'person' => 'getPerson',
        'employ_date' => 'getEmployDate',
        'unemploy_date' => 'getUnemployDate',
        'employment_category' => 'getEmploymentCategory',
        'occupation_title' => 'getOccupationTitle',
        'official_title' => 'getOfficialTitle',
        'contacts' => 'getContacts',
        'is_primary' => 'getIsPrimary',
        'added_by_web' => 'getAddedByWeb',
        'agreement' => 'getAgreement',
        'hours' => 'getHours',
        'weeks' => 'getWeeks',
        'salary_addition' => 'getSalaryAddition',
        'salary_step' => 'getSalaryStep'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['person'] = isset($data['person']) ? $data['person'] : null;
        $this->container['employ_date'] = isset($data['employ_date']) ? $data['employ_date'] : null;
        $this->container['unemploy_date'] = isset($data['unemploy_date']) ? $data['unemploy_date'] : null;
        $this->container['employment_category'] = isset($data['employment_category']) ? $data['employment_category'] : null;
        $this->container['occupation_title'] = isset($data['occupation_title']) ? $data['occupation_title'] : null;
        $this->container['official_title'] = isset($data['official_title']) ? $data['official_title'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['is_primary'] = isset($data['is_primary']) ? $data['is_primary'] : null;
        $this->container['added_by_web'] = isset($data['added_by_web']) ? $data['added_by_web'] : null;
        $this->container['agreement'] = isset($data['agreement']) ? $data['agreement'] : null;
        $this->container['hours'] = isset($data['hours']) ? $data['hours'] : null;
        $this->container['weeks'] = isset($data['weeks']) ? $data['weeks'] : null;
        $this->container['salary_addition'] = isset($data['salary_addition']) ? $data['salary_addition'] : null;
        $this->container['salary_step'] = isset($data['salary_step']) ? $data['salary_step'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The identification id of the employment.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \Membercare\Client\Model\Company
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Membercare\Client\Model\Company $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets person
     *
     * @return \Membercare\Client\Model\Person
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param \Membercare\Client\Model\Person $person person
     *
     * @return $this
     */
    public function setPerson($person)
    {
        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets employ_date
     *
     * @return \DateTime
     */
    public function getEmployDate()
    {
        return $this->container['employ_date'];
    }

    /**
     * Sets employ_date
     *
     * @param \DateTime $employ_date The start date of the employment.
     *
     * @return $this
     */
    public function setEmployDate($employ_date)
    {
        $this->container['employ_date'] = $employ_date;

        return $this;
    }

    /**
     * Gets unemploy_date
     *
     * @return \DateTime
     */
    public function getUnemployDate()
    {
        return $this->container['unemploy_date'];
    }

    /**
     * Sets unemploy_date
     *
     * @param \DateTime $unemploy_date The end of the employment.
     *
     * @return $this
     */
    public function setUnemployDate($unemploy_date)
    {
        $this->container['unemploy_date'] = $unemploy_date;

        return $this;
    }

    /**
     * Gets employment_category
     *
     * @return \Membercare\Client\Model\EmploymentCategory
     */
    public function getEmploymentCategory()
    {
        return $this->container['employment_category'];
    }

    /**
     * Sets employment_category
     *
     * @param \Membercare\Client\Model\EmploymentCategory $employment_category employment_category
     *
     * @return $this
     */
    public function setEmploymentCategory($employment_category)
    {
        $this->container['employment_category'] = $employment_category;

        return $this;
    }

    /**
     * Gets occupation_title
     *
     * @return \Membercare\Client\Model\OccupationTitle
     */
    public function getOccupationTitle()
    {
        return $this->container['occupation_title'];
    }

    /**
     * Sets occupation_title
     *
     * @param \Membercare\Client\Model\OccupationTitle $occupation_title occupation_title
     *
     * @return $this
     */
    public function setOccupationTitle($occupation_title)
    {
        $this->container['occupation_title'] = $occupation_title;

        return $this;
    }

    /**
     * Gets official_title
     *
     * @return string
     */
    public function getOfficialTitle()
    {
        return $this->container['official_title'];
    }

    /**
     * Sets official_title
     *
     * @param string $official_title OfficielTitle og the employment.
     *
     * @return $this
     */
    public function setOfficialTitle($official_title)
    {
        $this->container['official_title'] = $official_title;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \Membercare\Client\Model\Contact[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \Membercare\Client\Model\Contact[] $contacts Employment Contact information of the employee
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets is_primary
     *
     * @return bool
     */
    public function getIsPrimary()
    {
        return $this->container['is_primary'];
    }

    /**
     * Sets is_primary
     *
     * @param bool $is_primary Indicates if this employment is primary
     *
     * @return $this
     */
    public function setIsPrimary($is_primary)
    {
        $this->container['is_primary'] = $is_primary;

        return $this;
    }

    /**
     * Gets added_by_web
     *
     * @return bool
     */
    public function getAddedByWeb()
    {
        return $this->container['added_by_web'];
    }

    /**
     * Sets added_by_web
     *
     * @param bool $added_by_web Indicates if this employment was added from web.   Will probably phased out within a short period of time
     *
     * @return $this
     */
    public function setAddedByWeb($added_by_web)
    {
        $this->container['added_by_web'] = $added_by_web;

        return $this;
    }

    /**
     * Gets agreement
     *
     * @return \Membercare\Client\Model\Agreement
     */
    public function getAgreement()
    {
        return $this->container['agreement'];
    }

    /**
     * Sets agreement
     *
     * @param \Membercare\Client\Model\Agreement $agreement agreement
     *
     * @return $this
     */
    public function setAgreement($agreement)
    {
        $this->container['agreement'] = $agreement;

        return $this;
    }

    /**
     * Gets hours
     *
     * @return double
     */
    public function getHours()
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     *
     * @param double $hours Hours accoring to agreement
     *
     * @return $this
     */
    public function setHours($hours)
    {
        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets weeks
     *
     * @return int
     */
    public function getWeeks()
    {
        return $this->container['weeks'];
    }

    /**
     * Sets weeks
     *
     * @param int $weeks Weeks accoring to agreement
     *
     * @return $this
     */
    public function setWeeks($weeks)
    {
        $this->container['weeks'] = $weeks;

        return $this;
    }

    /**
     * Gets salary_addition
     *
     * @return string
     */
    public function getSalaryAddition()
    {
        return $this->container['salary_addition'];
    }

    /**
     * Sets salary_addition
     *
     * @param string $salary_addition SalaryAddition accoring to agreement
     *
     * @return $this
     */
    public function setSalaryAddition($salary_addition)
    {
        $this->container['salary_addition'] = $salary_addition;

        return $this;
    }

    /**
     * Gets salary_step
     *
     * @return string
     */
    public function getSalaryStep()
    {
        return $this->container['salary_step'];
    }

    /**
     * Sets salary_step
     *
     * @param string $salary_step SalaryStep accoring to agreement
     *
     * @return $this
     */
    public function setSalaryStep($salary_step)
    {
        $this->container['salary_step'] = $salary_step;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
