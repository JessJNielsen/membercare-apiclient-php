<?php
/**
 * FeeAmount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * FeeAmount Class Doc Comment
 *
 * @category Class
 * @description A FeeAmount object
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FeeAmount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FeeAmount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'amount' => 'double',
        'sequence' => 'int',
        'valid_from_year_period' => 'int',
        'valid_to_year_period' => 'int',
        'description' => 'string',
        'fee_amount_category' => '\Membercare\Client\Model\FeeAmountCategory',
        'registration_category' => '\Membercare\Client\Model\RegistrationCategory',
        'company' => '\Membercare\Client\Model\Company',
        'period' => '\Membercare\Client\Model\Period',
        'organization' => '\Membercare\Client\Model\SimpleOrganization',
        'reporter' => '\Membercare\Client\Model\Person',
        'reporter_comment' => 'string',
        'template' => 'bool',
        'voucher' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'amount' => 'double',
        'sequence' => 'int64',
        'valid_from_year_period' => 'int64',
        'valid_to_year_period' => 'int64',
        'description' => null,
        'fee_amount_category' => null,
        'registration_category' => null,
        'company' => null,
        'period' => null,
        'organization' => null,
        'reporter' => null,
        'reporter_comment' => null,
        'template' => null,
        'voucher' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'amount' => 'amount',
        'sequence' => 'sequence',
        'valid_from_year_period' => 'validFromYearPeriod',
        'valid_to_year_period' => 'validToYearPeriod',
        'description' => 'description',
        'fee_amount_category' => 'feeAmountCategory',
        'registration_category' => 'registrationCategory',
        'company' => 'company',
        'period' => 'period',
        'organization' => 'organization',
        'reporter' => 'reporter',
        'reporter_comment' => 'reporterComment',
        'template' => 'template',
        'voucher' => 'voucher'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'amount' => 'setAmount',
        'sequence' => 'setSequence',
        'valid_from_year_period' => 'setValidFromYearPeriod',
        'valid_to_year_period' => 'setValidToYearPeriod',
        'description' => 'setDescription',
        'fee_amount_category' => 'setFeeAmountCategory',
        'registration_category' => 'setRegistrationCategory',
        'company' => 'setCompany',
        'period' => 'setPeriod',
        'organization' => 'setOrganization',
        'reporter' => 'setReporter',
        'reporter_comment' => 'setReporterComment',
        'template' => 'setTemplate',
        'voucher' => 'setVoucher'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'amount' => 'getAmount',
        'sequence' => 'getSequence',
        'valid_from_year_period' => 'getValidFromYearPeriod',
        'valid_to_year_period' => 'getValidToYearPeriod',
        'description' => 'getDescription',
        'fee_amount_category' => 'getFeeAmountCategory',
        'registration_category' => 'getRegistrationCategory',
        'company' => 'getCompany',
        'period' => 'getPeriod',
        'organization' => 'getOrganization',
        'reporter' => 'getReporter',
        'reporter_comment' => 'getReporterComment',
        'template' => 'getTemplate',
        'voucher' => 'getVoucher'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['sequence'] = isset($data['sequence']) ? $data['sequence'] : null;
        $this->container['valid_from_year_period'] = isset($data['valid_from_year_period']) ? $data['valid_from_year_period'] : null;
        $this->container['valid_to_year_period'] = isset($data['valid_to_year_period']) ? $data['valid_to_year_period'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['fee_amount_category'] = isset($data['fee_amount_category']) ? $data['fee_amount_category'] : null;
        $this->container['registration_category'] = isset($data['registration_category']) ? $data['registration_category'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['reporter'] = isset($data['reporter']) ? $data['reporter'] : null;
        $this->container['reporter_comment'] = isset($data['reporter_comment']) ? $data['reporter_comment'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['voucher'] = isset($data['voucher']) ? $data['voucher'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The identification id of the period.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount The actual amount.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets sequence
     *
     * @return int
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param int $sequence The sequence of the FeeAmount.
     *
     * @return $this
     */
    public function setSequence($sequence)
    {
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets valid_from_year_period
     *
     * @return int
     */
    public function getValidFromYearPeriod()
    {
        return $this->container['valid_from_year_period'];
    }

    /**
     * Sets valid_from_year_period
     *
     * @param int $valid_from_year_period The year period from where this FeeAmount is valid.
     *
     * @return $this
     */
    public function setValidFromYearPeriod($valid_from_year_period)
    {
        $this->container['valid_from_year_period'] = $valid_from_year_period;

        return $this;
    }

    /**
     * Gets valid_to_year_period
     *
     * @return int
     */
    public function getValidToYearPeriod()
    {
        return $this->container['valid_to_year_period'];
    }

    /**
     * Sets valid_to_year_period
     *
     * @param int $valid_to_year_period The year period where this FeeAmount is valid to.
     *
     * @return $this
     */
    public function setValidToYearPeriod($valid_to_year_period)
    {
        $this->container['valid_to_year_period'] = $valid_to_year_period;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the FeeAmount
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets fee_amount_category
     *
     * @return \Membercare\Client\Model\FeeAmountCategory
     */
    public function getFeeAmountCategory()
    {
        return $this->container['fee_amount_category'];
    }

    /**
     * Sets fee_amount_category
     *
     * @param \Membercare\Client\Model\FeeAmountCategory $fee_amount_category fee_amount_category
     *
     * @return $this
     */
    public function setFeeAmountCategory($fee_amount_category)
    {
        $this->container['fee_amount_category'] = $fee_amount_category;

        return $this;
    }

    /**
     * Gets registration_category
     *
     * @return \Membercare\Client\Model\RegistrationCategory
     */
    public function getRegistrationCategory()
    {
        return $this->container['registration_category'];
    }

    /**
     * Sets registration_category
     *
     * @param \Membercare\Client\Model\RegistrationCategory $registration_category registration_category
     *
     * @return $this
     */
    public function setRegistrationCategory($registration_category)
    {
        $this->container['registration_category'] = $registration_category;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \Membercare\Client\Model\Company
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Membercare\Client\Model\Company $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets period
     *
     * @return \Membercare\Client\Model\Period
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param \Membercare\Client\Model\Period $period period
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \Membercare\Client\Model\SimpleOrganization
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \Membercare\Client\Model\SimpleOrganization $organization organization
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets reporter
     *
     * @return \Membercare\Client\Model\Person
     */
    public function getReporter()
    {
        return $this->container['reporter'];
    }

    /**
     * Sets reporter
     *
     * @param \Membercare\Client\Model\Person $reporter reporter
     *
     * @return $this
     */
    public function setReporter($reporter)
    {
        $this->container['reporter'] = $reporter;

        return $this;
    }

    /**
     * Gets reporter_comment
     *
     * @return string
     */
    public function getReporterComment()
    {
        return $this->container['reporter_comment'];
    }

    /**
     * Sets reporter_comment
     *
     * @param string $reporter_comment Reporter comment / description.   Feel free to use this for anything.
     *
     * @return $this
     */
    public function setReporterComment($reporter_comment)
    {
        $this->container['reporter_comment'] = $reporter_comment;

        return $this;
    }

    /**
     * Gets template
     *
     * @return bool
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param bool $template Indicates whether or not this fee amount is a template.
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets voucher
     *
     * @return string
     */
    public function getVoucher()
    {
        return $this->container['voucher'];
    }

    /**
     * Sets voucher
     *
     * @param string $voucher Voucher on the fee amount
     *
     * @return $this
     */
    public function setVoucher($voucher)
    {
        $this->container['voucher'] = $voucher;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
