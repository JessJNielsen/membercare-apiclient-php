<?php
/**
 * MembershipCategory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * MembershipCategory Class Doc Comment
 *
 * @category Class
 * @description Representation af a type of Membership
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MembershipCategory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MembershipCategory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'description' => 'string',
        'primary_membership' => 'bool',
        'valid' => 'bool',
        'web_enabled' => 'bool',
        'context' => '\Membercare\Client\Model\UnitTypeContextFlag',
        'membership_category_group' => '\Membercare\Client\Model\MembershipCategoryGroup',
        'organization' => '\Membercare\Client\Model\SimpleOrganization',
        'subscription_definitions' => '\Membercare\Client\Model\SubscriptionDefinition[]',
        'mandatory_subscription_definitions' => '\Membercare\Client\Model\SubscriptionDefinition[]',
        'parent_membership_categories' => '\Membercare\Client\Model\MembershipCategory[]',
        'child_membership_categories' => '\Membercare\Client\Model\MembershipCategory[]',
        'tags' => 'string[]',
        'validation_rule' => '\Membercare\Client\Model\MembershipCategoryValidationRule'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'description' => null,
        'primary_membership' => null,
        'valid' => null,
        'web_enabled' => null,
        'context' => null,
        'membership_category_group' => null,
        'organization' => null,
        'subscription_definitions' => null,
        'mandatory_subscription_definitions' => null,
        'parent_membership_categories' => null,
        'child_membership_categories' => null,
        'tags' => null,
        'validation_rule' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'description' => 'description',
        'primary_membership' => 'primaryMembership',
        'valid' => 'valid',
        'web_enabled' => 'webEnabled',
        'context' => 'context',
        'membership_category_group' => 'membershipCategoryGroup',
        'organization' => 'organization',
        'subscription_definitions' => 'subscriptionDefinitions',
        'mandatory_subscription_definitions' => 'mandatorySubscriptionDefinitions',
        'parent_membership_categories' => 'parentMembershipCategories',
        'child_membership_categories' => 'childMembershipCategories',
        'tags' => 'tags',
        'validation_rule' => 'validationRule'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'description' => 'setDescription',
        'primary_membership' => 'setPrimaryMembership',
        'valid' => 'setValid',
        'web_enabled' => 'setWebEnabled',
        'context' => 'setContext',
        'membership_category_group' => 'setMembershipCategoryGroup',
        'organization' => 'setOrganization',
        'subscription_definitions' => 'setSubscriptionDefinitions',
        'mandatory_subscription_definitions' => 'setMandatorySubscriptionDefinitions',
        'parent_membership_categories' => 'setParentMembershipCategories',
        'child_membership_categories' => 'setChildMembershipCategories',
        'tags' => 'setTags',
        'validation_rule' => 'setValidationRule'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'description' => 'getDescription',
        'primary_membership' => 'getPrimaryMembership',
        'valid' => 'getValid',
        'web_enabled' => 'getWebEnabled',
        'context' => 'getContext',
        'membership_category_group' => 'getMembershipCategoryGroup',
        'organization' => 'getOrganization',
        'subscription_definitions' => 'getSubscriptionDefinitions',
        'mandatory_subscription_definitions' => 'getMandatorySubscriptionDefinitions',
        'parent_membership_categories' => 'getParentMembershipCategories',
        'child_membership_categories' => 'getChildMembershipCategories',
        'tags' => 'getTags',
        'validation_rule' => 'getValidationRule'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['primary_membership'] = isset($data['primary_membership']) ? $data['primary_membership'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['web_enabled'] = isset($data['web_enabled']) ? $data['web_enabled'] : null;
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['membership_category_group'] = isset($data['membership_category_group']) ? $data['membership_category_group'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['subscription_definitions'] = isset($data['subscription_definitions']) ? $data['subscription_definitions'] : null;
        $this->container['mandatory_subscription_definitions'] = isset($data['mandatory_subscription_definitions']) ? $data['mandatory_subscription_definitions'] : null;
        $this->container['parent_membership_categories'] = isset($data['parent_membership_categories']) ? $data['parent_membership_categories'] : null;
        $this->container['child_membership_categories'] = isset($data['child_membership_categories']) ? $data['child_membership_categories'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['validation_rule'] = isset($data['validation_rule']) ? $data['validation_rule'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The id of the membership category.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the membership category
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets primary_membership
     *
     * @return bool
     */
    public function getPrimaryMembership()
    {
        return $this->container['primary_membership'];
    }

    /**
     * Sets primary_membership
     *
     * @param bool $primary_membership Indicates wether or not the membership category is primary.
     *
     * @return $this
     */
    public function setPrimaryMembership($primary_membership)
    {
        $this->container['primary_membership'] = $primary_membership;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool $valid Indicates wether or not the membership category is valid.  If false, the membership category cannot be used for creating new membership.
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets web_enabled
     *
     * @return bool
     */
    public function getWebEnabled()
    {
        return $this->container['web_enabled'];
    }

    /**
     * Sets web_enabled
     *
     * @param bool $web_enabled Indicates wether or not this membership category should be shown on web.
     *
     * @return $this
     */
    public function setWebEnabled($web_enabled)
    {
        $this->container['web_enabled'] = $web_enabled;

        return $this;
    }

    /**
     * Gets context
     *
     * @return \Membercare\Client\Model\UnitTypeContextFlag
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param \Membercare\Client\Model\UnitTypeContextFlag $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets membership_category_group
     *
     * @return \Membercare\Client\Model\MembershipCategoryGroup
     */
    public function getMembershipCategoryGroup()
    {
        return $this->container['membership_category_group'];
    }

    /**
     * Sets membership_category_group
     *
     * @param \Membercare\Client\Model\MembershipCategoryGroup $membership_category_group membership_category_group
     *
     * @return $this
     */
    public function setMembershipCategoryGroup($membership_category_group)
    {
        $this->container['membership_category_group'] = $membership_category_group;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \Membercare\Client\Model\SimpleOrganization
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \Membercare\Client\Model\SimpleOrganization $organization organization
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets subscription_definitions
     *
     * @return \Membercare\Client\Model\SubscriptionDefinition[]
     */
    public function getSubscriptionDefinitions()
    {
        return $this->container['subscription_definitions'];
    }

    /**
     * Sets subscription_definitions
     *
     * @param \Membercare\Client\Model\SubscriptionDefinition[] $subscription_definitions subscription_definitions
     *
     * @return $this
     */
    public function setSubscriptionDefinitions($subscription_definitions)
    {
        $this->container['subscription_definitions'] = $subscription_definitions;

        return $this;
    }

    /**
     * Gets mandatory_subscription_definitions
     *
     * @return \Membercare\Client\Model\SubscriptionDefinition[]
     */
    public function getMandatorySubscriptionDefinitions()
    {
        return $this->container['mandatory_subscription_definitions'];
    }

    /**
     * Sets mandatory_subscription_definitions
     *
     * @param \Membercare\Client\Model\SubscriptionDefinition[] $mandatory_subscription_definitions mandatory_subscription_definitions
     *
     * @return $this
     */
    public function setMandatorySubscriptionDefinitions($mandatory_subscription_definitions)
    {
        $this->container['mandatory_subscription_definitions'] = $mandatory_subscription_definitions;

        return $this;
    }

    /**
     * Gets parent_membership_categories
     *
     * @return \Membercare\Client\Model\MembershipCategory[]
     */
    public function getParentMembershipCategories()
    {
        return $this->container['parent_membership_categories'];
    }

    /**
     * Sets parent_membership_categories
     *
     * @param \Membercare\Client\Model\MembershipCategory[] $parent_membership_categories A list of parent membership categories
     *
     * @return $this
     */
    public function setParentMembershipCategories($parent_membership_categories)
    {
        $this->container['parent_membership_categories'] = $parent_membership_categories;

        return $this;
    }

    /**
     * Gets child_membership_categories
     *
     * @return \Membercare\Client\Model\MembershipCategory[]
     */
    public function getChildMembershipCategories()
    {
        return $this->container['child_membership_categories'];
    }

    /**
     * Sets child_membership_categories
     *
     * @param \Membercare\Client\Model\MembershipCategory[] $child_membership_categories A list of child membership categories
     *
     * @return $this
     */
    public function setChildMembershipCategories($child_membership_categories)
    {
        $this->container['child_membership_categories'] = $child_membership_categories;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags A list of tag names
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets validation_rule
     *
     * @return \Membercare\Client\Model\MembershipCategoryValidationRule
     */
    public function getValidationRule()
    {
        return $this->container['validation_rule'];
    }

    /**
     * Sets validation_rule
     *
     * @param \Membercare\Client\Model\MembershipCategoryValidationRule $validation_rule validation_rule
     *
     * @return $this
     */
    public function setValidationRule($validation_rule)
    {
        $this->container['validation_rule'] = $validation_rule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
