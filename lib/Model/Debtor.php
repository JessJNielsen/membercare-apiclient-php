<?php
/**
 * Debtor
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * Debtor Class Doc Comment
 *
 * @category Class
 * @description Represents a person or a company
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Debtor implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Debtor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'debtor_account_number' => 'string',
        'name' => 'string',
        'contacts' => '\Membercare\Client\Model\Contact[]',
        'addresses' => '\Membercare\Client\Model\PostalAddress[]',
        'custom_field_values' => '\Membercare\Client\Model\CustomFieldValue[]',
        'invoices_link' => 'string',
        'member_type' => '\Membercare\Client\Model\UnitType',
        'default_payer_link' => 'string',
        'dafualt_payer_rule' => '\Membercare\Client\Model\PayerRule',
        'close_date' => '\DateTime',
        'einvoice_ean' => 'string',
        'einvoice_email' => 'string',
        'close_reason' => '\Membercare\Client\Model\CloseReason',
        'default_address_type' => '\Membercare\Client\Model\AddressRule',
        'external_id' => 'string',
        'last_change' => '\DateTime',
        'finance_type' => '\Membercare\Client\Model\FinanceType',
        'ean' => 'string',
        'email_for_invoices' => 'string',
        'business_numbers' => '\Membercare\Client\Model\BusinessNumbers',
        'invoice_distribution_preference' => '\Membercare\Client\Model\InvoiceDistributionPreference',
        'social_security_number' => '\Membercare\Client\Model\SocialSecurityNumber',
        'anonymized_on' => '\DateTime',
        'honorific' => 'string',
        'name1' => 'string',
        'name2' => 'string',
        'memberships' => '\Membercare\Client\Model\Membership[]',
        'send_invoices_to' => '\Membercare\Client\Model\Debtor',
        'send_mail_to' => '\Membercare\Client\Model\Debtor'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'debtor_account_number' => null,
        'name' => null,
        'contacts' => null,
        'addresses' => null,
        'custom_field_values' => null,
        'invoices_link' => null,
        'member_type' => null,
        'default_payer_link' => null,
        'dafualt_payer_rule' => null,
        'close_date' => 'date-time',
        'einvoice_ean' => null,
        'einvoice_email' => null,
        'close_reason' => null,
        'default_address_type' => null,
        'external_id' => null,
        'last_change' => 'date-time',
        'finance_type' => null,
        'ean' => null,
        'email_for_invoices' => null,
        'business_numbers' => null,
        'invoice_distribution_preference' => null,
        'social_security_number' => null,
        'anonymized_on' => 'date-time',
        'honorific' => null,
        'name1' => null,
        'name2' => null,
        'memberships' => null,
        'send_invoices_to' => null,
        'send_mail_to' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'debtor_account_number' => 'debtorAccountNumber',
        'name' => 'name',
        'contacts' => 'contacts',
        'addresses' => 'addresses',
        'custom_field_values' => 'customFieldValues',
        'invoices_link' => 'invoicesLink',
        'member_type' => 'memberType',
        'default_payer_link' => 'defaultPayerLink',
        'dafualt_payer_rule' => 'dafualtPayerRule',
        'close_date' => 'closeDate',
        'einvoice_ean' => 'einvoiceEan',
        'einvoice_email' => 'einvoiceEmail',
        'close_reason' => 'closeReason',
        'default_address_type' => 'defaultAddressType',
        'external_id' => 'externalId',
        'last_change' => 'lastChange',
        'finance_type' => 'financeType',
        'ean' => 'ean',
        'email_for_invoices' => 'emailForInvoices',
        'business_numbers' => 'businessNumbers',
        'invoice_distribution_preference' => 'invoiceDistributionPreference',
        'social_security_number' => 'socialSecurityNumber',
        'anonymized_on' => 'anonymizedOn',
        'honorific' => 'honorific',
        'name1' => 'name1',
        'name2' => 'name2',
        'memberships' => 'memberships',
        'send_invoices_to' => 'sendInvoicesTo',
        'send_mail_to' => 'sendMailTo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'debtor_account_number' => 'setDebtorAccountNumber',
        'name' => 'setName',
        'contacts' => 'setContacts',
        'addresses' => 'setAddresses',
        'custom_field_values' => 'setCustomFieldValues',
        'invoices_link' => 'setInvoicesLink',
        'member_type' => 'setMemberType',
        'default_payer_link' => 'setDefaultPayerLink',
        'dafualt_payer_rule' => 'setDafualtPayerRule',
        'close_date' => 'setCloseDate',
        'einvoice_ean' => 'setEinvoiceEan',
        'einvoice_email' => 'setEinvoiceEmail',
        'close_reason' => 'setCloseReason',
        'default_address_type' => 'setDefaultAddressType',
        'external_id' => 'setExternalId',
        'last_change' => 'setLastChange',
        'finance_type' => 'setFinanceType',
        'ean' => 'setEan',
        'email_for_invoices' => 'setEmailForInvoices',
        'business_numbers' => 'setBusinessNumbers',
        'invoice_distribution_preference' => 'setInvoiceDistributionPreference',
        'social_security_number' => 'setSocialSecurityNumber',
        'anonymized_on' => 'setAnonymizedOn',
        'honorific' => 'setHonorific',
        'name1' => 'setName1',
        'name2' => 'setName2',
        'memberships' => 'setMemberships',
        'send_invoices_to' => 'setSendInvoicesTo',
        'send_mail_to' => 'setSendMailTo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'debtor_account_number' => 'getDebtorAccountNumber',
        'name' => 'getName',
        'contacts' => 'getContacts',
        'addresses' => 'getAddresses',
        'custom_field_values' => 'getCustomFieldValues',
        'invoices_link' => 'getInvoicesLink',
        'member_type' => 'getMemberType',
        'default_payer_link' => 'getDefaultPayerLink',
        'dafualt_payer_rule' => 'getDafualtPayerRule',
        'close_date' => 'getCloseDate',
        'einvoice_ean' => 'getEinvoiceEan',
        'einvoice_email' => 'getEinvoiceEmail',
        'close_reason' => 'getCloseReason',
        'default_address_type' => 'getDefaultAddressType',
        'external_id' => 'getExternalId',
        'last_change' => 'getLastChange',
        'finance_type' => 'getFinanceType',
        'ean' => 'getEan',
        'email_for_invoices' => 'getEmailForInvoices',
        'business_numbers' => 'getBusinessNumbers',
        'invoice_distribution_preference' => 'getInvoiceDistributionPreference',
        'social_security_number' => 'getSocialSecurityNumber',
        'anonymized_on' => 'getAnonymizedOn',
        'honorific' => 'getHonorific',
        'name1' => 'getName1',
        'name2' => 'getName2',
        'memberships' => 'getMemberships',
        'send_invoices_to' => 'getSendInvoicesTo',
        'send_mail_to' => 'getSendMailTo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['debtor_account_number'] = isset($data['debtor_account_number']) ? $data['debtor_account_number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['custom_field_values'] = isset($data['custom_field_values']) ? $data['custom_field_values'] : null;
        $this->container['invoices_link'] = isset($data['invoices_link']) ? $data['invoices_link'] : null;
        $this->container['member_type'] = isset($data['member_type']) ? $data['member_type'] : null;
        $this->container['default_payer_link'] = isset($data['default_payer_link']) ? $data['default_payer_link'] : null;
        $this->container['dafualt_payer_rule'] = isset($data['dafualt_payer_rule']) ? $data['dafualt_payer_rule'] : null;
        $this->container['close_date'] = isset($data['close_date']) ? $data['close_date'] : null;
        $this->container['einvoice_ean'] = isset($data['einvoice_ean']) ? $data['einvoice_ean'] : null;
        $this->container['einvoice_email'] = isset($data['einvoice_email']) ? $data['einvoice_email'] : null;
        $this->container['close_reason'] = isset($data['close_reason']) ? $data['close_reason'] : null;
        $this->container['default_address_type'] = isset($data['default_address_type']) ? $data['default_address_type'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['last_change'] = isset($data['last_change']) ? $data['last_change'] : null;
        $this->container['finance_type'] = isset($data['finance_type']) ? $data['finance_type'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['email_for_invoices'] = isset($data['email_for_invoices']) ? $data['email_for_invoices'] : null;
        $this->container['business_numbers'] = isset($data['business_numbers']) ? $data['business_numbers'] : null;
        $this->container['invoice_distribution_preference'] = isset($data['invoice_distribution_preference']) ? $data['invoice_distribution_preference'] : null;
        $this->container['social_security_number'] = isset($data['social_security_number']) ? $data['social_security_number'] : null;
        $this->container['anonymized_on'] = isset($data['anonymized_on']) ? $data['anonymized_on'] : null;
        $this->container['honorific'] = isset($data['honorific']) ? $data['honorific'] : null;
        $this->container['name1'] = isset($data['name1']) ? $data['name1'] : null;
        $this->container['name2'] = isset($data['name2']) ? $data['name2'] : null;
        $this->container['memberships'] = isset($data['memberships']) ? $data['memberships'] : null;
        $this->container['send_invoices_to'] = isset($data['send_invoices_to']) ? $data['send_invoices_to'] : null;
        $this->container['send_mail_to'] = isset($data['send_mail_to']) ? $data['send_mail_to'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets debtor_account_number
     *
     * @return string
     */
    public function getDebtorAccountNumber()
    {
        return $this->container['debtor_account_number'];
    }

    /**
     * Sets debtor_account_number
     *
     * @param string $debtor_account_number The identifying number
     *
     * @return $this
     */
    public function setDebtorAccountNumber($debtor_account_number)
    {
        $this->container['debtor_account_number'] = $debtor_account_number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The full name of the member
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \Membercare\Client\Model\Contact[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \Membercare\Client\Model\Contact[] $contacts List of contact informations of the member
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Membercare\Client\Model\PostalAddress[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Membercare\Client\Model\PostalAddress[] $addresses List of address information of the member (primary and secundary addresses only)
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets custom_field_values
     *
     * @return \Membercare\Client\Model\CustomFieldValue[]
     */
    public function getCustomFieldValues()
    {
        return $this->container['custom_field_values'];
    }

    /**
     * Sets custom_field_values
     *
     * @param \Membercare\Client\Model\CustomFieldValue[] $custom_field_values The members CustomFieldValues
     *
     * @return $this
     */
    public function setCustomFieldValues($custom_field_values)
    {
        $this->container['custom_field_values'] = $custom_field_values;

        return $this;
    }

    /**
     * Gets invoices_link
     *
     * @return string
     */
    public function getInvoicesLink()
    {
        return $this->container['invoices_link'];
    }

    /**
     * Sets invoices_link
     *
     * @param string $invoices_link Url to the collection of the member Invoices
     *
     * @return $this
     */
    public function setInvoicesLink($invoices_link)
    {
        $this->container['invoices_link'] = $invoices_link;

        return $this;
    }

    /**
     * Gets member_type
     *
     * @return \Membercare\Client\Model\UnitType
     */
    public function getMemberType()
    {
        return $this->container['member_type'];
    }

    /**
     * Sets member_type
     *
     * @param \Membercare\Client\Model\UnitType $member_type member_type
     *
     * @return $this
     */
    public function setMemberType($member_type)
    {
        $this->container['member_type'] = $member_type;

        return $this;
    }

    /**
     * Gets default_payer_link
     *
     * @return string
     */
    public function getDefaultPayerLink()
    {
        return $this->container['default_payer_link'];
    }

    /**
     * Sets default_payer_link
     *
     * @param string $default_payer_link Link to the default payer for the member.
     *
     * @return $this
     */
    public function setDefaultPayerLink($default_payer_link)
    {
        $this->container['default_payer_link'] = $default_payer_link;

        return $this;
    }

    /**
     * Gets dafualt_payer_rule
     *
     * @return \Membercare\Client\Model\PayerRule
     */
    public function getDafualtPayerRule()
    {
        return $this->container['dafualt_payer_rule'];
    }

    /**
     * Sets dafualt_payer_rule
     *
     * @param \Membercare\Client\Model\PayerRule $dafualt_payer_rule dafualt_payer_rule
     *
     * @return $this
     */
    public function setDafualtPayerRule($dafualt_payer_rule)
    {
        $this->container['dafualt_payer_rule'] = $dafualt_payer_rule;

        return $this;
    }

    /**
     * Gets close_date
     *
     * @return \DateTime
     */
    public function getCloseDate()
    {
        return $this->container['close_date'];
    }

    /**
     * Sets close_date
     *
     * @param \DateTime $close_date The day the unit was closed.  Value is ignored when creating or updating!
     *
     * @return $this
     */
    public function setCloseDate($close_date)
    {
        $this->container['close_date'] = $close_date;

        return $this;
    }

    /**
     * Gets einvoice_ean
     *
     * @return string
     */
    public function getEinvoiceEan()
    {
        return $this->container['einvoice_ean'];
    }

    /**
     * Sets einvoice_ean
     *
     * @param string $einvoice_ean Ean for electronic invoicing
     *
     * @return $this
     */
    public function setEinvoiceEan($einvoice_ean)
    {
        $this->container['einvoice_ean'] = $einvoice_ean;

        return $this;
    }

    /**
     * Gets einvoice_email
     *
     * @return string
     */
    public function getEinvoiceEmail()
    {
        return $this->container['einvoice_email'];
    }

    /**
     * Sets einvoice_email
     *
     * @param string $einvoice_email Email for electronic invoicing
     *
     * @return $this
     */
    public function setEinvoiceEmail($einvoice_email)
    {
        $this->container['einvoice_email'] = $einvoice_email;

        return $this;
    }

    /**
     * Gets close_reason
     *
     * @return \Membercare\Client\Model\CloseReason
     */
    public function getCloseReason()
    {
        return $this->container['close_reason'];
    }

    /**
     * Sets close_reason
     *
     * @param \Membercare\Client\Model\CloseReason $close_reason close_reason
     *
     * @return $this
     */
    public function setCloseReason($close_reason)
    {
        $this->container['close_reason'] = $close_reason;

        return $this;
    }

    /**
     * Gets default_address_type
     *
     * @return \Membercare\Client\Model\AddressRule
     */
    public function getDefaultAddressType()
    {
        return $this->container['default_address_type'];
    }

    /**
     * Sets default_address_type
     *
     * @param \Membercare\Client\Model\AddressRule $default_address_type default_address_type
     *
     * @return $this
     */
    public function setDefaultAddressType($default_address_type)
    {
        $this->container['default_address_type'] = $default_address_type;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id Id that comes from an external source to identify a member that exists both in Membercare and in another system
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets last_change
     *
     * @return \DateTime
     */
    public function getLastChange()
    {
        return $this->container['last_change'];
    }

    /**
     * Sets last_change
     *
     * @param \DateTime $last_change When was the base entity last changed
     *
     * @return $this
     */
    public function setLastChange($last_change)
    {
        $this->container['last_change'] = $last_change;

        return $this;
    }

    /**
     * Gets finance_type
     *
     * @return \Membercare\Client\Model\FinanceType
     */
    public function getFinanceType()
    {
        return $this->container['finance_type'];
    }

    /**
     * Sets finance_type
     *
     * @param \Membercare\Client\Model\FinanceType $finance_type finance_type
     *
     * @return $this
     */
    public function setFinanceType($finance_type)
    {
        $this->container['finance_type'] = $finance_type;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean The general EAN number for electronic invoices to this debtor
     *
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets email_for_invoices
     *
     * @return string
     */
    public function getEmailForInvoices()
    {
        return $this->container['email_for_invoices'];
    }

    /**
     * Sets email_for_invoices
     *
     * @param string $email_for_invoices The general Email to use when sending an invoice  Might be overridden at invoice level
     *
     * @return $this
     */
    public function setEmailForInvoices($email_for_invoices)
    {
        $this->container['email_for_invoices'] = $email_for_invoices;

        return $this;
    }

    /**
     * Gets business_numbers
     *
     * @return \Membercare\Client\Model\BusinessNumbers
     */
    public function getBusinessNumbers()
    {
        return $this->container['business_numbers'];
    }

    /**
     * Sets business_numbers
     *
     * @param \Membercare\Client\Model\BusinessNumbers $business_numbers business_numbers
     *
     * @return $this
     */
    public function setBusinessNumbers($business_numbers)
    {
        $this->container['business_numbers'] = $business_numbers;

        return $this;
    }

    /**
     * Gets invoice_distribution_preference
     *
     * @return \Membercare\Client\Model\InvoiceDistributionPreference
     */
    public function getInvoiceDistributionPreference()
    {
        return $this->container['invoice_distribution_preference'];
    }

    /**
     * Sets invoice_distribution_preference
     *
     * @param \Membercare\Client\Model\InvoiceDistributionPreference $invoice_distribution_preference invoice_distribution_preference
     *
     * @return $this
     */
    public function setInvoiceDistributionPreference($invoice_distribution_preference)
    {
        $this->container['invoice_distribution_preference'] = $invoice_distribution_preference;

        return $this;
    }

    /**
     * Gets social_security_number
     *
     * @return \Membercare\Client\Model\SocialSecurityNumber
     */
    public function getSocialSecurityNumber()
    {
        return $this->container['social_security_number'];
    }

    /**
     * Sets social_security_number
     *
     * @param \Membercare\Client\Model\SocialSecurityNumber $social_security_number social_security_number
     *
     * @return $this
     */
    public function setSocialSecurityNumber($social_security_number)
    {
        $this->container['social_security_number'] = $social_security_number;

        return $this;
    }

    /**
     * Gets anonymized_on
     *
     * @return \DateTime
     */
    public function getAnonymizedOn()
    {
        return $this->container['anonymized_on'];
    }

    /**
     * Sets anonymized_on
     *
     * @param \DateTime $anonymized_on If the debtor is a person - The date when the person was anonymized
     *
     * @return $this
     */
    public function setAnonymizedOn($anonymized_on)
    {
        $this->container['anonymized_on'] = $anonymized_on;

        return $this;
    }

    /**
     * Gets honorific
     *
     * @return string
     */
    public function getHonorific()
    {
        return $this->container['honorific'];
    }

    /**
     * Sets honorific
     *
     * @param string $honorific If the debtor is a person - The persons title
     *
     * @return $this
     */
    public function setHonorific($honorific)
    {
        $this->container['honorific'] = $honorific;

        return $this;
    }

    /**
     * Gets name1
     *
     * @return string
     */
    public function getName1()
    {
        return $this->container['name1'];
    }

    /**
     * Sets name1
     *
     * @param string $name1 The name part 1
     *
     * @return $this
     */
    public function setName1($name1)
    {
        $this->container['name1'] = $name1;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string
     */
    public function getName2()
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string $name2 The name part 2
     *
     * @return $this
     */
    public function setName2($name2)
    {
        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets memberships
     *
     * @return \Membercare\Client\Model\Membership[]
     */
    public function getMemberships()
    {
        return $this->container['memberships'];
    }

    /**
     * Sets memberships
     *
     * @param \Membercare\Client\Model\Membership[] $memberships Returns the valid memberships as of today
     *
     * @return $this
     */
    public function setMemberships($memberships)
    {
        $this->container['memberships'] = $memberships;

        return $this;
    }

    /**
     * Gets send_invoices_to
     *
     * @return \Membercare\Client\Model\Debtor
     */
    public function getSendInvoicesTo()
    {
        return $this->container['send_invoices_to'];
    }

    /**
     * Sets send_invoices_to
     *
     * @param \Membercare\Client\Model\Debtor $send_invoices_to send_invoices_to
     *
     * @return $this
     */
    public function setSendInvoicesTo($send_invoices_to)
    {
        $this->container['send_invoices_to'] = $send_invoices_to;

        return $this;
    }

    /**
     * Gets send_mail_to
     *
     * @return \Membercare\Client\Model\Debtor
     */
    public function getSendMailTo()
    {
        return $this->container['send_mail_to'];
    }

    /**
     * Sets send_mail_to
     *
     * @param \Membercare\Client\Model\Debtor $send_mail_to send_mail_to
     *
     * @return $this
     */
    public function setSendMailTo($send_mail_to)
    {
        $this->container['send_mail_to'] = $send_mail_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
