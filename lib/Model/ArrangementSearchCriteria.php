<?php
/**
 * ArrangementSearchCriteria
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * ArrangementSearchCriteria Class Doc Comment
 *
 * @category Class
 * @description The representation of an Arrangement Search Criteria
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArrangementSearchCriteria implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArrangementSearchCriteria';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'starts_after' => '\DateTime',
        'ends_before' => '\DateTime',
        'name' => 'string',
        'categories' => '\Membercare\Client\Model\ArrangementCategory[]',
        'sub_categories' => '\Membercare\Client\Model\ArrangementSubCategory[]',
        'sections' => '\Membercare\Client\Model\ArrangementGroup[]',
        'areas' => '\Membercare\Client\Model\ArrangementArea[]',
        'include_non_enrollable' => 'bool',
        'include_cancelled' => 'bool',
        'only_web_enabled' => 'bool',
        'for_invitees_only' => 'bool',
        'attendance_registration_enabled' => 'bool',
        'attendance_registration_completed' => 'bool',
        'custom_field_values' => '\Membercare\Client\Model\CustomFieldValueSearch[]',
        'custom_field_values_match' => '\Membercare\Client\Model\SearchBooleanType',
        'organizations' => '\Membercare\Client\Model\SimpleOrganization[]',
        'include_recurring_course_recurrences' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'starts_after' => 'date-time',
        'ends_before' => 'date-time',
        'name' => null,
        'categories' => null,
        'sub_categories' => null,
        'sections' => null,
        'areas' => null,
        'include_non_enrollable' => null,
        'include_cancelled' => null,
        'only_web_enabled' => null,
        'for_invitees_only' => null,
        'attendance_registration_enabled' => null,
        'attendance_registration_completed' => null,
        'custom_field_values' => null,
        'custom_field_values_match' => null,
        'organizations' => null,
        'include_recurring_course_recurrences' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'starts_after' => 'startsAfter',
        'ends_before' => 'endsBefore',
        'name' => 'name',
        'categories' => 'categories',
        'sub_categories' => 'subCategories',
        'sections' => 'sections',
        'areas' => 'areas',
        'include_non_enrollable' => 'includeNonEnrollable',
        'include_cancelled' => 'includeCancelled',
        'only_web_enabled' => 'onlyWebEnabled',
        'for_invitees_only' => 'forInviteesOnly',
        'attendance_registration_enabled' => 'attendanceRegistrationEnabled',
        'attendance_registration_completed' => 'attendanceRegistrationCompleted',
        'custom_field_values' => 'customFieldValues',
        'custom_field_values_match' => 'customFieldValuesMatch',
        'organizations' => 'organizations',
        'include_recurring_course_recurrences' => 'includeRecurringCourseRecurrences'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'starts_after' => 'setStartsAfter',
        'ends_before' => 'setEndsBefore',
        'name' => 'setName',
        'categories' => 'setCategories',
        'sub_categories' => 'setSubCategories',
        'sections' => 'setSections',
        'areas' => 'setAreas',
        'include_non_enrollable' => 'setIncludeNonEnrollable',
        'include_cancelled' => 'setIncludeCancelled',
        'only_web_enabled' => 'setOnlyWebEnabled',
        'for_invitees_only' => 'setForInviteesOnly',
        'attendance_registration_enabled' => 'setAttendanceRegistrationEnabled',
        'attendance_registration_completed' => 'setAttendanceRegistrationCompleted',
        'custom_field_values' => 'setCustomFieldValues',
        'custom_field_values_match' => 'setCustomFieldValuesMatch',
        'organizations' => 'setOrganizations',
        'include_recurring_course_recurrences' => 'setIncludeRecurringCourseRecurrences'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'starts_after' => 'getStartsAfter',
        'ends_before' => 'getEndsBefore',
        'name' => 'getName',
        'categories' => 'getCategories',
        'sub_categories' => 'getSubCategories',
        'sections' => 'getSections',
        'areas' => 'getAreas',
        'include_non_enrollable' => 'getIncludeNonEnrollable',
        'include_cancelled' => 'getIncludeCancelled',
        'only_web_enabled' => 'getOnlyWebEnabled',
        'for_invitees_only' => 'getForInviteesOnly',
        'attendance_registration_enabled' => 'getAttendanceRegistrationEnabled',
        'attendance_registration_completed' => 'getAttendanceRegistrationCompleted',
        'custom_field_values' => 'getCustomFieldValues',
        'custom_field_values_match' => 'getCustomFieldValuesMatch',
        'organizations' => 'getOrganizations',
        'include_recurring_course_recurrences' => 'getIncludeRecurringCourseRecurrences'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['starts_after'] = isset($data['starts_after']) ? $data['starts_after'] : null;
        $this->container['ends_before'] = isset($data['ends_before']) ? $data['ends_before'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['sub_categories'] = isset($data['sub_categories']) ? $data['sub_categories'] : null;
        $this->container['sections'] = isset($data['sections']) ? $data['sections'] : null;
        $this->container['areas'] = isset($data['areas']) ? $data['areas'] : null;
        $this->container['include_non_enrollable'] = isset($data['include_non_enrollable']) ? $data['include_non_enrollable'] : null;
        $this->container['include_cancelled'] = isset($data['include_cancelled']) ? $data['include_cancelled'] : null;
        $this->container['only_web_enabled'] = isset($data['only_web_enabled']) ? $data['only_web_enabled'] : null;
        $this->container['for_invitees_only'] = isset($data['for_invitees_only']) ? $data['for_invitees_only'] : null;
        $this->container['attendance_registration_enabled'] = isset($data['attendance_registration_enabled']) ? $data['attendance_registration_enabled'] : null;
        $this->container['attendance_registration_completed'] = isset($data['attendance_registration_completed']) ? $data['attendance_registration_completed'] : null;
        $this->container['custom_field_values'] = isset($data['custom_field_values']) ? $data['custom_field_values'] : null;
        $this->container['custom_field_values_match'] = isset($data['custom_field_values_match']) ? $data['custom_field_values_match'] : null;
        $this->container['organizations'] = isset($data['organizations']) ? $data['organizations'] : null;
        $this->container['include_recurring_course_recurrences'] = isset($data['include_recurring_course_recurrences']) ? $data['include_recurring_course_recurrences'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets starts_after
     *
     * @return \DateTime
     */
    public function getStartsAfter()
    {
        return $this->container['starts_after'];
    }

    /**
     * Sets starts_after
     *
     * @param \DateTime $starts_after The date for which the arrangements must start after
     *
     * @return $this
     */
    public function setStartsAfter($starts_after)
    {
        $this->container['starts_after'] = $starts_after;

        return $this;
    }

    /**
     * Gets ends_before
     *
     * @return \DateTime
     */
    public function getEndsBefore()
    {
        return $this->container['ends_before'];
    }

    /**
     * Sets ends_before
     *
     * @param \DateTime $ends_before The date for which the arrangements must end on or before
     *
     * @return $this
     */
    public function setEndsBefore($ends_before)
    {
        $this->container['ends_before'] = $ends_before;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the arrangement(s) the search for.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Membercare\Client\Model\ArrangementCategory[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Membercare\Client\Model\ArrangementCategory[] $categories A list of arrangement categories that the arrangements must have.
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets sub_categories
     *
     * @return \Membercare\Client\Model\ArrangementSubCategory[]
     */
    public function getSubCategories()
    {
        return $this->container['sub_categories'];
    }

    /**
     * Sets sub_categories
     *
     * @param \Membercare\Client\Model\ArrangementSubCategory[] $sub_categories A list of arrangement sub categories that the arrangements must have.
     *
     * @return $this
     */
    public function setSubCategories($sub_categories)
    {
        $this->container['sub_categories'] = $sub_categories;

        return $this;
    }

    /**
     * Gets sections
     *
     * @return \Membercare\Client\Model\ArrangementGroup[]
     */
    public function getSections()
    {
        return $this->container['sections'];
    }

    /**
     * Sets sections
     *
     * @param \Membercare\Client\Model\ArrangementGroup[] $sections A list of arrangement sections that the arrangements must have.
     *
     * @return $this
     */
    public function setSections($sections)
    {
        $this->container['sections'] = $sections;

        return $this;
    }

    /**
     * Gets areas
     *
     * @return \Membercare\Client\Model\ArrangementArea[]
     */
    public function getAreas()
    {
        return $this->container['areas'];
    }

    /**
     * Sets areas
     *
     * @param \Membercare\Client\Model\ArrangementArea[] $areas A list of arrangement areas that the arrangements must have.
     *
     * @return $this
     */
    public function setAreas($areas)
    {
        $this->container['areas'] = $areas;

        return $this;
    }

    /**
     * Gets include_non_enrollable
     *
     * @return bool
     */
    public function getIncludeNonEnrollable()
    {
        return $this->container['include_non_enrollable'];
    }

    /**
     * Sets include_non_enrollable
     *
     * @param bool $include_non_enrollable Indicates whether or not to search for arrangements that are not enrollable (last enroll date expired).
     *
     * @return $this
     */
    public function setIncludeNonEnrollable($include_non_enrollable)
    {
        $this->container['include_non_enrollable'] = $include_non_enrollable;

        return $this;
    }

    /**
     * Gets include_cancelled
     *
     * @return bool
     */
    public function getIncludeCancelled()
    {
        return $this->container['include_cancelled'];
    }

    /**
     * Sets include_cancelled
     *
     * @param bool $include_cancelled Indicates whether or not to search for arrangements that are cancelled.
     *
     * @return $this
     */
    public function setIncludeCancelled($include_cancelled)
    {
        $this->container['include_cancelled'] = $include_cancelled;

        return $this;
    }

    /**
     * Gets only_web_enabled
     *
     * @return bool
     */
    public function getOnlyWebEnabled()
    {
        return $this->container['only_web_enabled'];
    }

    /**
     * Sets only_web_enabled
     *
     * @param bool $only_web_enabled Indicates whether or not to only search for arrangements that are web enabled.
     *
     * @return $this
     */
    public function setOnlyWebEnabled($only_web_enabled)
    {
        $this->container['only_web_enabled'] = $only_web_enabled;

        return $this;
    }

    /**
     * Gets for_invitees_only
     *
     * @return bool
     */
    public function getForInviteesOnly()
    {
        return $this->container['for_invitees_only'];
    }

    /**
     * Sets for_invitees_only
     *
     * @param bool $for_invitees_only Indicates whether or not to only search for arrangements that are for invitees only. null means both
     *
     * @return $this
     */
    public function setForInviteesOnly($for_invitees_only)
    {
        $this->container['for_invitees_only'] = $for_invitees_only;

        return $this;
    }

    /**
     * Gets attendance_registration_enabled
     *
     * @return bool
     */
    public function getAttendanceRegistrationEnabled()
    {
        return $this->container['attendance_registration_enabled'];
    }

    /**
     * Sets attendance_registration_enabled
     *
     * @param bool $attendance_registration_enabled Is attendance registration enabled
     *
     * @return $this
     */
    public function setAttendanceRegistrationEnabled($attendance_registration_enabled)
    {
        $this->container['attendance_registration_enabled'] = $attendance_registration_enabled;

        return $this;
    }

    /**
     * Gets attendance_registration_completed
     *
     * @return bool
     */
    public function getAttendanceRegistrationCompleted()
    {
        return $this->container['attendance_registration_completed'];
    }

    /**
     * Sets attendance_registration_completed
     *
     * @param bool $attendance_registration_completed Does all participants have a mark regarding attendance  (only arrangements with AttendanceRegistration enabled will be returned when this porperty is not null )
     *
     * @return $this
     */
    public function setAttendanceRegistrationCompleted($attendance_registration_completed)
    {
        $this->container['attendance_registration_completed'] = $attendance_registration_completed;

        return $this;
    }

    /**
     * Gets custom_field_values
     *
     * @return \Membercare\Client\Model\CustomFieldValueSearch[]
     */
    public function getCustomFieldValues()
    {
        return $this->container['custom_field_values'];
    }

    /**
     * Sets custom_field_values
     *
     * @param \Membercare\Client\Model\CustomFieldValueSearch[] $custom_field_values A list of customfield values. At least one of them should be present on the arrangement. Please provide Type.Identifier and Value
     *
     * @return $this
     */
    public function setCustomFieldValues($custom_field_values)
    {
        $this->container['custom_field_values'] = $custom_field_values;

        return $this;
    }

    /**
     * Gets custom_field_values_match
     *
     * @return \Membercare\Client\Model\SearchBooleanType
     */
    public function getCustomFieldValuesMatch()
    {
        return $this->container['custom_field_values_match'];
    }

    /**
     * Sets custom_field_values_match
     *
     * @param \Membercare\Client\Model\SearchBooleanType $custom_field_values_match custom_field_values_match
     *
     * @return $this
     */
    public function setCustomFieldValuesMatch($custom_field_values_match)
    {
        $this->container['custom_field_values_match'] = $custom_field_values_match;

        return $this;
    }

    /**
     * Gets organizations
     *
     * @return \Membercare\Client\Model\SimpleOrganization[]
     */
    public function getOrganizations()
    {
        return $this->container['organizations'];
    }

    /**
     * Sets organizations
     *
     * @param \Membercare\Client\Model\SimpleOrganization[] $organizations A list of organizations to search events belong to
     *
     * @return $this
     */
    public function setOrganizations($organizations)
    {
        $this->container['organizations'] = $organizations;

        return $this;
    }

    /**
     * Gets include_recurring_course_recurrences
     *
     * @return bool
     */
    public function getIncludeRecurringCourseRecurrences()
    {
        return $this->container['include_recurring_course_recurrences'];
    }

    /**
     * Sets include_recurring_course_recurrences
     *
     * @param bool $include_recurring_course_recurrences A boolean indicating whether or not to include recurrences from the search results
     *
     * @return $this
     */
    public function setIncludeRecurringCourseRecurrences($include_recurring_course_recurrences)
    {
        $this->container['include_recurring_course_recurrences'] = $include_recurring_course_recurrences;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
