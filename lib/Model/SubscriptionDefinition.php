<?php
/**
 * SubscriptionDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * SubscriptionDefinition Class Doc Comment
 *
 * @category Class
 * @description Representation of a subscription definition for exposure in the WebApi
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'valid' => 'bool',
        'web_enabled' => 'bool',
        'start_date_rule' => '\Membercare\Client\Model\StartDateRule',
        'category' => '\Membercare\Client\Model\SubscriptionCategory',
        'group' => '\Membercare\Client\Model\SubscriptionGroup',
        'area' => '\Membercare\Client\Model\SubscriptionArea',
        'usage_type' => '\Membercare\Client\Model\SubscriptionDefinitionType',
        'with_delivery' => 'bool',
        'subscription_crew' => '\Membercare\Client\Model\SubscriptionDefinitionCrew[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'name' => null,
        'description' => null,
        'valid' => null,
        'web_enabled' => null,
        'start_date_rule' => null,
        'category' => null,
        'group' => null,
        'area' => null,
        'usage_type' => null,
        'with_delivery' => null,
        'subscription_crew' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'valid' => 'valid',
        'web_enabled' => 'webEnabled',
        'start_date_rule' => 'startDateRule',
        'category' => 'category',
        'group' => 'group',
        'area' => 'area',
        'usage_type' => 'usageType',
        'with_delivery' => 'withDelivery',
        'subscription_crew' => 'subscriptionCrew'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'valid' => 'setValid',
        'web_enabled' => 'setWebEnabled',
        'start_date_rule' => 'setStartDateRule',
        'category' => 'setCategory',
        'group' => 'setGroup',
        'area' => 'setArea',
        'usage_type' => 'setUsageType',
        'with_delivery' => 'setWithDelivery',
        'subscription_crew' => 'setSubscriptionCrew'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'valid' => 'getValid',
        'web_enabled' => 'getWebEnabled',
        'start_date_rule' => 'getStartDateRule',
        'category' => 'getCategory',
        'group' => 'getGroup',
        'area' => 'getArea',
        'usage_type' => 'getUsageType',
        'with_delivery' => 'getWithDelivery',
        'subscription_crew' => 'getSubscriptionCrew'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['web_enabled'] = isset($data['web_enabled']) ? $data['web_enabled'] : null;
        $this->container['start_date_rule'] = isset($data['start_date_rule']) ? $data['start_date_rule'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['area'] = isset($data['area']) ? $data['area'] : null;
        $this->container['usage_type'] = isset($data['usage_type']) ? $data['usage_type'] : null;
        $this->container['with_delivery'] = isset($data['with_delivery']) ? $data['with_delivery'] : null;
        $this->container['subscription_crew'] = isset($data['subscription_crew']) ? $data['subscription_crew'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The id of the subscription definition
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the subscription definition
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the subscription definition
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool $valid Indicates whether or not the subscription definition is valid
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets web_enabled
     *
     * @return bool
     */
    public function getWebEnabled()
    {
        return $this->container['web_enabled'];
    }

    /**
     * Sets web_enabled
     *
     * @param bool $web_enabled Indicates whether or not the subscription definition should be viewable/accessible on web
     *
     * @return $this
     */
    public function setWebEnabled($web_enabled)
    {
        $this->container['web_enabled'] = $web_enabled;

        return $this;
    }

    /**
     * Gets start_date_rule
     *
     * @return \Membercare\Client\Model\StartDateRule
     */
    public function getStartDateRule()
    {
        return $this->container['start_date_rule'];
    }

    /**
     * Sets start_date_rule
     *
     * @param \Membercare\Client\Model\StartDateRule $start_date_rule start_date_rule
     *
     * @return $this
     */
    public function setStartDateRule($start_date_rule)
    {
        $this->container['start_date_rule'] = $start_date_rule;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Membercare\Client\Model\SubscriptionCategory
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Membercare\Client\Model\SubscriptionCategory $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \Membercare\Client\Model\SubscriptionGroup
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \Membercare\Client\Model\SubscriptionGroup $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets area
     *
     * @return \Membercare\Client\Model\SubscriptionArea
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param \Membercare\Client\Model\SubscriptionArea $area area
     *
     * @return $this
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets usage_type
     *
     * @return \Membercare\Client\Model\SubscriptionDefinitionType
     */
    public function getUsageType()
    {
        return $this->container['usage_type'];
    }

    /**
     * Sets usage_type
     *
     * @param \Membercare\Client\Model\SubscriptionDefinitionType $usage_type usage_type
     *
     * @return $this
     */
    public function setUsageType($usage_type)
    {
        $this->container['usage_type'] = $usage_type;

        return $this;
    }

    /**
     * Gets with_delivery
     *
     * @return bool
     */
    public function getWithDelivery()
    {
        return $this->container['with_delivery'];
    }

    /**
     * Sets with_delivery
     *
     * @param bool $with_delivery Is this a subscriptiontype with delivery
     *
     * @return $this
     */
    public function setWithDelivery($with_delivery)
    {
        $this->container['with_delivery'] = $with_delivery;

        return $this;
    }

    /**
     * Gets subscription_crew
     *
     * @return \Membercare\Client\Model\SubscriptionDefinitionCrew[]
     */
    public function getSubscriptionCrew()
    {
        return $this->container['subscription_crew'];
    }

    /**
     * Sets subscription_crew
     *
     * @param \Membercare\Client\Model\SubscriptionDefinitionCrew[] $subscription_crew subscription_crew
     *
     * @return $this
     */
    public function setSubscriptionCrew($subscription_crew)
    {
        $this->container['subscription_crew'] = $subscription_crew;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
