<?php
/**
 * InvoiceItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * InvoiceItem Class Doc Comment
 *
 * @category Class
 * @description Representation of an InvoiceItem. InvoiceItems are lines attached to an Invoice. An InvoiceItem is \&quot;something you have ordered/purchased\&quot;.
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'buyer' => '\Membercare\Client\Model\Debtor',
        'description' => 'string',
        'unit_price' => 'double',
        'quantity' => 'double',
        'total_price' => 'double',
        'total_vat' => 'double',
        'finance_dimensions' => '\Membercare\Client\Model\FinanceDimensions',
        'sequence' => 'int',
        'credited_invoice_item_id' => 'int',
        'credited_invoice_link' => 'string',
        'invoice_link' => 'string',
        'is_credited' => 'bool',
        'fee_info' => '\Membercare\Client\Model\InvoiceItemFeeInfo',
        'subscription_info' => '\Membercare\Client\Model\InvoiceItemSubscriptionInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'buyer' => null,
        'description' => null,
        'unit_price' => 'double',
        'quantity' => 'double',
        'total_price' => 'double',
        'total_vat' => 'double',
        'finance_dimensions' => null,
        'sequence' => 'int64',
        'credited_invoice_item_id' => 'int64',
        'credited_invoice_link' => null,
        'invoice_link' => null,
        'is_credited' => null,
        'fee_info' => null,
        'subscription_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'buyer' => 'buyer',
        'description' => 'description',
        'unit_price' => 'unitPrice',
        'quantity' => 'quantity',
        'total_price' => 'totalPrice',
        'total_vat' => 'totalVat',
        'finance_dimensions' => 'financeDimensions',
        'sequence' => 'sequence',
        'credited_invoice_item_id' => 'creditedInvoiceItemId',
        'credited_invoice_link' => 'creditedInvoiceLink',
        'invoice_link' => 'invoiceLink',
        'is_credited' => 'isCredited',
        'fee_info' => 'feeInfo',
        'subscription_info' => 'subscriptionInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'buyer' => 'setBuyer',
        'description' => 'setDescription',
        'unit_price' => 'setUnitPrice',
        'quantity' => 'setQuantity',
        'total_price' => 'setTotalPrice',
        'total_vat' => 'setTotalVat',
        'finance_dimensions' => 'setFinanceDimensions',
        'sequence' => 'setSequence',
        'credited_invoice_item_id' => 'setCreditedInvoiceItemId',
        'credited_invoice_link' => 'setCreditedInvoiceLink',
        'invoice_link' => 'setInvoiceLink',
        'is_credited' => 'setIsCredited',
        'fee_info' => 'setFeeInfo',
        'subscription_info' => 'setSubscriptionInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'buyer' => 'getBuyer',
        'description' => 'getDescription',
        'unit_price' => 'getUnitPrice',
        'quantity' => 'getQuantity',
        'total_price' => 'getTotalPrice',
        'total_vat' => 'getTotalVat',
        'finance_dimensions' => 'getFinanceDimensions',
        'sequence' => 'getSequence',
        'credited_invoice_item_id' => 'getCreditedInvoiceItemId',
        'credited_invoice_link' => 'getCreditedInvoiceLink',
        'invoice_link' => 'getInvoiceLink',
        'is_credited' => 'getIsCredited',
        'fee_info' => 'getFeeInfo',
        'subscription_info' => 'getSubscriptionInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['buyer'] = isset($data['buyer']) ? $data['buyer'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['total_vat'] = isset($data['total_vat']) ? $data['total_vat'] : null;
        $this->container['finance_dimensions'] = isset($data['finance_dimensions']) ? $data['finance_dimensions'] : null;
        $this->container['sequence'] = isset($data['sequence']) ? $data['sequence'] : null;
        $this->container['credited_invoice_item_id'] = isset($data['credited_invoice_item_id']) ? $data['credited_invoice_item_id'] : null;
        $this->container['credited_invoice_link'] = isset($data['credited_invoice_link']) ? $data['credited_invoice_link'] : null;
        $this->container['invoice_link'] = isset($data['invoice_link']) ? $data['invoice_link'] : null;
        $this->container['is_credited'] = isset($data['is_credited']) ? $data['is_credited'] : null;
        $this->container['fee_info'] = isset($data['fee_info']) ? $data['fee_info'] : null;
        $this->container['subscription_info'] = isset($data['subscription_info']) ? $data['subscription_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \Membercare\Client\Model\Debtor
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \Membercare\Client\Model\Debtor $buyer buyer
     *
     * @return $this
     */
    public function setBuyer($buyer)
    {
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the item
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return double
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param double $unit_price Price per unit
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity Number of units purchased
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return double
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param double $total_price Total Price (UnitPrice * Quantity)
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets total_vat
     *
     * @return double
     */
    public function getTotalVat()
    {
        return $this->container['total_vat'];
    }

    /**
     * Sets total_vat
     *
     * @param double $total_vat Total vat (TotalPrice * VatPercent)
     *
     * @return $this
     */
    public function setTotalVat($total_vat)
    {
        $this->container['total_vat'] = $total_vat;

        return $this;
    }

    /**
     * Gets finance_dimensions
     *
     * @return \Membercare\Client\Model\FinanceDimensions
     */
    public function getFinanceDimensions()
    {
        return $this->container['finance_dimensions'];
    }

    /**
     * Sets finance_dimensions
     *
     * @param \Membercare\Client\Model\FinanceDimensions $finance_dimensions finance_dimensions
     *
     * @return $this
     */
    public function setFinanceDimensions($finance_dimensions)
    {
        $this->container['finance_dimensions'] = $finance_dimensions;

        return $this;
    }

    /**
     * Gets sequence
     *
     * @return int
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param int $sequence Order by this property
     *
     * @return $this
     */
    public function setSequence($sequence)
    {
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets credited_invoice_item_id
     *
     * @return int
     */
    public function getCreditedInvoiceItemId()
    {
        return $this->container['credited_invoice_item_id'];
    }

    /**
     * Sets credited_invoice_item_id
     *
     * @param int $credited_invoice_item_id If item is crediting another InvoiceItem, this is set
     *
     * @return $this
     */
    public function setCreditedInvoiceItemId($credited_invoice_item_id)
    {
        $this->container['credited_invoice_item_id'] = $credited_invoice_item_id;

        return $this;
    }

    /**
     * Gets credited_invoice_link
     *
     * @return string
     */
    public function getCreditedInvoiceLink()
    {
        return $this->container['credited_invoice_link'];
    }

    /**
     * Sets credited_invoice_link
     *
     * @param string $credited_invoice_link If item is crediting another InvoiceItem, this link points to the Invoice where the credited item resides.
     *
     * @return $this
     */
    public function setCreditedInvoiceLink($credited_invoice_link)
    {
        $this->container['credited_invoice_link'] = $credited_invoice_link;

        return $this;
    }

    /**
     * Gets invoice_link
     *
     * @return string
     */
    public function getInvoiceLink()
    {
        return $this->container['invoice_link'];
    }

    /**
     * Sets invoice_link
     *
     * @param string $invoice_link This link points to the Invoice where the item resides.
     *
     * @return $this
     */
    public function setInvoiceLink($invoice_link)
    {
        $this->container['invoice_link'] = $invoice_link;

        return $this;
    }

    /**
     * Gets is_credited
     *
     * @return bool
     */
    public function getIsCredited()
    {
        return $this->container['is_credited'];
    }

    /**
     * Sets is_credited
     *
     * @param bool $is_credited If true, this line is credited by another line
     *
     * @return $this
     */
    public function setIsCredited($is_credited)
    {
        $this->container['is_credited'] = $is_credited;

        return $this;
    }

    /**
     * Gets fee_info
     *
     * @return \Membercare\Client\Model\InvoiceItemFeeInfo
     */
    public function getFeeInfo()
    {
        return $this->container['fee_info'];
    }

    /**
     * Sets fee_info
     *
     * @param \Membercare\Client\Model\InvoiceItemFeeInfo $fee_info fee_info
     *
     * @return $this
     */
    public function setFeeInfo($fee_info)
    {
        $this->container['fee_info'] = $fee_info;

        return $this;
    }

    /**
     * Gets subscription_info
     *
     * @return \Membercare\Client\Model\InvoiceItemSubscriptionInfo
     */
    public function getSubscriptionInfo()
    {
        return $this->container['subscription_info'];
    }

    /**
     * Sets subscription_info
     *
     * @param \Membercare\Client\Model\InvoiceItemSubscriptionInfo $subscription_info subscription_info
     *
     * @return $this
     */
    public function setSubscriptionInfo($subscription_info)
    {
        $this->container['subscription_info'] = $subscription_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
