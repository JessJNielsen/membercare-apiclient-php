<?php
/**
 * MembercareUserPatch
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * MembercareUserPatch Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MembercareUserPatch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MembercareUserPatch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'int',
        'end' => '\DateTime',
        'end_is_patched' => 'bool',
        'user_identification' => 'string',
        'ignore_data_roles' => 'bool',
        'is_administrator' => 'bool',
        'membercare_user_data_roles' => '\Membercare\Client\Model\MembercareUserDataRole[]',
        'membercare_user_roles' => '\Membercare\Client\Model\MembercareUserRole[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => 'int64',
        'end' => 'date-time',
        'end_is_patched' => null,
        'user_identification' => null,
        'ignore_data_roles' => null,
        'is_administrator' => null,
        'membercare_user_data_roles' => null,
        'membercare_user_roles' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'end' => 'end',
        'end_is_patched' => 'endIsPatched',
        'user_identification' => 'userIdentification',
        'ignore_data_roles' => 'ignoreDataRoles',
        'is_administrator' => 'isAdministrator',
        'membercare_user_data_roles' => 'membercareUserDataRoles',
        'membercare_user_roles' => 'membercareUserRoles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'end' => 'setEnd',
        'end_is_patched' => 'setEndIsPatched',
        'user_identification' => 'setUserIdentification',
        'ignore_data_roles' => 'setIgnoreDataRoles',
        'is_administrator' => 'setIsAdministrator',
        'membercare_user_data_roles' => 'setMembercareUserDataRoles',
        'membercare_user_roles' => 'setMembercareUserRoles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'end' => 'getEnd',
        'end_is_patched' => 'getEndIsPatched',
        'user_identification' => 'getUserIdentification',
        'ignore_data_roles' => 'getIgnoreDataRoles',
        'is_administrator' => 'getIsAdministrator',
        'membercare_user_data_roles' => 'getMembercareUserDataRoles',
        'membercare_user_roles' => 'getMembercareUserRoles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['end_is_patched'] = isset($data['end_is_patched']) ? $data['end_is_patched'] : null;
        $this->container['user_identification'] = isset($data['user_identification']) ? $data['user_identification'] : null;
        $this->container['ignore_data_roles'] = isset($data['ignore_data_roles']) ? $data['ignore_data_roles'] : null;
        $this->container['is_administrator'] = isset($data['is_administrator']) ? $data['is_administrator'] : null;
        $this->container['membercare_user_data_roles'] = isset($data['membercare_user_data_roles']) ? $data['membercare_user_data_roles'] : null;
        $this->container['membercare_user_roles'] = isset($data['membercare_user_roles']) ? $data['membercare_user_roles'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \DateTime $end end
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets end_is_patched
     *
     * @return bool
     */
    public function getEndIsPatched()
    {
        return $this->container['end_is_patched'];
    }

    /**
     * Sets end_is_patched
     *
     * @param bool $end_is_patched end_is_patched
     *
     * @return $this
     */
    public function setEndIsPatched($end_is_patched)
    {
        $this->container['end_is_patched'] = $end_is_patched;

        return $this;
    }

    /**
     * Gets user_identification
     *
     * @return string
     */
    public function getUserIdentification()
    {
        return $this->container['user_identification'];
    }

    /**
     * Sets user_identification
     *
     * @param string $user_identification The users initials - 10 characters max
     *
     * @return $this
     */
    public function setUserIdentification($user_identification)
    {
        $this->container['user_identification'] = $user_identification;

        return $this;
    }

    /**
     * Gets ignore_data_roles
     *
     * @return bool
     */
    public function getIgnoreDataRoles()
    {
        return $this->container['ignore_data_roles'];
    }

    /**
     * Sets ignore_data_roles
     *
     * @param bool $ignore_data_roles ignore_data_roles
     *
     * @return $this
     */
    public function setIgnoreDataRoles($ignore_data_roles)
    {
        $this->container['ignore_data_roles'] = $ignore_data_roles;

        return $this;
    }

    /**
     * Gets is_administrator
     *
     * @return bool
     */
    public function getIsAdministrator()
    {
        return $this->container['is_administrator'];
    }

    /**
     * Sets is_administrator
     *
     * @param bool $is_administrator is_administrator
     *
     * @return $this
     */
    public function setIsAdministrator($is_administrator)
    {
        $this->container['is_administrator'] = $is_administrator;

        return $this;
    }

    /**
     * Gets membercare_user_data_roles
     *
     * @return \Membercare\Client\Model\MembercareUserDataRole[]
     */
    public function getMembercareUserDataRoles()
    {
        return $this->container['membercare_user_data_roles'];
    }

    /**
     * Sets membercare_user_data_roles
     *
     * @param \Membercare\Client\Model\MembercareUserDataRole[] $membercare_user_data_roles membercare_user_data_roles
     *
     * @return $this
     */
    public function setMembercareUserDataRoles($membercare_user_data_roles)
    {
        $this->container['membercare_user_data_roles'] = $membercare_user_data_roles;

        return $this;
    }

    /**
     * Gets membercare_user_roles
     *
     * @return \Membercare\Client\Model\MembercareUserRole[]
     */
    public function getMembercareUserRoles()
    {
        return $this->container['membercare_user_roles'];
    }

    /**
     * Sets membercare_user_roles
     *
     * @param \Membercare\Client\Model\MembercareUserRole[] $membercare_user_roles membercare_user_roles
     *
     * @return $this
     */
    public function setMembercareUserRoles($membercare_user_roles)
    {
        $this->container['membercare_user_roles'] = $membercare_user_roles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
