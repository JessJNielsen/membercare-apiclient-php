<?php
/**
 * Participant
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * Participant Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Participant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Participant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'participant_id' => 'int',
        'id' => 'int',
        'arrangement_internal_id' => 'string',
        'arrangement' => '\Membercare\Client\Model\Arrangement',
        'member' => '\Membercare\Client\Model\Member',
        'contact_person' => '\Membercare\Client\Model\Person',
        'payer' => '\Membercare\Client\Model\Debtor',
        'participant_category' => '\Membercare\Client\Model\ParticipantCategory',
        'permit_email' => 'bool',
        'permit_sms' => 'bool',
        'description' => 'string',
        'e_invocie_info' => '\Membercare\Client\Model\EInvoiceInfo',
        'enrolled_from' => '\Membercare\Client\Model\EnrolledFrom',
        'represent' => '\Membercare\Client\Model\Company',
        'main_participation' => '\Membercare\Client\Model\Participation',
        'sessions' => '\Membercare\Client\Model\Session[]',
        'invoices_link' => 'string',
        'show_on_external_participant_list' => 'bool',
        'answers' => '\Membercare\Client\Model\Answer[]',
        'grade' => '\Membercare\Client\Model\Grade'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'participant_id' => 'int64',
        'id' => 'int64',
        'arrangement_internal_id' => null,
        'arrangement' => null,
        'member' => null,
        'contact_person' => null,
        'payer' => null,
        'participant_category' => null,
        'permit_email' => null,
        'permit_sms' => null,
        'description' => null,
        'e_invocie_info' => null,
        'enrolled_from' => null,
        'represent' => null,
        'main_participation' => null,
        'sessions' => null,
        'invoices_link' => null,
        'show_on_external_participant_list' => null,
        'answers' => null,
        'grade' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'participant_id' => 'participantId',
        'id' => 'id',
        'arrangement_internal_id' => 'arrangementInternalId',
        'arrangement' => 'arrangement',
        'member' => 'member',
        'contact_person' => 'contactPerson',
        'payer' => 'payer',
        'participant_category' => 'participantCategory',
        'permit_email' => 'permitEmail',
        'permit_sms' => 'permitSms',
        'description' => 'description',
        'e_invocie_info' => 'eInvocieInfo',
        'enrolled_from' => 'enrolledFrom',
        'represent' => 'represent',
        'main_participation' => 'mainParticipation',
        'sessions' => 'sessions',
        'invoices_link' => 'invoicesLink',
        'show_on_external_participant_list' => 'showOnExternalParticipantList',
        'answers' => 'answers',
        'grade' => 'grade'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'participant_id' => 'setParticipantId',
        'id' => 'setId',
        'arrangement_internal_id' => 'setArrangementInternalId',
        'arrangement' => 'setArrangement',
        'member' => 'setMember',
        'contact_person' => 'setContactPerson',
        'payer' => 'setPayer',
        'participant_category' => 'setParticipantCategory',
        'permit_email' => 'setPermitEmail',
        'permit_sms' => 'setPermitSms',
        'description' => 'setDescription',
        'e_invocie_info' => 'setEInvocieInfo',
        'enrolled_from' => 'setEnrolledFrom',
        'represent' => 'setRepresent',
        'main_participation' => 'setMainParticipation',
        'sessions' => 'setSessions',
        'invoices_link' => 'setInvoicesLink',
        'show_on_external_participant_list' => 'setShowOnExternalParticipantList',
        'answers' => 'setAnswers',
        'grade' => 'setGrade'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'participant_id' => 'getParticipantId',
        'id' => 'getId',
        'arrangement_internal_id' => 'getArrangementInternalId',
        'arrangement' => 'getArrangement',
        'member' => 'getMember',
        'contact_person' => 'getContactPerson',
        'payer' => 'getPayer',
        'participant_category' => 'getParticipantCategory',
        'permit_email' => 'getPermitEmail',
        'permit_sms' => 'getPermitSms',
        'description' => 'getDescription',
        'e_invocie_info' => 'getEInvocieInfo',
        'enrolled_from' => 'getEnrolledFrom',
        'represent' => 'getRepresent',
        'main_participation' => 'getMainParticipation',
        'sessions' => 'getSessions',
        'invoices_link' => 'getInvoicesLink',
        'show_on_external_participant_list' => 'getShowOnExternalParticipantList',
        'answers' => 'getAnswers',
        'grade' => 'getGrade'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['participant_id'] = isset($data['participant_id']) ? $data['participant_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['arrangement_internal_id'] = isset($data['arrangement_internal_id']) ? $data['arrangement_internal_id'] : null;
        $this->container['arrangement'] = isset($data['arrangement']) ? $data['arrangement'] : null;
        $this->container['member'] = isset($data['member']) ? $data['member'] : null;
        $this->container['contact_person'] = isset($data['contact_person']) ? $data['contact_person'] : null;
        $this->container['payer'] = isset($data['payer']) ? $data['payer'] : null;
        $this->container['participant_category'] = isset($data['participant_category']) ? $data['participant_category'] : null;
        $this->container['permit_email'] = isset($data['permit_email']) ? $data['permit_email'] : null;
        $this->container['permit_sms'] = isset($data['permit_sms']) ? $data['permit_sms'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['e_invocie_info'] = isset($data['e_invocie_info']) ? $data['e_invocie_info'] : null;
        $this->container['enrolled_from'] = isset($data['enrolled_from']) ? $data['enrolled_from'] : null;
        $this->container['represent'] = isset($data['represent']) ? $data['represent'] : null;
        $this->container['main_participation'] = isset($data['main_participation']) ? $data['main_participation'] : null;
        $this->container['sessions'] = isset($data['sessions']) ? $data['sessions'] : null;
        $this->container['invoices_link'] = isset($data['invoices_link']) ? $data['invoices_link'] : null;
        $this->container['show_on_external_participant_list'] = isset($data['show_on_external_participant_list']) ? $data['show_on_external_participant_list'] : null;
        $this->container['answers'] = isset($data['answers']) ? $data['answers'] : null;
        $this->container['grade'] = isset($data['grade']) ? $data['grade'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets participant_id
     *
     * @return int
     */
    public function getParticipantId()
    {
        return $this->container['participant_id'];
    }

    /**
     * Sets participant_id
     *
     * @param int $participant_id participant_id
     *
     * @return $this
     */
    public function setParticipantId($participant_id)
    {
        $this->container['participant_id'] = $participant_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The internalId of the main arrangement
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets arrangement_internal_id
     *
     * @return string
     */
    public function getArrangementInternalId()
    {
        return $this->container['arrangement_internal_id'];
    }

    /**
     * Sets arrangement_internal_id
     *
     * @param string $arrangement_internal_id arrangement_internal_id
     *
     * @return $this
     */
    public function setArrangementInternalId($arrangement_internal_id)
    {
        $this->container['arrangement_internal_id'] = $arrangement_internal_id;

        return $this;
    }

    /**
     * Gets arrangement
     *
     * @return \Membercare\Client\Model\Arrangement
     */
    public function getArrangement()
    {
        return $this->container['arrangement'];
    }

    /**
     * Sets arrangement
     *
     * @param \Membercare\Client\Model\Arrangement $arrangement arrangement
     *
     * @return $this
     */
    public function setArrangement($arrangement)
    {
        $this->container['arrangement'] = $arrangement;

        return $this;
    }

    /**
     * Gets member
     *
     * @return \Membercare\Client\Model\Member
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param \Membercare\Client\Model\Member $member member
     *
     * @return $this
     */
    public function setMember($member)
    {
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return \Membercare\Client\Model\Person
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param \Membercare\Client\Model\Person $contact_person contact_person
     *
     * @return $this
     */
    public function setContactPerson($contact_person)
    {
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return \Membercare\Client\Model\Debtor
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param \Membercare\Client\Model\Debtor $payer payer
     *
     * @return $this
     */
    public function setPayer($payer)
    {
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets participant_category
     *
     * @return \Membercare\Client\Model\ParticipantCategory
     */
    public function getParticipantCategory()
    {
        return $this->container['participant_category'];
    }

    /**
     * Sets participant_category
     *
     * @param \Membercare\Client\Model\ParticipantCategory $participant_category participant_category
     *
     * @return $this
     */
    public function setParticipantCategory($participant_category)
    {
        $this->container['participant_category'] = $participant_category;

        return $this;
    }

    /**
     * Gets permit_email
     *
     * @return bool
     */
    public function getPermitEmail()
    {
        return $this->container['permit_email'];
    }

    /**
     * Sets permit_email
     *
     * @param bool $permit_email permit_email
     *
     * @return $this
     */
    public function setPermitEmail($permit_email)
    {
        $this->container['permit_email'] = $permit_email;

        return $this;
    }

    /**
     * Gets permit_sms
     *
     * @return bool
     */
    public function getPermitSms()
    {
        return $this->container['permit_sms'];
    }

    /**
     * Sets permit_sms
     *
     * @param bool $permit_sms permit_sms
     *
     * @return $this
     */
    public function setPermitSms($permit_sms)
    {
        $this->container['permit_sms'] = $permit_sms;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets e_invocie_info
     *
     * @return \Membercare\Client\Model\EInvoiceInfo
     */
    public function getEInvocieInfo()
    {
        return $this->container['e_invocie_info'];
    }

    /**
     * Sets e_invocie_info
     *
     * @param \Membercare\Client\Model\EInvoiceInfo $e_invocie_info e_invocie_info
     *
     * @return $this
     */
    public function setEInvocieInfo($e_invocie_info)
    {
        $this->container['e_invocie_info'] = $e_invocie_info;

        return $this;
    }

    /**
     * Gets enrolled_from
     *
     * @return \Membercare\Client\Model\EnrolledFrom
     */
    public function getEnrolledFrom()
    {
        return $this->container['enrolled_from'];
    }

    /**
     * Sets enrolled_from
     *
     * @param \Membercare\Client\Model\EnrolledFrom $enrolled_from enrolled_from
     *
     * @return $this
     */
    public function setEnrolledFrom($enrolled_from)
    {
        $this->container['enrolled_from'] = $enrolled_from;

        return $this;
    }

    /**
     * Gets represent
     *
     * @return \Membercare\Client\Model\Company
     */
    public function getRepresent()
    {
        return $this->container['represent'];
    }

    /**
     * Sets represent
     *
     * @param \Membercare\Client\Model\Company $represent represent
     *
     * @return $this
     */
    public function setRepresent($represent)
    {
        $this->container['represent'] = $represent;

        return $this;
    }

    /**
     * Gets main_participation
     *
     * @return \Membercare\Client\Model\Participation
     */
    public function getMainParticipation()
    {
        return $this->container['main_participation'];
    }

    /**
     * Sets main_participation
     *
     * @param \Membercare\Client\Model\Participation $main_participation main_participation
     *
     * @return $this
     */
    public function setMainParticipation($main_participation)
    {
        $this->container['main_participation'] = $main_participation;

        return $this;
    }

    /**
     * Gets sessions
     *
     * @return \Membercare\Client\Model\Session[]
     */
    public function getSessions()
    {
        return $this->container['sessions'];
    }

    /**
     * Sets sessions
     *
     * @param \Membercare\Client\Model\Session[] $sessions sessions
     *
     * @return $this
     */
    public function setSessions($sessions)
    {
        $this->container['sessions'] = $sessions;

        return $this;
    }

    /**
     * Gets invoices_link
     *
     * @return string
     */
    public function getInvoicesLink()
    {
        return $this->container['invoices_link'];
    }

    /**
     * Sets invoices_link
     *
     * @param string $invoices_link invoices_link
     *
     * @return $this
     */
    public function setInvoicesLink($invoices_link)
    {
        $this->container['invoices_link'] = $invoices_link;

        return $this;
    }

    /**
     * Gets show_on_external_participant_list
     *
     * @return bool
     */
    public function getShowOnExternalParticipantList()
    {
        return $this->container['show_on_external_participant_list'];
    }

    /**
     * Sets show_on_external_participant_list
     *
     * @param bool $show_on_external_participant_list show_on_external_participant_list
     *
     * @return $this
     */
    public function setShowOnExternalParticipantList($show_on_external_participant_list)
    {
        $this->container['show_on_external_participant_list'] = $show_on_external_participant_list;

        return $this;
    }

    /**
     * Gets answers
     *
     * @return \Membercare\Client\Model\Answer[]
     */
    public function getAnswers()
    {
        return $this->container['answers'];
    }

    /**
     * Sets answers
     *
     * @param \Membercare\Client\Model\Answer[] $answers Answers given when signing up for event
     *
     * @return $this
     */
    public function setAnswers($answers)
    {
        $this->container['answers'] = $answers;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return \Membercare\Client\Model\Grade
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param \Membercare\Client\Model\Grade $grade grade
     *
     * @return $this
     */
    public function setGrade($grade)
    {
        $this->container['grade'] = $grade;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
