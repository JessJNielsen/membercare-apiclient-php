<?php
/**
 * Identity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * Identity Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Identity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Identity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_administrator' => 'bool',
        'debtor_account_number' => 'string',
        'unit_id' => 'int',
        'datacard_id' => 'int',
        'user_mc_id' => 'int',
        'full_name' => 'string',
        'user_name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'initials' => 'string',
        'person_id' => 'int',
        'is_ignoring_data_roles' => 'bool',
        'asp_net_identity_id' => 'int',
        'roles' => 'int[]',
        'organization_access' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_administrator' => null,
        'debtor_account_number' => null,
        'unit_id' => 'int64',
        'datacard_id' => 'int64',
        'user_mc_id' => 'int64',
        'full_name' => null,
        'user_name' => null,
        'first_name' => null,
        'last_name' => null,
        'initials' => null,
        'person_id' => 'int64',
        'is_ignoring_data_roles' => null,
        'asp_net_identity_id' => 'int64',
        'roles' => 'int64',
        'organization_access' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_administrator' => 'isAdministrator',
        'debtor_account_number' => 'debtorAccountNumber',
        'unit_id' => 'unitId',
        'datacard_id' => 'datacardId',
        'user_mc_id' => 'userMcId',
        'full_name' => 'fullName',
        'user_name' => 'userName',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'initials' => 'initials',
        'person_id' => 'personId',
        'is_ignoring_data_roles' => 'isIgnoringDataRoles',
        'asp_net_identity_id' => 'aspNetIdentityId',
        'roles' => 'roles',
        'organization_access' => 'organizationAccess'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_administrator' => 'setIsAdministrator',
        'debtor_account_number' => 'setDebtorAccountNumber',
        'unit_id' => 'setUnitId',
        'datacard_id' => 'setDatacardId',
        'user_mc_id' => 'setUserMcId',
        'full_name' => 'setFullName',
        'user_name' => 'setUserName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'initials' => 'setInitials',
        'person_id' => 'setPersonId',
        'is_ignoring_data_roles' => 'setIsIgnoringDataRoles',
        'asp_net_identity_id' => 'setAspNetIdentityId',
        'roles' => 'setRoles',
        'organization_access' => 'setOrganizationAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_administrator' => 'getIsAdministrator',
        'debtor_account_number' => 'getDebtorAccountNumber',
        'unit_id' => 'getUnitId',
        'datacard_id' => 'getDatacardId',
        'user_mc_id' => 'getUserMcId',
        'full_name' => 'getFullName',
        'user_name' => 'getUserName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'initials' => 'getInitials',
        'person_id' => 'getPersonId',
        'is_ignoring_data_roles' => 'getIsIgnoringDataRoles',
        'asp_net_identity_id' => 'getAspNetIdentityId',
        'roles' => 'getRoles',
        'organization_access' => 'getOrganizationAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_administrator'] = isset($data['is_administrator']) ? $data['is_administrator'] : null;
        $this->container['debtor_account_number'] = isset($data['debtor_account_number']) ? $data['debtor_account_number'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['datacard_id'] = isset($data['datacard_id']) ? $data['datacard_id'] : null;
        $this->container['user_mc_id'] = isset($data['user_mc_id']) ? $data['user_mc_id'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['initials'] = isset($data['initials']) ? $data['initials'] : null;
        $this->container['person_id'] = isset($data['person_id']) ? $data['person_id'] : null;
        $this->container['is_ignoring_data_roles'] = isset($data['is_ignoring_data_roles']) ? $data['is_ignoring_data_roles'] : null;
        $this->container['asp_net_identity_id'] = isset($data['asp_net_identity_id']) ? $data['asp_net_identity_id'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['organization_access'] = isset($data['organization_access']) ? $data['organization_access'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_administrator
     *
     * @return bool
     */
    public function getIsAdministrator()
    {
        return $this->container['is_administrator'];
    }

    /**
     * Sets is_administrator
     *
     * @param bool $is_administrator is_administrator
     *
     * @return $this
     */
    public function setIsAdministrator($is_administrator)
    {
        $this->container['is_administrator'] = $is_administrator;

        return $this;
    }

    /**
     * Gets debtor_account_number
     *
     * @return string
     */
    public function getDebtorAccountNumber()
    {
        return $this->container['debtor_account_number'];
    }

    /**
     * Sets debtor_account_number
     *
     * @param string $debtor_account_number debtor_account_number
     *
     * @return $this
     */
    public function setDebtorAccountNumber($debtor_account_number)
    {
        $this->container['debtor_account_number'] = $debtor_account_number;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return int
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param int $unit_id unit_id
     *
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets datacard_id
     *
     * @return int
     */
    public function getDatacardId()
    {
        return $this->container['datacard_id'];
    }

    /**
     * Sets datacard_id
     *
     * @param int $datacard_id datacard_id
     *
     * @return $this
     */
    public function setDatacardId($datacard_id)
    {
        $this->container['datacard_id'] = $datacard_id;

        return $this;
    }

    /**
     * Gets user_mc_id
     *
     * @return int
     */
    public function getUserMcId()
    {
        return $this->container['user_mc_id'];
    }

    /**
     * Sets user_mc_id
     *
     * @param int $user_mc_id user_mc_id
     *
     * @return $this
     */
    public function setUserMcId($user_mc_id)
    {
        $this->container['user_mc_id'] = $user_mc_id;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name full_name
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets initials
     *
     * @return string
     */
    public function getInitials()
    {
        return $this->container['initials'];
    }

    /**
     * Sets initials
     *
     * @param string $initials initials
     *
     * @return $this
     */
    public function setInitials($initials)
    {
        $this->container['initials'] = $initials;

        return $this;
    }

    /**
     * Gets person_id
     *
     * @return int
     */
    public function getPersonId()
    {
        return $this->container['person_id'];
    }

    /**
     * Sets person_id
     *
     * @param int $person_id person_id
     *
     * @return $this
     */
    public function setPersonId($person_id)
    {
        $this->container['person_id'] = $person_id;

        return $this;
    }

    /**
     * Gets is_ignoring_data_roles
     *
     * @return bool
     */
    public function getIsIgnoringDataRoles()
    {
        return $this->container['is_ignoring_data_roles'];
    }

    /**
     * Sets is_ignoring_data_roles
     *
     * @param bool $is_ignoring_data_roles is_ignoring_data_roles
     *
     * @return $this
     */
    public function setIsIgnoringDataRoles($is_ignoring_data_roles)
    {
        $this->container['is_ignoring_data_roles'] = $is_ignoring_data_roles;

        return $this;
    }

    /**
     * Gets asp_net_identity_id
     *
     * @return int
     */
    public function getAspNetIdentityId()
    {
        return $this->container['asp_net_identity_id'];
    }

    /**
     * Sets asp_net_identity_id
     *
     * @param int $asp_net_identity_id asp_net_identity_id
     *
     * @return $this
     */
    public function setAspNetIdentityId($asp_net_identity_id)
    {
        $this->container['asp_net_identity_id'] = $asp_net_identity_id;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return int[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param int[] $roles roles
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets organization_access
     *
     * @return int[]
     */
    public function getOrganizationAccess()
    {
        return $this->container['organization_access'];
    }

    /**
     * Sets organization_access
     *
     * @param int[] $organization_access organization_access
     *
     * @return $this
     */
    public function setOrganizationAccess($organization_access)
    {
        $this->container['organization_access'] = $organization_access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
