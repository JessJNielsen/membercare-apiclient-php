<?php
/**
 * QuickpaySubscription
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * QuickpaySubscription Class Doc Comment
 *
 * @category Class
 * @description This model models a Quickpay subscription which at this time can be a credit card or MobilePay subscription
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QuickpaySubscription implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QuickpaySubscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'identification' => 'string',
        'name' => 'string',
        'type' => '\Membercare\Client\Model\QuickpaySubscriptionType',
        'phone_number' => 'int',
        'last_four_digits' => 'string',
        'expiration_month' => 'int',
        'expiration_year' => 'int',
        'allowed_context' => '\Membercare\Client\Model\ServiceSourceFlag',
        'valid' => 'bool',
        'is_credit_card' => 'bool',
        'is_mobile_pay_subscription' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'identification' => null,
        'name' => null,
        'type' => null,
        'phone_number' => 'int32',
        'last_four_digits' => null,
        'expiration_month' => 'int32',
        'expiration_year' => 'int32',
        'allowed_context' => null,
        'valid' => null,
        'is_credit_card' => null,
        'is_mobile_pay_subscription' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'identification' => 'identification',
        'name' => 'name',
        'type' => 'type',
        'phone_number' => 'phoneNumber',
        'last_four_digits' => 'lastFourDigits',
        'expiration_month' => 'expirationMonth',
        'expiration_year' => 'expirationYear',
        'allowed_context' => 'allowedContext',
        'valid' => 'valid',
        'is_credit_card' => 'isCreditCard',
        'is_mobile_pay_subscription' => 'isMobilePaySubscription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'identification' => 'setIdentification',
        'name' => 'setName',
        'type' => 'setType',
        'phone_number' => 'setPhoneNumber',
        'last_four_digits' => 'setLastFourDigits',
        'expiration_month' => 'setExpirationMonth',
        'expiration_year' => 'setExpirationYear',
        'allowed_context' => 'setAllowedContext',
        'valid' => 'setValid',
        'is_credit_card' => 'setIsCreditCard',
        'is_mobile_pay_subscription' => 'setIsMobilePaySubscription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'identification' => 'getIdentification',
        'name' => 'getName',
        'type' => 'getType',
        'phone_number' => 'getPhoneNumber',
        'last_four_digits' => 'getLastFourDigits',
        'expiration_month' => 'getExpirationMonth',
        'expiration_year' => 'getExpirationYear',
        'allowed_context' => 'getAllowedContext',
        'valid' => 'getValid',
        'is_credit_card' => 'getIsCreditCard',
        'is_mobile_pay_subscription' => 'getIsMobilePaySubscription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['identification'] = isset($data['identification']) ? $data['identification'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['last_four_digits'] = isset($data['last_four_digits']) ? $data['last_four_digits'] : null;
        $this->container['expiration_month'] = isset($data['expiration_month']) ? $data['expiration_month'] : null;
        $this->container['expiration_year'] = isset($data['expiration_year']) ? $data['expiration_year'] : null;
        $this->container['allowed_context'] = isset($data['allowed_context']) ? $data['allowed_context'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['is_credit_card'] = isset($data['is_credit_card']) ? $data['is_credit_card'] : null;
        $this->container['is_mobile_pay_subscription'] = isset($data['is_mobile_pay_subscription']) ? $data['is_mobile_pay_subscription'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets identification
     *
     * @return string
     */
    public function getIdentification()
    {
        return $this->container['identification'];
    }

    /**
     * Sets identification
     *
     * @param string $identification The external Quickpay subscription identifier
     *
     * @return $this
     */
    public function setIdentification($identification)
    {
        $this->container['identification'] = $identification;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The internal name of the Quickpay subscription
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Membercare\Client\Model\QuickpaySubscriptionType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Membercare\Client\Model\QuickpaySubscriptionType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return int
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param int $phone_number The phonenumber of the potential Mobilepay subscription this Quickpay subscription refers to
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets last_four_digits
     *
     * @return string
     */
    public function getLastFourDigits()
    {
        return $this->container['last_four_digits'];
    }

    /**
     * Sets last_four_digits
     *
     * @param string $last_four_digits The last four digits in the potential credit card this Quickpay subscription refers to
     *
     * @return $this
     */
    public function setLastFourDigits($last_four_digits)
    {
        $this->container['last_four_digits'] = $last_four_digits;

        return $this;
    }

    /**
     * Gets expiration_month
     *
     * @return int
     */
    public function getExpirationMonth()
    {
        return $this->container['expiration_month'];
    }

    /**
     * Sets expiration_month
     *
     * @param int $expiration_month Expiration month of the potential credit card this Quickpay subscription refers to
     *
     * @return $this
     */
    public function setExpirationMonth($expiration_month)
    {
        $this->container['expiration_month'] = $expiration_month;

        return $this;
    }

    /**
     * Gets expiration_year
     *
     * @return int
     */
    public function getExpirationYear()
    {
        return $this->container['expiration_year'];
    }

    /**
     * Sets expiration_year
     *
     * @param int $expiration_year Expiration year of the potential credit card this Quickpay subscription refers to
     *
     * @return $this
     */
    public function setExpirationYear($expiration_year)
    {
        $this->container['expiration_year'] = $expiration_year;

        return $this;
    }

    /**
     * Gets allowed_context
     *
     * @return \Membercare\Client\Model\ServiceSourceFlag
     */
    public function getAllowedContext()
    {
        return $this->container['allowed_context'];
    }

    /**
     * Sets allowed_context
     *
     * @param \Membercare\Client\Model\ServiceSourceFlag $allowed_context allowed_context
     *
     * @return $this
     */
    public function setAllowedContext($allowed_context)
    {
        $this->container['allowed_context'] = $allowed_context;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool $valid Is this Quickpay subscription valid?
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets is_credit_card
     *
     * @return bool
     */
    public function getIsCreditCard()
    {
        return $this->container['is_credit_card'];
    }

    /**
     * Sets is_credit_card
     *
     * @param bool $is_credit_card is_credit_card
     *
     * @return $this
     */
    public function setIsCreditCard($is_credit_card)
    {
        $this->container['is_credit_card'] = $is_credit_card;

        return $this;
    }

    /**
     * Gets is_mobile_pay_subscription
     *
     * @return bool
     */
    public function getIsMobilePaySubscription()
    {
        return $this->container['is_mobile_pay_subscription'];
    }

    /**
     * Sets is_mobile_pay_subscription
     *
     * @param bool $is_mobile_pay_subscription is_mobile_pay_subscription
     *
     * @return $this
     */
    public function setIsMobilePaySubscription($is_mobile_pay_subscription)
    {
        $this->container['is_mobile_pay_subscription'] = $is_mobile_pay_subscription;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
