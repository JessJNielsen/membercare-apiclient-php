<?php
/**
 * ParticipantSearchCriteria
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * ParticipantSearchCriteria Class Doc Comment
 *
 * @category Class
 * @description WARNING! this is exposed through webservices - DO NOT MAKE BREAKING CHANGES
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ParticipantSearchCriteria implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ParticipantSearchCriteria';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'internal_id' => 'string',
        'debtor_account_numbers' => 'string[]',
        'include_participating' => 'bool',
        'include_on_waiting_list' => 'bool',
        'include_cancelled' => 'bool',
        'arrangement_starts_after' => '\DateTime',
        'arrangement_starts_before' => '\DateTime',
        'arrangement_ends_after' => '\DateTime',
        'representers_debtor_account_numbers' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'internal_id' => null,
        'debtor_account_numbers' => null,
        'include_participating' => null,
        'include_on_waiting_list' => null,
        'include_cancelled' => null,
        'arrangement_starts_after' => 'date-time',
        'arrangement_starts_before' => 'date-time',
        'arrangement_ends_after' => 'date-time',
        'representers_debtor_account_numbers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'internal_id' => 'internalId',
        'debtor_account_numbers' => 'debtorAccountNumbers',
        'include_participating' => 'includeParticipating',
        'include_on_waiting_list' => 'includeOnWaitingList',
        'include_cancelled' => 'includeCancelled',
        'arrangement_starts_after' => 'arrangementStartsAfter',
        'arrangement_starts_before' => 'arrangementStartsBefore',
        'arrangement_ends_after' => 'arrangementEndsAfter',
        'representers_debtor_account_numbers' => 'representersDebtorAccountNumbers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'internal_id' => 'setInternalId',
        'debtor_account_numbers' => 'setDebtorAccountNumbers',
        'include_participating' => 'setIncludeParticipating',
        'include_on_waiting_list' => 'setIncludeOnWaitingList',
        'include_cancelled' => 'setIncludeCancelled',
        'arrangement_starts_after' => 'setArrangementStartsAfter',
        'arrangement_starts_before' => 'setArrangementStartsBefore',
        'arrangement_ends_after' => 'setArrangementEndsAfter',
        'representers_debtor_account_numbers' => 'setRepresentersDebtorAccountNumbers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'internal_id' => 'getInternalId',
        'debtor_account_numbers' => 'getDebtorAccountNumbers',
        'include_participating' => 'getIncludeParticipating',
        'include_on_waiting_list' => 'getIncludeOnWaitingList',
        'include_cancelled' => 'getIncludeCancelled',
        'arrangement_starts_after' => 'getArrangementStartsAfter',
        'arrangement_starts_before' => 'getArrangementStartsBefore',
        'arrangement_ends_after' => 'getArrangementEndsAfter',
        'representers_debtor_account_numbers' => 'getRepresentersDebtorAccountNumbers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['debtor_account_numbers'] = isset($data['debtor_account_numbers']) ? $data['debtor_account_numbers'] : null;
        $this->container['include_participating'] = isset($data['include_participating']) ? $data['include_participating'] : null;
        $this->container['include_on_waiting_list'] = isset($data['include_on_waiting_list']) ? $data['include_on_waiting_list'] : null;
        $this->container['include_cancelled'] = isset($data['include_cancelled']) ? $data['include_cancelled'] : null;
        $this->container['arrangement_starts_after'] = isset($data['arrangement_starts_after']) ? $data['arrangement_starts_after'] : null;
        $this->container['arrangement_starts_before'] = isset($data['arrangement_starts_before']) ? $data['arrangement_starts_before'] : null;
        $this->container['arrangement_ends_after'] = isset($data['arrangement_ends_after']) ? $data['arrangement_ends_after'] : null;
        $this->container['representers_debtor_account_numbers'] = isset($data['representers_debtor_account_numbers']) ? $data['representers_debtor_account_numbers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets internal_id
     *
     * @return string
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string $internal_id internal_id
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets debtor_account_numbers
     *
     * @return string[]
     */
    public function getDebtorAccountNumbers()
    {
        return $this->container['debtor_account_numbers'];
    }

    /**
     * Sets debtor_account_numbers
     *
     * @param string[] $debtor_account_numbers debtor_account_numbers
     *
     * @return $this
     */
    public function setDebtorAccountNumbers($debtor_account_numbers)
    {
        $this->container['debtor_account_numbers'] = $debtor_account_numbers;

        return $this;
    }

    /**
     * Gets include_participating
     *
     * @return bool
     */
    public function getIncludeParticipating()
    {
        return $this->container['include_participating'];
    }

    /**
     * Sets include_participating
     *
     * @param bool $include_participating include_participating
     *
     * @return $this
     */
    public function setIncludeParticipating($include_participating)
    {
        $this->container['include_participating'] = $include_participating;

        return $this;
    }

    /**
     * Gets include_on_waiting_list
     *
     * @return bool
     */
    public function getIncludeOnWaitingList()
    {
        return $this->container['include_on_waiting_list'];
    }

    /**
     * Sets include_on_waiting_list
     *
     * @param bool $include_on_waiting_list include_on_waiting_list
     *
     * @return $this
     */
    public function setIncludeOnWaitingList($include_on_waiting_list)
    {
        $this->container['include_on_waiting_list'] = $include_on_waiting_list;

        return $this;
    }

    /**
     * Gets include_cancelled
     *
     * @return bool
     */
    public function getIncludeCancelled()
    {
        return $this->container['include_cancelled'];
    }

    /**
     * Sets include_cancelled
     *
     * @param bool $include_cancelled include_cancelled
     *
     * @return $this
     */
    public function setIncludeCancelled($include_cancelled)
    {
        $this->container['include_cancelled'] = $include_cancelled;

        return $this;
    }

    /**
     * Gets arrangement_starts_after
     *
     * @return \DateTime
     */
    public function getArrangementStartsAfter()
    {
        return $this->container['arrangement_starts_after'];
    }

    /**
     * Sets arrangement_starts_after
     *
     * @param \DateTime $arrangement_starts_after arrangement_starts_after
     *
     * @return $this
     */
    public function setArrangementStartsAfter($arrangement_starts_after)
    {
        $this->container['arrangement_starts_after'] = $arrangement_starts_after;

        return $this;
    }

    /**
     * Gets arrangement_starts_before
     *
     * @return \DateTime
     */
    public function getArrangementStartsBefore()
    {
        return $this->container['arrangement_starts_before'];
    }

    /**
     * Sets arrangement_starts_before
     *
     * @param \DateTime $arrangement_starts_before arrangement_starts_before
     *
     * @return $this
     */
    public function setArrangementStartsBefore($arrangement_starts_before)
    {
        $this->container['arrangement_starts_before'] = $arrangement_starts_before;

        return $this;
    }

    /**
     * Gets arrangement_ends_after
     *
     * @return \DateTime
     */
    public function getArrangementEndsAfter()
    {
        return $this->container['arrangement_ends_after'];
    }

    /**
     * Sets arrangement_ends_after
     *
     * @param \DateTime $arrangement_ends_after arrangement_ends_after
     *
     * @return $this
     */
    public function setArrangementEndsAfter($arrangement_ends_after)
    {
        $this->container['arrangement_ends_after'] = $arrangement_ends_after;

        return $this;
    }

    /**
     * Gets representers_debtor_account_numbers
     *
     * @return string[]
     */
    public function getRepresentersDebtorAccountNumbers()
    {
        return $this->container['representers_debtor_account_numbers'];
    }

    /**
     * Sets representers_debtor_account_numbers
     *
     * @param string[] $representers_debtor_account_numbers representers_debtor_account_numbers
     *
     * @return $this
     */
    public function setRepresentersDebtorAccountNumbers($representers_debtor_account_numbers)
    {
        $this->container['representers_debtor_account_numbers'] = $representers_debtor_account_numbers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
