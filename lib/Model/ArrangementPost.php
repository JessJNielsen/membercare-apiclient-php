<?php
/**
 * ArrangementPost
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * ArrangementPost Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArrangementPost implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArrangementPost';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'internal_id' => 'string',
        'name' => 'string',
        'internal_description' => 'string',
        'texts' => '\Membercare\Client\Model\ArrangementText[]',
        'short_description' => 'string',
        'long_description' => 'string',
        'start_date_time' => '\DateTime',
        'end_date_time' => '\DateTime',
        'total_seats' => 'int',
        'minimum_seats' => 'int',
        'budget_seats' => 'int',
        'arrangement_type' => '\Membercare\Client\Model\ArrangementType',
        'payment_option' => '\Membercare\Client\Model\PaymentOption',
        'earliest_enroll_time' => '\DateTime',
        'enroll_before' => '\DateTime',
        'web_enabled' => 'bool',
        'allow_enrollment_to_simultaneous_sessions' => 'bool',
        'based_on_template_id' => 'int',
        'integrate_to_community' => 'bool',
        'income_date' => '\DateTime',
        'allow_invoice_after' => '\DateTime',
        'show_in_calendar' => 'bool',
        'notification_settings' => '\Membercare\Client\Model\NotificationSettings',
        'work_group' => '\Membercare\Client\Model\WorkGroup',
        'finance_dimensions' => '\Membercare\Client\Model\FinanceDimensions',
        'responsible' => '\Membercare\Client\Model\Person',
        'arrangement_area' => '\Membercare\Client\Model\ArrangementArea',
        'arrangement_section' => '\Membercare\Client\Model\ArrangementGroup',
        'arrangement_category' => '\Membercare\Client\Model\ArrangementCategory',
        'arrangement_sub_category' => '\Membercare\Client\Model\ArrangementSubCategory'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'internal_id' => null,
        'name' => null,
        'internal_description' => null,
        'texts' => null,
        'short_description' => null,
        'long_description' => null,
        'start_date_time' => 'date-time',
        'end_date_time' => 'date-time',
        'total_seats' => 'int64',
        'minimum_seats' => 'int64',
        'budget_seats' => 'int64',
        'arrangement_type' => null,
        'payment_option' => null,
        'earliest_enroll_time' => 'date-time',
        'enroll_before' => 'date-time',
        'web_enabled' => null,
        'allow_enrollment_to_simultaneous_sessions' => null,
        'based_on_template_id' => 'int64',
        'integrate_to_community' => null,
        'income_date' => 'date-time',
        'allow_invoice_after' => 'date-time',
        'show_in_calendar' => null,
        'notification_settings' => null,
        'work_group' => null,
        'finance_dimensions' => null,
        'responsible' => null,
        'arrangement_area' => null,
        'arrangement_section' => null,
        'arrangement_category' => null,
        'arrangement_sub_category' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'internal_id' => 'internalId',
        'name' => 'name',
        'internal_description' => 'internalDescription',
        'texts' => 'texts',
        'short_description' => 'shortDescription',
        'long_description' => 'longDescription',
        'start_date_time' => 'startDateTime',
        'end_date_time' => 'endDateTime',
        'total_seats' => 'totalSeats',
        'minimum_seats' => 'minimumSeats',
        'budget_seats' => 'budgetSeats',
        'arrangement_type' => 'arrangementType',
        'payment_option' => 'paymentOption',
        'earliest_enroll_time' => 'earliestEnrollTime',
        'enroll_before' => 'enrollBefore',
        'web_enabled' => 'webEnabled',
        'allow_enrollment_to_simultaneous_sessions' => 'allowEnrollmentToSimultaneousSessions',
        'based_on_template_id' => 'basedOnTemplateId',
        'integrate_to_community' => 'integrateToCommunity',
        'income_date' => 'incomeDate',
        'allow_invoice_after' => 'allowInvoiceAfter',
        'show_in_calendar' => 'showInCalendar',
        'notification_settings' => 'notificationSettings',
        'work_group' => 'workGroup',
        'finance_dimensions' => 'financeDimensions',
        'responsible' => 'responsible',
        'arrangement_area' => 'arrangementArea',
        'arrangement_section' => 'arrangementSection',
        'arrangement_category' => 'arrangementCategory',
        'arrangement_sub_category' => 'arrangementSubCategory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'internal_id' => 'setInternalId',
        'name' => 'setName',
        'internal_description' => 'setInternalDescription',
        'texts' => 'setTexts',
        'short_description' => 'setShortDescription',
        'long_description' => 'setLongDescription',
        'start_date_time' => 'setStartDateTime',
        'end_date_time' => 'setEndDateTime',
        'total_seats' => 'setTotalSeats',
        'minimum_seats' => 'setMinimumSeats',
        'budget_seats' => 'setBudgetSeats',
        'arrangement_type' => 'setArrangementType',
        'payment_option' => 'setPaymentOption',
        'earliest_enroll_time' => 'setEarliestEnrollTime',
        'enroll_before' => 'setEnrollBefore',
        'web_enabled' => 'setWebEnabled',
        'allow_enrollment_to_simultaneous_sessions' => 'setAllowEnrollmentToSimultaneousSessions',
        'based_on_template_id' => 'setBasedOnTemplateId',
        'integrate_to_community' => 'setIntegrateToCommunity',
        'income_date' => 'setIncomeDate',
        'allow_invoice_after' => 'setAllowInvoiceAfter',
        'show_in_calendar' => 'setShowInCalendar',
        'notification_settings' => 'setNotificationSettings',
        'work_group' => 'setWorkGroup',
        'finance_dimensions' => 'setFinanceDimensions',
        'responsible' => 'setResponsible',
        'arrangement_area' => 'setArrangementArea',
        'arrangement_section' => 'setArrangementSection',
        'arrangement_category' => 'setArrangementCategory',
        'arrangement_sub_category' => 'setArrangementSubCategory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'internal_id' => 'getInternalId',
        'name' => 'getName',
        'internal_description' => 'getInternalDescription',
        'texts' => 'getTexts',
        'short_description' => 'getShortDescription',
        'long_description' => 'getLongDescription',
        'start_date_time' => 'getStartDateTime',
        'end_date_time' => 'getEndDateTime',
        'total_seats' => 'getTotalSeats',
        'minimum_seats' => 'getMinimumSeats',
        'budget_seats' => 'getBudgetSeats',
        'arrangement_type' => 'getArrangementType',
        'payment_option' => 'getPaymentOption',
        'earliest_enroll_time' => 'getEarliestEnrollTime',
        'enroll_before' => 'getEnrollBefore',
        'web_enabled' => 'getWebEnabled',
        'allow_enrollment_to_simultaneous_sessions' => 'getAllowEnrollmentToSimultaneousSessions',
        'based_on_template_id' => 'getBasedOnTemplateId',
        'integrate_to_community' => 'getIntegrateToCommunity',
        'income_date' => 'getIncomeDate',
        'allow_invoice_after' => 'getAllowInvoiceAfter',
        'show_in_calendar' => 'getShowInCalendar',
        'notification_settings' => 'getNotificationSettings',
        'work_group' => 'getWorkGroup',
        'finance_dimensions' => 'getFinanceDimensions',
        'responsible' => 'getResponsible',
        'arrangement_area' => 'getArrangementArea',
        'arrangement_section' => 'getArrangementSection',
        'arrangement_category' => 'getArrangementCategory',
        'arrangement_sub_category' => 'getArrangementSubCategory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['internal_description'] = isset($data['internal_description']) ? $data['internal_description'] : null;
        $this->container['texts'] = isset($data['texts']) ? $data['texts'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['start_date_time'] = isset($data['start_date_time']) ? $data['start_date_time'] : null;
        $this->container['end_date_time'] = isset($data['end_date_time']) ? $data['end_date_time'] : null;
        $this->container['total_seats'] = isset($data['total_seats']) ? $data['total_seats'] : null;
        $this->container['minimum_seats'] = isset($data['minimum_seats']) ? $data['minimum_seats'] : null;
        $this->container['budget_seats'] = isset($data['budget_seats']) ? $data['budget_seats'] : null;
        $this->container['arrangement_type'] = isset($data['arrangement_type']) ? $data['arrangement_type'] : null;
        $this->container['payment_option'] = isset($data['payment_option']) ? $data['payment_option'] : null;
        $this->container['earliest_enroll_time'] = isset($data['earliest_enroll_time']) ? $data['earliest_enroll_time'] : null;
        $this->container['enroll_before'] = isset($data['enroll_before']) ? $data['enroll_before'] : null;
        $this->container['web_enabled'] = isset($data['web_enabled']) ? $data['web_enabled'] : null;
        $this->container['allow_enrollment_to_simultaneous_sessions'] = isset($data['allow_enrollment_to_simultaneous_sessions']) ? $data['allow_enrollment_to_simultaneous_sessions'] : null;
        $this->container['based_on_template_id'] = isset($data['based_on_template_id']) ? $data['based_on_template_id'] : null;
        $this->container['integrate_to_community'] = isset($data['integrate_to_community']) ? $data['integrate_to_community'] : null;
        $this->container['income_date'] = isset($data['income_date']) ? $data['income_date'] : null;
        $this->container['allow_invoice_after'] = isset($data['allow_invoice_after']) ? $data['allow_invoice_after'] : null;
        $this->container['show_in_calendar'] = isset($data['show_in_calendar']) ? $data['show_in_calendar'] : null;
        $this->container['notification_settings'] = isset($data['notification_settings']) ? $data['notification_settings'] : null;
        $this->container['work_group'] = isset($data['work_group']) ? $data['work_group'] : null;
        $this->container['finance_dimensions'] = isset($data['finance_dimensions']) ? $data['finance_dimensions'] : null;
        $this->container['responsible'] = isset($data['responsible']) ? $data['responsible'] : null;
        $this->container['arrangement_area'] = isset($data['arrangement_area']) ? $data['arrangement_area'] : null;
        $this->container['arrangement_section'] = isset($data['arrangement_section']) ? $data['arrangement_section'] : null;
        $this->container['arrangement_category'] = isset($data['arrangement_category']) ? $data['arrangement_category'] : null;
        $this->container['arrangement_sub_category'] = isset($data['arrangement_sub_category']) ? $data['arrangement_sub_category'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets internal_id
     *
     * @return string
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string $internal_id The arrangement identification.  The same value is available in Membercare's user interface.
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The Name of the arrangement
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets internal_description
     *
     * @return string
     */
    public function getInternalDescription()
    {
        return $this->container['internal_description'];
    }

    /**
     * Sets internal_description
     *
     * @param string $internal_description internal_description
     *
     * @return $this
     */
    public function setInternalDescription($internal_description)
    {
        $this->container['internal_description'] = $internal_description;

        return $this;
    }

    /**
     * Gets texts
     *
     * @return \Membercare\Client\Model\ArrangementText[]
     */
    public function getTexts()
    {
        return $this->container['texts'];
    }

    /**
     * Sets texts
     *
     * @param \Membercare\Client\Model\ArrangementText[] $texts Determines which type of arrangement text it is.  1 = ShortDescription, 2 = LongDescription, 3 = Syllabus, 4 = Program.
     *
     * @return $this
     */
    public function setTexts($texts)
    {
        $this->container['texts'] = $texts;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description Short description of the arrangement as html.
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string $long_description Long description of the arrangement as html.
     *
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets start_date_time
     *
     * @return \DateTime
     */
    public function getStartDateTime()
    {
        return $this->container['start_date_time'];
    }

    /**
     * Sets start_date_time
     *
     * @param \DateTime $start_date_time The start datetime of the arrangement.
     *
     * @return $this
     */
    public function setStartDateTime($start_date_time)
    {
        $this->container['start_date_time'] = $start_date_time;

        return $this;
    }

    /**
     * Gets end_date_time
     *
     * @return \DateTime
     */
    public function getEndDateTime()
    {
        return $this->container['end_date_time'];
    }

    /**
     * Sets end_date_time
     *
     * @param \DateTime $end_date_time The end datetime of the arrangment.
     *
     * @return $this
     */
    public function setEndDateTime($end_date_time)
    {
        $this->container['end_date_time'] = $end_date_time;

        return $this;
    }

    /**
     * Gets total_seats
     *
     * @return int
     */
    public function getTotalSeats()
    {
        return $this->container['total_seats'];
    }

    /**
     * Sets total_seats
     *
     * @param int $total_seats Total nomber of seats
     *
     * @return $this
     */
    public function setTotalSeats($total_seats)
    {
        $this->container['total_seats'] = $total_seats;

        return $this;
    }

    /**
     * Gets minimum_seats
     *
     * @return int
     */
    public function getMinimumSeats()
    {
        return $this->container['minimum_seats'];
    }

    /**
     * Sets minimum_seats
     *
     * @param int $minimum_seats MinParticipants
     *
     * @return $this
     */
    public function setMinimumSeats($minimum_seats)
    {
        $this->container['minimum_seats'] = $minimum_seats;

        return $this;
    }

    /**
     * Gets budget_seats
     *
     * @return int
     */
    public function getBudgetSeats()
    {
        return $this->container['budget_seats'];
    }

    /**
     * Sets budget_seats
     *
     * @param int $budget_seats BudgetParticipants
     *
     * @return $this
     */
    public function setBudgetSeats($budget_seats)
    {
        $this->container['budget_seats'] = $budget_seats;

        return $this;
    }

    /**
     * Gets arrangement_type
     *
     * @return \Membercare\Client\Model\ArrangementType
     */
    public function getArrangementType()
    {
        return $this->container['arrangement_type'];
    }

    /**
     * Sets arrangement_type
     *
     * @param \Membercare\Client\Model\ArrangementType $arrangement_type arrangement_type
     *
     * @return $this
     */
    public function setArrangementType($arrangement_type)
    {
        $this->container['arrangement_type'] = $arrangement_type;

        return $this;
    }

    /**
     * Gets payment_option
     *
     * @return \Membercare\Client\Model\PaymentOption
     */
    public function getPaymentOption()
    {
        return $this->container['payment_option'];
    }

    /**
     * Sets payment_option
     *
     * @param \Membercare\Client\Model\PaymentOption $payment_option payment_option
     *
     * @return $this
     */
    public function setPaymentOption($payment_option)
    {
        $this->container['payment_option'] = $payment_option;

        return $this;
    }

    /**
     * Gets earliest_enroll_time
     *
     * @return \DateTime
     */
    public function getEarliestEnrollTime()
    {
        return $this->container['earliest_enroll_time'];
    }

    /**
     * Sets earliest_enroll_time
     *
     * @param \DateTime $earliest_enroll_time The earliest time where it is possible to enroll the arrangement
     *
     * @return $this
     */
    public function setEarliestEnrollTime($earliest_enroll_time)
    {
        $this->container['earliest_enroll_time'] = $earliest_enroll_time;

        return $this;
    }

    /**
     * Gets enroll_before
     *
     * @return \DateTime
     */
    public function getEnrollBefore()
    {
        return $this->container['enroll_before'];
    }

    /**
     * Sets enroll_before
     *
     * @param \DateTime $enroll_before The latest date where it is possible to enroll the arrangement
     *
     * @return $this
     */
    public function setEnrollBefore($enroll_before)
    {
        $this->container['enroll_before'] = $enroll_before;

        return $this;
    }

    /**
     * Gets web_enabled
     *
     * @return bool
     */
    public function getWebEnabled()
    {
        return $this->container['web_enabled'];
    }

    /**
     * Sets web_enabled
     *
     * @param bool $web_enabled Indicates wheter or not this arrangement should be shown on web
     *
     * @return $this
     */
    public function setWebEnabled($web_enabled)
    {
        $this->container['web_enabled'] = $web_enabled;

        return $this;
    }

    /**
     * Gets allow_enrollment_to_simultaneous_sessions
     *
     * @return bool
     */
    public function getAllowEnrollmentToSimultaneousSessions()
    {
        return $this->container['allow_enrollment_to_simultaneous_sessions'];
    }

    /**
     * Sets allow_enrollment_to_simultaneous_sessions
     *
     * @param bool $allow_enrollment_to_simultaneous_sessions Indicates whether or not a participant is allowed to participate in sessions that overlap on time  Only relevant for Conference.
     *
     * @return $this
     */
    public function setAllowEnrollmentToSimultaneousSessions($allow_enrollment_to_simultaneous_sessions)
    {
        $this->container['allow_enrollment_to_simultaneous_sessions'] = $allow_enrollment_to_simultaneous_sessions;

        return $this;
    }

    /**
     * Gets based_on_template_id
     *
     * @return int
     */
    public function getBasedOnTemplateId()
    {
        return $this->container['based_on_template_id'];
    }

    /**
     * Sets based_on_template_id
     *
     * @param int $based_on_template_id The template the course was based on when created
     *
     * @return $this
     */
    public function setBasedOnTemplateId($based_on_template_id)
    {
        $this->container['based_on_template_id'] = $based_on_template_id;

        return $this;
    }

    /**
     * Gets integrate_to_community
     *
     * @return bool
     */
    public function getIntegrateToCommunity()
    {
        return $this->container['integrate_to_community'];
    }

    /**
     * Sets integrate_to_community
     *
     * @param bool $integrate_to_community IntegrateToCommunity
     *
     * @return $this
     */
    public function setIntegrateToCommunity($integrate_to_community)
    {
        $this->container['integrate_to_community'] = $integrate_to_community;

        return $this;
    }

    /**
     * Gets income_date
     *
     * @return \DateTime
     */
    public function getIncomeDate()
    {
        return $this->container['income_date'];
    }

    /**
     * Sets income_date
     *
     * @param \DateTime $income_date IncomeDate
     *
     * @return $this
     */
    public function setIncomeDate($income_date)
    {
        $this->container['income_date'] = $income_date;

        return $this;
    }

    /**
     * Gets allow_invoice_after
     *
     * @return \DateTime
     */
    public function getAllowInvoiceAfter()
    {
        return $this->container['allow_invoice_after'];
    }

    /**
     * Sets allow_invoice_after
     *
     * @param \DateTime $allow_invoice_after AllowInvoiceAfter
     *
     * @return $this
     */
    public function setAllowInvoiceAfter($allow_invoice_after)
    {
        $this->container['allow_invoice_after'] = $allow_invoice_after;

        return $this;
    }

    /**
     * Gets show_in_calendar
     *
     * @return bool
     */
    public function getShowInCalendar()
    {
        return $this->container['show_in_calendar'];
    }

    /**
     * Sets show_in_calendar
     *
     * @param bool $show_in_calendar ShowInCalendar
     *
     * @return $this
     */
    public function setShowInCalendar($show_in_calendar)
    {
        $this->container['show_in_calendar'] = $show_in_calendar;

        return $this;
    }

    /**
     * Gets notification_settings
     *
     * @return \Membercare\Client\Model\NotificationSettings
     */
    public function getNotificationSettings()
    {
        return $this->container['notification_settings'];
    }

    /**
     * Sets notification_settings
     *
     * @param \Membercare\Client\Model\NotificationSettings $notification_settings notification_settings
     *
     * @return $this
     */
    public function setNotificationSettings($notification_settings)
    {
        $this->container['notification_settings'] = $notification_settings;

        return $this;
    }

    /**
     * Gets work_group
     *
     * @return \Membercare\Client\Model\WorkGroup
     */
    public function getWorkGroup()
    {
        return $this->container['work_group'];
    }

    /**
     * Sets work_group
     *
     * @param \Membercare\Client\Model\WorkGroup $work_group work_group
     *
     * @return $this
     */
    public function setWorkGroup($work_group)
    {
        $this->container['work_group'] = $work_group;

        return $this;
    }

    /**
     * Gets finance_dimensions
     *
     * @return \Membercare\Client\Model\FinanceDimensions
     */
    public function getFinanceDimensions()
    {
        return $this->container['finance_dimensions'];
    }

    /**
     * Sets finance_dimensions
     *
     * @param \Membercare\Client\Model\FinanceDimensions $finance_dimensions finance_dimensions
     *
     * @return $this
     */
    public function setFinanceDimensions($finance_dimensions)
    {
        $this->container['finance_dimensions'] = $finance_dimensions;

        return $this;
    }

    /**
     * Gets responsible
     *
     * @return \Membercare\Client\Model\Person
     */
    public function getResponsible()
    {
        return $this->container['responsible'];
    }

    /**
     * Sets responsible
     *
     * @param \Membercare\Client\Model\Person $responsible responsible
     *
     * @return $this
     */
    public function setResponsible($responsible)
    {
        $this->container['responsible'] = $responsible;

        return $this;
    }

    /**
     * Gets arrangement_area
     *
     * @return \Membercare\Client\Model\ArrangementArea
     */
    public function getArrangementArea()
    {
        return $this->container['arrangement_area'];
    }

    /**
     * Sets arrangement_area
     *
     * @param \Membercare\Client\Model\ArrangementArea $arrangement_area arrangement_area
     *
     * @return $this
     */
    public function setArrangementArea($arrangement_area)
    {
        $this->container['arrangement_area'] = $arrangement_area;

        return $this;
    }

    /**
     * Gets arrangement_section
     *
     * @return \Membercare\Client\Model\ArrangementGroup
     */
    public function getArrangementSection()
    {
        return $this->container['arrangement_section'];
    }

    /**
     * Sets arrangement_section
     *
     * @param \Membercare\Client\Model\ArrangementGroup $arrangement_section arrangement_section
     *
     * @return $this
     */
    public function setArrangementSection($arrangement_section)
    {
        $this->container['arrangement_section'] = $arrangement_section;

        return $this;
    }

    /**
     * Gets arrangement_category
     *
     * @return \Membercare\Client\Model\ArrangementCategory
     */
    public function getArrangementCategory()
    {
        return $this->container['arrangement_category'];
    }

    /**
     * Sets arrangement_category
     *
     * @param \Membercare\Client\Model\ArrangementCategory $arrangement_category arrangement_category
     *
     * @return $this
     */
    public function setArrangementCategory($arrangement_category)
    {
        $this->container['arrangement_category'] = $arrangement_category;

        return $this;
    }

    /**
     * Gets arrangement_sub_category
     *
     * @return \Membercare\Client\Model\ArrangementSubCategory
     */
    public function getArrangementSubCategory()
    {
        return $this->container['arrangement_sub_category'];
    }

    /**
     * Sets arrangement_sub_category
     *
     * @param \Membercare\Client\Model\ArrangementSubCategory $arrangement_sub_category arrangement_sub_category
     *
     * @return $this
     */
    public function setArrangementSubCategory($arrangement_sub_category)
    {
        $this->container['arrangement_sub_category'] = $arrangement_sub_category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
