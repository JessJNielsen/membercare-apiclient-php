<?php
/**
 * SubscriptionDefinitionPurchase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * SubscriptionDefinitionPurchase Class Doc Comment
 *
 * @category Class
 * @description Representation of a subscription definition purchase for exposure in the WebApi
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionDefinitionPurchase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionDefinitionPurchase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'subscription_definitions' => '\Membercare\Client\Model\SubscriptionDefinition[]',
        'payment' => '\Membercare\Client\Model\Payment',
        'recurring_payment_identification' => 'string',
        'address_rule' => '\Membercare\Client\Model\AddressRule',
        'make_recurring_payment' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'subscription_definitions' => null,
        'payment' => null,
        'recurring_payment_identification' => null,
        'address_rule' => null,
        'make_recurring_payment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'subscription_definitions' => 'subscriptionDefinitions',
        'payment' => 'payment',
        'recurring_payment_identification' => 'recurringPaymentIdentification',
        'address_rule' => 'addressRule',
        'make_recurring_payment' => 'makeRecurringPayment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'subscription_definitions' => 'setSubscriptionDefinitions',
        'payment' => 'setPayment',
        'recurring_payment_identification' => 'setRecurringPaymentIdentification',
        'address_rule' => 'setAddressRule',
        'make_recurring_payment' => 'setMakeRecurringPayment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'subscription_definitions' => 'getSubscriptionDefinitions',
        'payment' => 'getPayment',
        'recurring_payment_identification' => 'getRecurringPaymentIdentification',
        'address_rule' => 'getAddressRule',
        'make_recurring_payment' => 'getMakeRecurringPayment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['subscription_definitions'] = isset($data['subscription_definitions']) ? $data['subscription_definitions'] : null;
        $this->container['payment'] = isset($data['payment']) ? $data['payment'] : null;
        $this->container['recurring_payment_identification'] = isset($data['recurring_payment_identification']) ? $data['recurring_payment_identification'] : null;
        $this->container['address_rule'] = isset($data['address_rule']) ? $data['address_rule'] : null;
        $this->container['make_recurring_payment'] = isset($data['make_recurring_payment']) ? $data['make_recurring_payment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets subscription_definitions
     *
     * @return \Membercare\Client\Model\SubscriptionDefinition[]
     */
    public function getSubscriptionDefinitions()
    {
        return $this->container['subscription_definitions'];
    }

    /**
     * Sets subscription_definitions
     *
     * @param \Membercare\Client\Model\SubscriptionDefinition[] $subscription_definitions A list of subscription definition to purchase
     *
     * @return $this
     */
    public function setSubscriptionDefinitions($subscription_definitions)
    {
        $this->container['subscription_definitions'] = $subscription_definitions;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \Membercare\Client\Model\Payment
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \Membercare\Client\Model\Payment $payment payment
     *
     * @return $this
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets recurring_payment_identification
     *
     * @return string
     */
    public function getRecurringPaymentIdentification()
    {
        return $this->container['recurring_payment_identification'];
    }

    /**
     * Sets recurring_payment_identification
     *
     * @param string $recurring_payment_identification Used for storing credit card identification for automated recurring payments
     *
     * @return $this
     */
    public function setRecurringPaymentIdentification($recurring_payment_identification)
    {
        $this->container['recurring_payment_identification'] = $recurring_payment_identification;

        return $this;
    }

    /**
     * Gets address_rule
     *
     * @return \Membercare\Client\Model\AddressRule
     */
    public function getAddressRule()
    {
        return $this->container['address_rule'];
    }

    /**
     * Sets address_rule
     *
     * @param \Membercare\Client\Model\AddressRule $address_rule address_rule
     *
     * @return $this
     */
    public function setAddressRule($address_rule)
    {
        $this->container['address_rule'] = $address_rule;

        return $this;
    }

    /**
     * Gets make_recurring_payment
     *
     * @return bool
     */
    public function getMakeRecurringPayment()
    {
        return $this->container['make_recurring_payment'];
    }

    /**
     * Sets make_recurring_payment
     *
     * @param bool $make_recurring_payment Set this if a recurring payment should be made in Quickpay
     *
     * @return $this
     */
    public function setMakeRecurringPayment($make_recurring_payment)
    {
        $this->container['make_recurring_payment'] = $make_recurring_payment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
