<?php
/**
 * Module
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * Module Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Module implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Module';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assembly' => '\Membercare\Client\Model\Assembly',
        'fully_qualified_name' => 'string',
        'name' => 'string',
        'md_stream_version' => 'int',
        'module_version_id' => 'string',
        'scope_name' => 'string',
        'module_handle' => '\Membercare\Client\Model\ModuleHandle',
        'custom_attributes' => '\Membercare\Client\Model\CustomAttributeData[]',
        'metadata_token' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'assembly' => null,
        'fully_qualified_name' => null,
        'name' => null,
        'md_stream_version' => 'int32',
        'module_version_id' => 'uuid',
        'scope_name' => null,
        'module_handle' => null,
        'custom_attributes' => null,
        'metadata_token' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assembly' => 'assembly',
        'fully_qualified_name' => 'fullyQualifiedName',
        'name' => 'name',
        'md_stream_version' => 'mdStreamVersion',
        'module_version_id' => 'moduleVersionId',
        'scope_name' => 'scopeName',
        'module_handle' => 'moduleHandle',
        'custom_attributes' => 'customAttributes',
        'metadata_token' => 'metadataToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assembly' => 'setAssembly',
        'fully_qualified_name' => 'setFullyQualifiedName',
        'name' => 'setName',
        'md_stream_version' => 'setMdStreamVersion',
        'module_version_id' => 'setModuleVersionId',
        'scope_name' => 'setScopeName',
        'module_handle' => 'setModuleHandle',
        'custom_attributes' => 'setCustomAttributes',
        'metadata_token' => 'setMetadataToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assembly' => 'getAssembly',
        'fully_qualified_name' => 'getFullyQualifiedName',
        'name' => 'getName',
        'md_stream_version' => 'getMdStreamVersion',
        'module_version_id' => 'getModuleVersionId',
        'scope_name' => 'getScopeName',
        'module_handle' => 'getModuleHandle',
        'custom_attributes' => 'getCustomAttributes',
        'metadata_token' => 'getMetadataToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assembly'] = isset($data['assembly']) ? $data['assembly'] : null;
        $this->container['fully_qualified_name'] = isset($data['fully_qualified_name']) ? $data['fully_qualified_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['md_stream_version'] = isset($data['md_stream_version']) ? $data['md_stream_version'] : null;
        $this->container['module_version_id'] = isset($data['module_version_id']) ? $data['module_version_id'] : null;
        $this->container['scope_name'] = isset($data['scope_name']) ? $data['scope_name'] : null;
        $this->container['module_handle'] = isset($data['module_handle']) ? $data['module_handle'] : null;
        $this->container['custom_attributes'] = isset($data['custom_attributes']) ? $data['custom_attributes'] : null;
        $this->container['metadata_token'] = isset($data['metadata_token']) ? $data['metadata_token'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assembly
     *
     * @return \Membercare\Client\Model\Assembly
     */
    public function getAssembly()
    {
        return $this->container['assembly'];
    }

    /**
     * Sets assembly
     *
     * @param \Membercare\Client\Model\Assembly $assembly assembly
     *
     * @return $this
     */
    public function setAssembly($assembly)
    {
        $this->container['assembly'] = $assembly;

        return $this;
    }

    /**
     * Gets fully_qualified_name
     *
     * @return string
     */
    public function getFullyQualifiedName()
    {
        return $this->container['fully_qualified_name'];
    }

    /**
     * Sets fully_qualified_name
     *
     * @param string $fully_qualified_name fully_qualified_name
     *
     * @return $this
     */
    public function setFullyQualifiedName($fully_qualified_name)
    {
        $this->container['fully_qualified_name'] = $fully_qualified_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets md_stream_version
     *
     * @return int
     */
    public function getMdStreamVersion()
    {
        return $this->container['md_stream_version'];
    }

    /**
     * Sets md_stream_version
     *
     * @param int $md_stream_version md_stream_version
     *
     * @return $this
     */
    public function setMdStreamVersion($md_stream_version)
    {
        $this->container['md_stream_version'] = $md_stream_version;

        return $this;
    }

    /**
     * Gets module_version_id
     *
     * @return string
     */
    public function getModuleVersionId()
    {
        return $this->container['module_version_id'];
    }

    /**
     * Sets module_version_id
     *
     * @param string $module_version_id module_version_id
     *
     * @return $this
     */
    public function setModuleVersionId($module_version_id)
    {
        $this->container['module_version_id'] = $module_version_id;

        return $this;
    }

    /**
     * Gets scope_name
     *
     * @return string
     */
    public function getScopeName()
    {
        return $this->container['scope_name'];
    }

    /**
     * Sets scope_name
     *
     * @param string $scope_name scope_name
     *
     * @return $this
     */
    public function setScopeName($scope_name)
    {
        $this->container['scope_name'] = $scope_name;

        return $this;
    }

    /**
     * Gets module_handle
     *
     * @return \Membercare\Client\Model\ModuleHandle
     */
    public function getModuleHandle()
    {
        return $this->container['module_handle'];
    }

    /**
     * Sets module_handle
     *
     * @param \Membercare\Client\Model\ModuleHandle $module_handle module_handle
     *
     * @return $this
     */
    public function setModuleHandle($module_handle)
    {
        $this->container['module_handle'] = $module_handle;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \Membercare\Client\Model\CustomAttributeData[]
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \Membercare\Client\Model\CustomAttributeData[] $custom_attributes custom_attributes
     *
     * @return $this
     */
    public function setCustomAttributes($custom_attributes)
    {
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets metadata_token
     *
     * @return int
     */
    public function getMetadataToken()
    {
        return $this->container['metadata_token'];
    }

    /**
     * Sets metadata_token
     *
     * @param int $metadata_token metadata_token
     *
     * @return $this
     */
    public function setMetadataToken($metadata_token)
    {
        $this->container['metadata_token'] = $metadata_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
