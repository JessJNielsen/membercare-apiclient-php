<?php
/**
 * Arrangement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Model;

use \ArrayAccess;
use \Membercare\Client\ObjectSerializer;

/**
 * Arrangement Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Arrangement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Arrangement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'internal_id' => 'string',
        'name' => 'string',
        'internal_description' => 'string',
        'short_description' => 'string',
        'long_description' => 'string',
        'start_date_time' => '\DateTime',
        'end_date_time' => '\DateTime',
        'empty_seats' => 'int',
        'total_seats' => 'int',
        'minimum_seats' => 'int',
        'budget_seats' => 'int',
        'arrangement_type' => '\Membercare\Client\Model\ArrangementType',
        'payment_option' => '\Membercare\Client\Model\PaymentOption',
        'earliest_enroll_time' => '\DateTime',
        'enroll_before' => '\DateTime',
        'web_enabled' => 'bool',
        'allow_enrollment_to_simultaneous_sessions' => 'bool',
        'based_on_arragement_template_id' => 'int',
        'cancellation_date' => '\DateTime',
        'integrate_to_community' => 'bool',
        'income_date' => '\DateTime',
        'allow_invoice_after' => '\DateTime',
        'show_in_calendar' => 'bool',
        'for_invitees_only' => 'bool',
        'notification_settings' => '\Membercare\Client\Model\NotificationSettings',
        'cancellation_reason' => '\Membercare\Client\Model\CancellationReason',
        'work_group' => '\Membercare\Client\Model\WorkGroup',
        'module_info' => '\Membercare\Client\Model\EventModuleInfo',
        'finance_dimensions' => '\Membercare\Client\Model\FinanceDimensions',
        'responsible' => '\Membercare\Client\Model\Person',
        'coursetype' => 'string',
        'coursesection' => 'string',
        'coursecategory' => 'string',
        'coursesubcategory' => 'string',
        'category_id' => 'int',
        'sub_category_id' => 'int',
        'area_id' => 'int',
        'section_id' => 'int',
        'categories' => '\Membercare\Client\Model\ArrangementCategory[]',
        'sub_categories' => '\Membercare\Client\Model\ArrangementSubCategory[]',
        'groups' => '\Membercare\Client\Model\ArrangementGroup[]',
        'areas' => '\Membercare\Client\Model\ArrangementArea[]',
        'organizations' => '\Membercare\Client\Model\SimpleOrganization[]',
        'crew' => '\Membercare\Client\Model\EventCrew[]',
        'participants' => '\Membercare\Client\Model\Participant[]',
        'hotels' => '\Membercare\Client\Model\Hotel[]',
        'places' => '\Membercare\Client\Model\Place[]',
        'custom_field_values' => '\Membercare\Client\Model\CustomFieldValue[]',
        'allowed_participant_categories' => '\Membercare\Client\Model\AllowedParticipantCategory[]',
        'sessions' => '\Membercare\Client\Model\Session[]',
        'texts' => '\Membercare\Client\Model\ArrangementText[]',
        'service_set' => '\Membercare\Client\Model\ServiceSet',
        'earliest_participant_list_view_date_time' => '\DateTime',
        'last_participant_list_view_date_time' => '\DateTime',
        'cancel_signup_before_date_time' => '\DateTime',
        'require_service_on_enroll' => 'bool',
        'require_session_on_enroll' => 'bool',
        'questions_for_enrollment' => '\Membercare\Client\Model\QuestionForEnrollment[]',
        'automatic_confirmation' => 'bool',
        'teachers' => '\Membercare\Client\Model\Teacher[]',
        'questions_for_evaluation' => '\Membercare\Client\Model\Question[]',
        'evaluation_opens_at' => '\DateTime',
        'evaluation_closes_at' => '\DateTime',
        'grade_category' => '\Membercare\Client\Model\GradeCategory',
        'recurring_arrangement' => '\Membercare\Client\Model\RecurringArrangement',
        'external_identification' => 'string',
        'external_link' => 'string',
        'external_course_provider' => '\Membercare\Client\Model\ExternalCourseProvider'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'internal_id' => null,
        'name' => null,
        'internal_description' => null,
        'short_description' => null,
        'long_description' => null,
        'start_date_time' => 'date-time',
        'end_date_time' => 'date-time',
        'empty_seats' => 'int64',
        'total_seats' => 'int64',
        'minimum_seats' => 'int64',
        'budget_seats' => 'int64',
        'arrangement_type' => null,
        'payment_option' => null,
        'earliest_enroll_time' => 'date-time',
        'enroll_before' => 'date-time',
        'web_enabled' => null,
        'allow_enrollment_to_simultaneous_sessions' => null,
        'based_on_arragement_template_id' => 'int64',
        'cancellation_date' => 'date-time',
        'integrate_to_community' => null,
        'income_date' => 'date-time',
        'allow_invoice_after' => 'date-time',
        'show_in_calendar' => null,
        'for_invitees_only' => null,
        'notification_settings' => null,
        'cancellation_reason' => null,
        'work_group' => null,
        'module_info' => null,
        'finance_dimensions' => null,
        'responsible' => null,
        'coursetype' => null,
        'coursesection' => null,
        'coursecategory' => null,
        'coursesubcategory' => null,
        'category_id' => 'int64',
        'sub_category_id' => 'int64',
        'area_id' => 'int64',
        'section_id' => 'int64',
        'categories' => null,
        'sub_categories' => null,
        'groups' => null,
        'areas' => null,
        'organizations' => null,
        'crew' => null,
        'participants' => null,
        'hotels' => null,
        'places' => null,
        'custom_field_values' => null,
        'allowed_participant_categories' => null,
        'sessions' => null,
        'texts' => null,
        'service_set' => null,
        'earliest_participant_list_view_date_time' => 'date-time',
        'last_participant_list_view_date_time' => 'date-time',
        'cancel_signup_before_date_time' => 'date-time',
        'require_service_on_enroll' => null,
        'require_session_on_enroll' => null,
        'questions_for_enrollment' => null,
        'automatic_confirmation' => null,
        'teachers' => null,
        'questions_for_evaluation' => null,
        'evaluation_opens_at' => 'date-time',
        'evaluation_closes_at' => 'date-time',
        'grade_category' => null,
        'recurring_arrangement' => null,
        'external_identification' => null,
        'external_link' => null,
        'external_course_provider' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'internal_id' => 'internalId',
        'name' => 'name',
        'internal_description' => 'internalDescription',
        'short_description' => 'shortDescription',
        'long_description' => 'longDescription',
        'start_date_time' => 'startDateTime',
        'end_date_time' => 'endDateTime',
        'empty_seats' => 'emptySeats',
        'total_seats' => 'totalSeats',
        'minimum_seats' => 'minimumSeats',
        'budget_seats' => 'budgetSeats',
        'arrangement_type' => 'arrangementType',
        'payment_option' => 'paymentOption',
        'earliest_enroll_time' => 'earliestEnrollTime',
        'enroll_before' => 'enrollBefore',
        'web_enabled' => 'webEnabled',
        'allow_enrollment_to_simultaneous_sessions' => 'allowEnrollmentToSimultaneousSessions',
        'based_on_arragement_template_id' => 'basedOnArragementTemplateId',
        'cancellation_date' => 'cancellationDate',
        'integrate_to_community' => 'integrateToCommunity',
        'income_date' => 'incomeDate',
        'allow_invoice_after' => 'allowInvoiceAfter',
        'show_in_calendar' => 'showInCalendar',
        'for_invitees_only' => 'forInviteesOnly',
        'notification_settings' => 'notificationSettings',
        'cancellation_reason' => 'cancellationReason',
        'work_group' => 'workGroup',
        'module_info' => 'moduleInfo',
        'finance_dimensions' => 'financeDimensions',
        'responsible' => 'responsible',
        'coursetype' => 'coursetype',
        'coursesection' => 'coursesection',
        'coursecategory' => 'coursecategory',
        'coursesubcategory' => 'coursesubcategory',
        'category_id' => 'categoryId',
        'sub_category_id' => 'subCategoryId',
        'area_id' => 'areaId',
        'section_id' => 'sectionId',
        'categories' => 'categories',
        'sub_categories' => 'subCategories',
        'groups' => 'groups',
        'areas' => 'areas',
        'organizations' => 'organizations',
        'crew' => 'crew',
        'participants' => 'participants',
        'hotels' => 'hotels',
        'places' => 'places',
        'custom_field_values' => 'customFieldValues',
        'allowed_participant_categories' => 'allowedParticipantCategories',
        'sessions' => 'sessions',
        'texts' => 'texts',
        'service_set' => 'serviceSet',
        'earliest_participant_list_view_date_time' => 'earliestParticipantListViewDateTime',
        'last_participant_list_view_date_time' => 'lastParticipantListViewDateTime',
        'cancel_signup_before_date_time' => 'cancelSignupBeforeDateTime',
        'require_service_on_enroll' => 'requireServiceOnEnroll',
        'require_session_on_enroll' => 'requireSessionOnEnroll',
        'questions_for_enrollment' => 'questionsForEnrollment',
        'automatic_confirmation' => 'automaticConfirmation',
        'teachers' => 'teachers',
        'questions_for_evaluation' => 'questionsForEvaluation',
        'evaluation_opens_at' => 'evaluationOpensAt',
        'evaluation_closes_at' => 'evaluationClosesAt',
        'grade_category' => 'gradeCategory',
        'recurring_arrangement' => 'recurringArrangement',
        'external_identification' => 'externalIdentification',
        'external_link' => 'externalLink',
        'external_course_provider' => 'externalCourseProvider'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'internal_id' => 'setInternalId',
        'name' => 'setName',
        'internal_description' => 'setInternalDescription',
        'short_description' => 'setShortDescription',
        'long_description' => 'setLongDescription',
        'start_date_time' => 'setStartDateTime',
        'end_date_time' => 'setEndDateTime',
        'empty_seats' => 'setEmptySeats',
        'total_seats' => 'setTotalSeats',
        'minimum_seats' => 'setMinimumSeats',
        'budget_seats' => 'setBudgetSeats',
        'arrangement_type' => 'setArrangementType',
        'payment_option' => 'setPaymentOption',
        'earliest_enroll_time' => 'setEarliestEnrollTime',
        'enroll_before' => 'setEnrollBefore',
        'web_enabled' => 'setWebEnabled',
        'allow_enrollment_to_simultaneous_sessions' => 'setAllowEnrollmentToSimultaneousSessions',
        'based_on_arragement_template_id' => 'setBasedOnArragementTemplateId',
        'cancellation_date' => 'setCancellationDate',
        'integrate_to_community' => 'setIntegrateToCommunity',
        'income_date' => 'setIncomeDate',
        'allow_invoice_after' => 'setAllowInvoiceAfter',
        'show_in_calendar' => 'setShowInCalendar',
        'for_invitees_only' => 'setForInviteesOnly',
        'notification_settings' => 'setNotificationSettings',
        'cancellation_reason' => 'setCancellationReason',
        'work_group' => 'setWorkGroup',
        'module_info' => 'setModuleInfo',
        'finance_dimensions' => 'setFinanceDimensions',
        'responsible' => 'setResponsible',
        'coursetype' => 'setCoursetype',
        'coursesection' => 'setCoursesection',
        'coursecategory' => 'setCoursecategory',
        'coursesubcategory' => 'setCoursesubcategory',
        'category_id' => 'setCategoryId',
        'sub_category_id' => 'setSubCategoryId',
        'area_id' => 'setAreaId',
        'section_id' => 'setSectionId',
        'categories' => 'setCategories',
        'sub_categories' => 'setSubCategories',
        'groups' => 'setGroups',
        'areas' => 'setAreas',
        'organizations' => 'setOrganizations',
        'crew' => 'setCrew',
        'participants' => 'setParticipants',
        'hotels' => 'setHotels',
        'places' => 'setPlaces',
        'custom_field_values' => 'setCustomFieldValues',
        'allowed_participant_categories' => 'setAllowedParticipantCategories',
        'sessions' => 'setSessions',
        'texts' => 'setTexts',
        'service_set' => 'setServiceSet',
        'earliest_participant_list_view_date_time' => 'setEarliestParticipantListViewDateTime',
        'last_participant_list_view_date_time' => 'setLastParticipantListViewDateTime',
        'cancel_signup_before_date_time' => 'setCancelSignupBeforeDateTime',
        'require_service_on_enroll' => 'setRequireServiceOnEnroll',
        'require_session_on_enroll' => 'setRequireSessionOnEnroll',
        'questions_for_enrollment' => 'setQuestionsForEnrollment',
        'automatic_confirmation' => 'setAutomaticConfirmation',
        'teachers' => 'setTeachers',
        'questions_for_evaluation' => 'setQuestionsForEvaluation',
        'evaluation_opens_at' => 'setEvaluationOpensAt',
        'evaluation_closes_at' => 'setEvaluationClosesAt',
        'grade_category' => 'setGradeCategory',
        'recurring_arrangement' => 'setRecurringArrangement',
        'external_identification' => 'setExternalIdentification',
        'external_link' => 'setExternalLink',
        'external_course_provider' => 'setExternalCourseProvider'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'internal_id' => 'getInternalId',
        'name' => 'getName',
        'internal_description' => 'getInternalDescription',
        'short_description' => 'getShortDescription',
        'long_description' => 'getLongDescription',
        'start_date_time' => 'getStartDateTime',
        'end_date_time' => 'getEndDateTime',
        'empty_seats' => 'getEmptySeats',
        'total_seats' => 'getTotalSeats',
        'minimum_seats' => 'getMinimumSeats',
        'budget_seats' => 'getBudgetSeats',
        'arrangement_type' => 'getArrangementType',
        'payment_option' => 'getPaymentOption',
        'earliest_enroll_time' => 'getEarliestEnrollTime',
        'enroll_before' => 'getEnrollBefore',
        'web_enabled' => 'getWebEnabled',
        'allow_enrollment_to_simultaneous_sessions' => 'getAllowEnrollmentToSimultaneousSessions',
        'based_on_arragement_template_id' => 'getBasedOnArragementTemplateId',
        'cancellation_date' => 'getCancellationDate',
        'integrate_to_community' => 'getIntegrateToCommunity',
        'income_date' => 'getIncomeDate',
        'allow_invoice_after' => 'getAllowInvoiceAfter',
        'show_in_calendar' => 'getShowInCalendar',
        'for_invitees_only' => 'getForInviteesOnly',
        'notification_settings' => 'getNotificationSettings',
        'cancellation_reason' => 'getCancellationReason',
        'work_group' => 'getWorkGroup',
        'module_info' => 'getModuleInfo',
        'finance_dimensions' => 'getFinanceDimensions',
        'responsible' => 'getResponsible',
        'coursetype' => 'getCoursetype',
        'coursesection' => 'getCoursesection',
        'coursecategory' => 'getCoursecategory',
        'coursesubcategory' => 'getCoursesubcategory',
        'category_id' => 'getCategoryId',
        'sub_category_id' => 'getSubCategoryId',
        'area_id' => 'getAreaId',
        'section_id' => 'getSectionId',
        'categories' => 'getCategories',
        'sub_categories' => 'getSubCategories',
        'groups' => 'getGroups',
        'areas' => 'getAreas',
        'organizations' => 'getOrganizations',
        'crew' => 'getCrew',
        'participants' => 'getParticipants',
        'hotels' => 'getHotels',
        'places' => 'getPlaces',
        'custom_field_values' => 'getCustomFieldValues',
        'allowed_participant_categories' => 'getAllowedParticipantCategories',
        'sessions' => 'getSessions',
        'texts' => 'getTexts',
        'service_set' => 'getServiceSet',
        'earliest_participant_list_view_date_time' => 'getEarliestParticipantListViewDateTime',
        'last_participant_list_view_date_time' => 'getLastParticipantListViewDateTime',
        'cancel_signup_before_date_time' => 'getCancelSignupBeforeDateTime',
        'require_service_on_enroll' => 'getRequireServiceOnEnroll',
        'require_session_on_enroll' => 'getRequireSessionOnEnroll',
        'questions_for_enrollment' => 'getQuestionsForEnrollment',
        'automatic_confirmation' => 'getAutomaticConfirmation',
        'teachers' => 'getTeachers',
        'questions_for_evaluation' => 'getQuestionsForEvaluation',
        'evaluation_opens_at' => 'getEvaluationOpensAt',
        'evaluation_closes_at' => 'getEvaluationClosesAt',
        'grade_category' => 'getGradeCategory',
        'recurring_arrangement' => 'getRecurringArrangement',
        'external_identification' => 'getExternalIdentification',
        'external_link' => 'getExternalLink',
        'external_course_provider' => 'getExternalCourseProvider'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['internal_description'] = isset($data['internal_description']) ? $data['internal_description'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['start_date_time'] = isset($data['start_date_time']) ? $data['start_date_time'] : null;
        $this->container['end_date_time'] = isset($data['end_date_time']) ? $data['end_date_time'] : null;
        $this->container['empty_seats'] = isset($data['empty_seats']) ? $data['empty_seats'] : null;
        $this->container['total_seats'] = isset($data['total_seats']) ? $data['total_seats'] : null;
        $this->container['minimum_seats'] = isset($data['minimum_seats']) ? $data['minimum_seats'] : null;
        $this->container['budget_seats'] = isset($data['budget_seats']) ? $data['budget_seats'] : null;
        $this->container['arrangement_type'] = isset($data['arrangement_type']) ? $data['arrangement_type'] : null;
        $this->container['payment_option'] = isset($data['payment_option']) ? $data['payment_option'] : null;
        $this->container['earliest_enroll_time'] = isset($data['earliest_enroll_time']) ? $data['earliest_enroll_time'] : null;
        $this->container['enroll_before'] = isset($data['enroll_before']) ? $data['enroll_before'] : null;
        $this->container['web_enabled'] = isset($data['web_enabled']) ? $data['web_enabled'] : null;
        $this->container['allow_enrollment_to_simultaneous_sessions'] = isset($data['allow_enrollment_to_simultaneous_sessions']) ? $data['allow_enrollment_to_simultaneous_sessions'] : null;
        $this->container['based_on_arragement_template_id'] = isset($data['based_on_arragement_template_id']) ? $data['based_on_arragement_template_id'] : null;
        $this->container['cancellation_date'] = isset($data['cancellation_date']) ? $data['cancellation_date'] : null;
        $this->container['integrate_to_community'] = isset($data['integrate_to_community']) ? $data['integrate_to_community'] : null;
        $this->container['income_date'] = isset($data['income_date']) ? $data['income_date'] : null;
        $this->container['allow_invoice_after'] = isset($data['allow_invoice_after']) ? $data['allow_invoice_after'] : null;
        $this->container['show_in_calendar'] = isset($data['show_in_calendar']) ? $data['show_in_calendar'] : null;
        $this->container['for_invitees_only'] = isset($data['for_invitees_only']) ? $data['for_invitees_only'] : null;
        $this->container['notification_settings'] = isset($data['notification_settings']) ? $data['notification_settings'] : null;
        $this->container['cancellation_reason'] = isset($data['cancellation_reason']) ? $data['cancellation_reason'] : null;
        $this->container['work_group'] = isset($data['work_group']) ? $data['work_group'] : null;
        $this->container['module_info'] = isset($data['module_info']) ? $data['module_info'] : null;
        $this->container['finance_dimensions'] = isset($data['finance_dimensions']) ? $data['finance_dimensions'] : null;
        $this->container['responsible'] = isset($data['responsible']) ? $data['responsible'] : null;
        $this->container['coursetype'] = isset($data['coursetype']) ? $data['coursetype'] : null;
        $this->container['coursesection'] = isset($data['coursesection']) ? $data['coursesection'] : null;
        $this->container['coursecategory'] = isset($data['coursecategory']) ? $data['coursecategory'] : null;
        $this->container['coursesubcategory'] = isset($data['coursesubcategory']) ? $data['coursesubcategory'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['sub_category_id'] = isset($data['sub_category_id']) ? $data['sub_category_id'] : null;
        $this->container['area_id'] = isset($data['area_id']) ? $data['area_id'] : null;
        $this->container['section_id'] = isset($data['section_id']) ? $data['section_id'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['sub_categories'] = isset($data['sub_categories']) ? $data['sub_categories'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['areas'] = isset($data['areas']) ? $data['areas'] : null;
        $this->container['organizations'] = isset($data['organizations']) ? $data['organizations'] : null;
        $this->container['crew'] = isset($data['crew']) ? $data['crew'] : null;
        $this->container['participants'] = isset($data['participants']) ? $data['participants'] : null;
        $this->container['hotels'] = isset($data['hotels']) ? $data['hotels'] : null;
        $this->container['places'] = isset($data['places']) ? $data['places'] : null;
        $this->container['custom_field_values'] = isset($data['custom_field_values']) ? $data['custom_field_values'] : null;
        $this->container['allowed_participant_categories'] = isset($data['allowed_participant_categories']) ? $data['allowed_participant_categories'] : null;
        $this->container['sessions'] = isset($data['sessions']) ? $data['sessions'] : null;
        $this->container['texts'] = isset($data['texts']) ? $data['texts'] : null;
        $this->container['service_set'] = isset($data['service_set']) ? $data['service_set'] : null;
        $this->container['earliest_participant_list_view_date_time'] = isset($data['earliest_participant_list_view_date_time']) ? $data['earliest_participant_list_view_date_time'] : null;
        $this->container['last_participant_list_view_date_time'] = isset($data['last_participant_list_view_date_time']) ? $data['last_participant_list_view_date_time'] : null;
        $this->container['cancel_signup_before_date_time'] = isset($data['cancel_signup_before_date_time']) ? $data['cancel_signup_before_date_time'] : null;
        $this->container['require_service_on_enroll'] = isset($data['require_service_on_enroll']) ? $data['require_service_on_enroll'] : null;
        $this->container['require_session_on_enroll'] = isset($data['require_session_on_enroll']) ? $data['require_session_on_enroll'] : null;
        $this->container['questions_for_enrollment'] = isset($data['questions_for_enrollment']) ? $data['questions_for_enrollment'] : null;
        $this->container['automatic_confirmation'] = isset($data['automatic_confirmation']) ? $data['automatic_confirmation'] : null;
        $this->container['teachers'] = isset($data['teachers']) ? $data['teachers'] : null;
        $this->container['questions_for_evaluation'] = isset($data['questions_for_evaluation']) ? $data['questions_for_evaluation'] : null;
        $this->container['evaluation_opens_at'] = isset($data['evaluation_opens_at']) ? $data['evaluation_opens_at'] : null;
        $this->container['evaluation_closes_at'] = isset($data['evaluation_closes_at']) ? $data['evaluation_closes_at'] : null;
        $this->container['grade_category'] = isset($data['grade_category']) ? $data['grade_category'] : null;
        $this->container['recurring_arrangement'] = isset($data['recurring_arrangement']) ? $data['recurring_arrangement'] : null;
        $this->container['external_identification'] = isset($data['external_identification']) ? $data['external_identification'] : null;
        $this->container['external_link'] = isset($data['external_link']) ? $data['external_link'] : null;
        $this->container['external_course_provider'] = isset($data['external_course_provider']) ? $data['external_course_provider'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The link to the current resource
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string $internal_id The arrangement identification.  The same value is available in Membercare's user interface.
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The Name of the arrangement
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets internal_description
     *
     * @return string
     */
    public function getInternalDescription()
    {
        return $this->container['internal_description'];
    }

    /**
     * Sets internal_description
     *
     * @param string $internal_description internal_description
     *
     * @return $this
     */
    public function setInternalDescription($internal_description)
    {
        $this->container['internal_description'] = $internal_description;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description Short description of the arrangement as html.
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string $long_description Long description of the arrangement as html.
     *
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets start_date_time
     *
     * @return \DateTime
     */
    public function getStartDateTime()
    {
        return $this->container['start_date_time'];
    }

    /**
     * Sets start_date_time
     *
     * @param \DateTime $start_date_time The start datetime of the arrangement.
     *
     * @return $this
     */
    public function setStartDateTime($start_date_time)
    {
        $this->container['start_date_time'] = $start_date_time;

        return $this;
    }

    /**
     * Gets end_date_time
     *
     * @return \DateTime
     */
    public function getEndDateTime()
    {
        return $this->container['end_date_time'];
    }

    /**
     * Sets end_date_time
     *
     * @param \DateTime $end_date_time The end datetime of the arrangment.
     *
     * @return $this
     */
    public function setEndDateTime($end_date_time)
    {
        $this->container['end_date_time'] = $end_date_time;

        return $this;
    }

    /**
     * Gets empty_seats
     *
     * @return int
     */
    public function getEmptySeats()
    {
        return $this->container['empty_seats'];
    }

    /**
     * Sets empty_seats
     *
     * @param int $empty_seats The number of empty seats available on the arrangement.
     *
     * @return $this
     */
    public function setEmptySeats($empty_seats)
    {
        $this->container['empty_seats'] = $empty_seats;

        return $this;
    }

    /**
     * Gets total_seats
     *
     * @return int
     */
    public function getTotalSeats()
    {
        return $this->container['total_seats'];
    }

    /**
     * Sets total_seats
     *
     * @param int $total_seats Total nomber of seats
     *
     * @return $this
     */
    public function setTotalSeats($total_seats)
    {
        $this->container['total_seats'] = $total_seats;

        return $this;
    }

    /**
     * Gets minimum_seats
     *
     * @return int
     */
    public function getMinimumSeats()
    {
        return $this->container['minimum_seats'];
    }

    /**
     * Sets minimum_seats
     *
     * @param int $minimum_seats MinParticipants
     *
     * @return $this
     */
    public function setMinimumSeats($minimum_seats)
    {
        $this->container['minimum_seats'] = $minimum_seats;

        return $this;
    }

    /**
     * Gets budget_seats
     *
     * @return int
     */
    public function getBudgetSeats()
    {
        return $this->container['budget_seats'];
    }

    /**
     * Sets budget_seats
     *
     * @param int $budget_seats BudgetParticipants
     *
     * @return $this
     */
    public function setBudgetSeats($budget_seats)
    {
        $this->container['budget_seats'] = $budget_seats;

        return $this;
    }

    /**
     * Gets arrangement_type
     *
     * @return \Membercare\Client\Model\ArrangementType
     */
    public function getArrangementType()
    {
        return $this->container['arrangement_type'];
    }

    /**
     * Sets arrangement_type
     *
     * @param \Membercare\Client\Model\ArrangementType $arrangement_type arrangement_type
     *
     * @return $this
     */
    public function setArrangementType($arrangement_type)
    {
        $this->container['arrangement_type'] = $arrangement_type;

        return $this;
    }

    /**
     * Gets payment_option
     *
     * @return \Membercare\Client\Model\PaymentOption
     */
    public function getPaymentOption()
    {
        return $this->container['payment_option'];
    }

    /**
     * Sets payment_option
     *
     * @param \Membercare\Client\Model\PaymentOption $payment_option payment_option
     *
     * @return $this
     */
    public function setPaymentOption($payment_option)
    {
        $this->container['payment_option'] = $payment_option;

        return $this;
    }

    /**
     * Gets earliest_enroll_time
     *
     * @return \DateTime
     */
    public function getEarliestEnrollTime()
    {
        return $this->container['earliest_enroll_time'];
    }

    /**
     * Sets earliest_enroll_time
     *
     * @param \DateTime $earliest_enroll_time The earliest time where it is possible to enroll the arrangement
     *
     * @return $this
     */
    public function setEarliestEnrollTime($earliest_enroll_time)
    {
        $this->container['earliest_enroll_time'] = $earliest_enroll_time;

        return $this;
    }

    /**
     * Gets enroll_before
     *
     * @return \DateTime
     */
    public function getEnrollBefore()
    {
        return $this->container['enroll_before'];
    }

    /**
     * Sets enroll_before
     *
     * @param \DateTime $enroll_before The latest date where it is possible to enroll the arrangement
     *
     * @return $this
     */
    public function setEnrollBefore($enroll_before)
    {
        $this->container['enroll_before'] = $enroll_before;

        return $this;
    }

    /**
     * Gets web_enabled
     *
     * @return bool
     */
    public function getWebEnabled()
    {
        return $this->container['web_enabled'];
    }

    /**
     * Sets web_enabled
     *
     * @param bool $web_enabled Indicates wheter or not this arrangement should be shown on web
     *
     * @return $this
     */
    public function setWebEnabled($web_enabled)
    {
        $this->container['web_enabled'] = $web_enabled;

        return $this;
    }

    /**
     * Gets allow_enrollment_to_simultaneous_sessions
     *
     * @return bool
     */
    public function getAllowEnrollmentToSimultaneousSessions()
    {
        return $this->container['allow_enrollment_to_simultaneous_sessions'];
    }

    /**
     * Sets allow_enrollment_to_simultaneous_sessions
     *
     * @param bool $allow_enrollment_to_simultaneous_sessions Indicates whether or not a participant is allowed to participate in sessions that overlap on time  Only relevant for Conference.
     *
     * @return $this
     */
    public function setAllowEnrollmentToSimultaneousSessions($allow_enrollment_to_simultaneous_sessions)
    {
        $this->container['allow_enrollment_to_simultaneous_sessions'] = $allow_enrollment_to_simultaneous_sessions;

        return $this;
    }

    /**
     * Gets based_on_arragement_template_id
     *
     * @return int
     */
    public function getBasedOnArragementTemplateId()
    {
        return $this->container['based_on_arragement_template_id'];
    }

    /**
     * Sets based_on_arragement_template_id
     *
     * @param int $based_on_arragement_template_id The template the course was based on when created
     *
     * @return $this
     */
    public function setBasedOnArragementTemplateId($based_on_arragement_template_id)
    {
        $this->container['based_on_arragement_template_id'] = $based_on_arragement_template_id;

        return $this;
    }

    /**
     * Gets cancellation_date
     *
     * @return \DateTime
     */
    public function getCancellationDate()
    {
        return $this->container['cancellation_date'];
    }

    /**
     * Sets cancellation_date
     *
     * @param \DateTime $cancellation_date When was it cancelled
     *
     * @return $this
     */
    public function setCancellationDate($cancellation_date)
    {
        $this->container['cancellation_date'] = $cancellation_date;

        return $this;
    }

    /**
     * Gets integrate_to_community
     *
     * @return bool
     */
    public function getIntegrateToCommunity()
    {
        return $this->container['integrate_to_community'];
    }

    /**
     * Sets integrate_to_community
     *
     * @param bool $integrate_to_community IntegrateToCommunity
     *
     * @return $this
     */
    public function setIntegrateToCommunity($integrate_to_community)
    {
        $this->container['integrate_to_community'] = $integrate_to_community;

        return $this;
    }

    /**
     * Gets income_date
     *
     * @return \DateTime
     */
    public function getIncomeDate()
    {
        return $this->container['income_date'];
    }

    /**
     * Sets income_date
     *
     * @param \DateTime $income_date IncomeDate
     *
     * @return $this
     */
    public function setIncomeDate($income_date)
    {
        $this->container['income_date'] = $income_date;

        return $this;
    }

    /**
     * Gets allow_invoice_after
     *
     * @return \DateTime
     */
    public function getAllowInvoiceAfter()
    {
        return $this->container['allow_invoice_after'];
    }

    /**
     * Sets allow_invoice_after
     *
     * @param \DateTime $allow_invoice_after AllowInvoiceAfter
     *
     * @return $this
     */
    public function setAllowInvoiceAfter($allow_invoice_after)
    {
        $this->container['allow_invoice_after'] = $allow_invoice_after;

        return $this;
    }

    /**
     * Gets show_in_calendar
     *
     * @return bool
     */
    public function getShowInCalendar()
    {
        return $this->container['show_in_calendar'];
    }

    /**
     * Sets show_in_calendar
     *
     * @param bool $show_in_calendar ShowInCalendar
     *
     * @return $this
     */
    public function setShowInCalendar($show_in_calendar)
    {
        $this->container['show_in_calendar'] = $show_in_calendar;

        return $this;
    }

    /**
     * Gets for_invitees_only
     *
     * @return bool
     */
    public function getForInviteesOnly()
    {
        return $this->container['for_invitees_only'];
    }

    /**
     * Sets for_invitees_only
     *
     * @param bool $for_invitees_only Only invitees can attend arrangement
     *
     * @return $this
     */
    public function setForInviteesOnly($for_invitees_only)
    {
        $this->container['for_invitees_only'] = $for_invitees_only;

        return $this;
    }

    /**
     * Gets notification_settings
     *
     * @return \Membercare\Client\Model\NotificationSettings
     */
    public function getNotificationSettings()
    {
        return $this->container['notification_settings'];
    }

    /**
     * Sets notification_settings
     *
     * @param \Membercare\Client\Model\NotificationSettings $notification_settings notification_settings
     *
     * @return $this
     */
    public function setNotificationSettings($notification_settings)
    {
        $this->container['notification_settings'] = $notification_settings;

        return $this;
    }

    /**
     * Gets cancellation_reason
     *
     * @return \Membercare\Client\Model\CancellationReason
     */
    public function getCancellationReason()
    {
        return $this->container['cancellation_reason'];
    }

    /**
     * Sets cancellation_reason
     *
     * @param \Membercare\Client\Model\CancellationReason $cancellation_reason cancellation_reason
     *
     * @return $this
     */
    public function setCancellationReason($cancellation_reason)
    {
        $this->container['cancellation_reason'] = $cancellation_reason;

        return $this;
    }

    /**
     * Gets work_group
     *
     * @return \Membercare\Client\Model\WorkGroup
     */
    public function getWorkGroup()
    {
        return $this->container['work_group'];
    }

    /**
     * Sets work_group
     *
     * @param \Membercare\Client\Model\WorkGroup $work_group work_group
     *
     * @return $this
     */
    public function setWorkGroup($work_group)
    {
        $this->container['work_group'] = $work_group;

        return $this;
    }

    /**
     * Gets module_info
     *
     * @return \Membercare\Client\Model\EventModuleInfo
     */
    public function getModuleInfo()
    {
        return $this->container['module_info'];
    }

    /**
     * Sets module_info
     *
     * @param \Membercare\Client\Model\EventModuleInfo $module_info module_info
     *
     * @return $this
     */
    public function setModuleInfo($module_info)
    {
        $this->container['module_info'] = $module_info;

        return $this;
    }

    /**
     * Gets finance_dimensions
     *
     * @return \Membercare\Client\Model\FinanceDimensions
     */
    public function getFinanceDimensions()
    {
        return $this->container['finance_dimensions'];
    }

    /**
     * Sets finance_dimensions
     *
     * @param \Membercare\Client\Model\FinanceDimensions $finance_dimensions finance_dimensions
     *
     * @return $this
     */
    public function setFinanceDimensions($finance_dimensions)
    {
        $this->container['finance_dimensions'] = $finance_dimensions;

        return $this;
    }

    /**
     * Gets responsible
     *
     * @return \Membercare\Client\Model\Person
     */
    public function getResponsible()
    {
        return $this->container['responsible'];
    }

    /**
     * Sets responsible
     *
     * @param \Membercare\Client\Model\Person $responsible responsible
     *
     * @return $this
     */
    public function setResponsible($responsible)
    {
        $this->container['responsible'] = $responsible;

        return $this;
    }

    /**
     * Gets coursetype
     *
     * @return string
     */
    public function getCoursetype()
    {
        return $this->container['coursetype'];
    }

    /**
     * Sets coursetype
     *
     * @param string $coursetype The area of the Arrangement.
     *
     * @return $this
     */
    public function setCoursetype($coursetype)
    {
        $this->container['coursetype'] = $coursetype;

        return $this;
    }

    /**
     * Gets coursesection
     *
     * @return string
     */
    public function getCoursesection()
    {
        return $this->container['coursesection'];
    }

    /**
     * Sets coursesection
     *
     * @param string $coursesection The group of the Course or Conference.
     *
     * @return $this
     */
    public function setCoursesection($coursesection)
    {
        $this->container['coursesection'] = $coursesection;

        return $this;
    }

    /**
     * Gets coursecategory
     *
     * @return string
     */
    public function getCoursecategory()
    {
        return $this->container['coursecategory'];
    }

    /**
     * Sets coursecategory
     *
     * @param string $coursecategory The category of the Course or Conference.
     *
     * @return $this
     */
    public function setCoursecategory($coursecategory)
    {
        $this->container['coursecategory'] = $coursecategory;

        return $this;
    }

    /**
     * Gets coursesubcategory
     *
     * @return string
     */
    public function getCoursesubcategory()
    {
        return $this->container['coursesubcategory'];
    }

    /**
     * Sets coursesubcategory
     *
     * @param string $coursesubcategory The subcategory of the Course or Conference.
     *
     * @return $this
     */
    public function setCoursesubcategory($coursesubcategory)
    {
        $this->container['coursesubcategory'] = $coursesubcategory;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int $category_id The Id of Coursecategory (ArrangementCategory model object)
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets sub_category_id
     *
     * @return int
     */
    public function getSubCategoryId()
    {
        return $this->container['sub_category_id'];
    }

    /**
     * Sets sub_category_id
     *
     * @param int $sub_category_id The Id of Coursesubcategory (ArrangementSubCategory model object)
     *
     * @return $this
     */
    public function setSubCategoryId($sub_category_id)
    {
        $this->container['sub_category_id'] = $sub_category_id;

        return $this;
    }

    /**
     * Gets area_id
     *
     * @return int
     */
    public function getAreaId()
    {
        return $this->container['area_id'];
    }

    /**
     * Sets area_id
     *
     * @param int $area_id The Id of Coursetype (ArrangementArea model object)
     *
     * @return $this
     */
    public function setAreaId($area_id)
    {
        $this->container['area_id'] = $area_id;

        return $this;
    }

    /**
     * Gets section_id
     *
     * @return int
     */
    public function getSectionId()
    {
        return $this->container['section_id'];
    }

    /**
     * Sets section_id
     *
     * @param int $section_id The Id of Coursesection (ArrangementSection model object)
     *
     * @return $this
     */
    public function setSectionId($section_id)
    {
        $this->container['section_id'] = $section_id;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Membercare\Client\Model\ArrangementCategory[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Membercare\Client\Model\ArrangementCategory[] $categories The categories set on this Arrangement
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets sub_categories
     *
     * @return \Membercare\Client\Model\ArrangementSubCategory[]
     */
    public function getSubCategories()
    {
        return $this->container['sub_categories'];
    }

    /**
     * Sets sub_categories
     *
     * @param \Membercare\Client\Model\ArrangementSubCategory[] $sub_categories The sub categories set on this Arrangement
     *
     * @return $this
     */
    public function setSubCategories($sub_categories)
    {
        $this->container['sub_categories'] = $sub_categories;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \Membercare\Client\Model\ArrangementGroup[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \Membercare\Client\Model\ArrangementGroup[] $groups The groups set on this Arrangement
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets areas
     *
     * @return \Membercare\Client\Model\ArrangementArea[]
     */
    public function getAreas()
    {
        return $this->container['areas'];
    }

    /**
     * Sets areas
     *
     * @param \Membercare\Client\Model\ArrangementArea[] $areas The areas set on this Arrangement
     *
     * @return $this
     */
    public function setAreas($areas)
    {
        $this->container['areas'] = $areas;

        return $this;
    }

    /**
     * Gets organizations
     *
     * @return \Membercare\Client\Model\SimpleOrganization[]
     */
    public function getOrganizations()
    {
        return $this->container['organizations'];
    }

    /**
     * Sets organizations
     *
     * @param \Membercare\Client\Model\SimpleOrganization[] $organizations Organanization the event belongs to
     *
     * @return $this
     */
    public function setOrganizations($organizations)
    {
        $this->container['organizations'] = $organizations;

        return $this;
    }

    /**
     * Gets crew
     *
     * @return \Membercare\Client\Model\EventCrew[]
     */
    public function getCrew()
    {
        return $this->container['crew'];
    }

    /**
     * Sets crew
     *
     * @param \Membercare\Client\Model\EventCrew[] $crew The persons running the event
     *
     * @return $this
     */
    public function setCrew($crew)
    {
        $this->container['crew'] = $crew;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return \Membercare\Client\Model\Participant[]
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param \Membercare\Client\Model\Participant[] $participants The participants enrolled to the arrangement, when returned from the Enrollment service.  When returned from the Arrangements service, the list will be null
     *
     * @return $this
     */
    public function setParticipants($participants)
    {
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets hotels
     *
     * @return \Membercare\Client\Model\Hotel[]
     */
    public function getHotels()
    {
        return $this->container['hotels'];
    }

    /**
     * Sets hotels
     *
     * @param \Membercare\Client\Model\Hotel[] $hotels List of Hotel companies that is available for the arrangement
     *
     * @return $this
     */
    public function setHotels($hotels)
    {
        $this->container['hotels'] = $hotels;

        return $this;
    }

    /**
     * Gets places
     *
     * @return \Membercare\Client\Model\Place[]
     */
    public function getPlaces()
    {
        return $this->container['places'];
    }

    /**
     * Sets places
     *
     * @param \Membercare\Client\Model\Place[] $places List of places (companies) where this arrangement is held.
     *
     * @return $this
     */
    public function setPlaces($places)
    {
        $this->container['places'] = $places;

        return $this;
    }

    /**
     * Gets custom_field_values
     *
     * @return \Membercare\Client\Model\CustomFieldValue[]
     */
    public function getCustomFieldValues()
    {
        return $this->container['custom_field_values'];
    }

    /**
     * Sets custom_field_values
     *
     * @param \Membercare\Client\Model\CustomFieldValue[] $custom_field_values List of CustomFieldValues
     *
     * @return $this
     */
    public function setCustomFieldValues($custom_field_values)
    {
        $this->container['custom_field_values'] = $custom_field_values;

        return $this;
    }

    /**
     * Gets allowed_participant_categories
     *
     * @return \Membercare\Client\Model\AllowedParticipantCategory[]
     */
    public function getAllowedParticipantCategories()
    {
        return $this->container['allowed_participant_categories'];
    }

    /**
     * Sets allowed_participant_categories
     *
     * @param \Membercare\Client\Model\AllowedParticipantCategory[] $allowed_participant_categories List of allowed participant categories for the arrangement
     *
     * @return $this
     */
    public function setAllowedParticipantCategories($allowed_participant_categories)
    {
        $this->container['allowed_participant_categories'] = $allowed_participant_categories;

        return $this;
    }

    /**
     * Gets sessions
     *
     * @return \Membercare\Client\Model\Session[]
     */
    public function getSessions()
    {
        return $this->container['sessions'];
    }

    /**
     * Sets sessions
     *
     * @param \Membercare\Client\Model\Session[] $sessions List of Sessions avaliable for a Conference
     *
     * @return $this
     */
    public function setSessions($sessions)
    {
        $this->container['sessions'] = $sessions;

        return $this;
    }

    /**
     * Gets texts
     *
     * @return \Membercare\Client\Model\ArrangementText[]
     */
    public function getTexts()
    {
        return $this->container['texts'];
    }

    /**
     * Sets texts
     *
     * @param \Membercare\Client\Model\ArrangementText[] $texts List of Texts associated with the course
     *
     * @return $this
     */
    public function setTexts($texts)
    {
        $this->container['texts'] = $texts;

        return $this;
    }

    /**
     * Gets service_set
     *
     * @return \Membercare\Client\Model\ServiceSet
     */
    public function getServiceSet()
    {
        return $this->container['service_set'];
    }

    /**
     * Sets service_set
     *
     * @param \Membercare\Client\Model\ServiceSet $service_set service_set
     *
     * @return $this
     */
    public function setServiceSet($service_set)
    {
        $this->container['service_set'] = $service_set;

        return $this;
    }

    /**
     * Gets earliest_participant_list_view_date_time
     *
     * @return \DateTime
     */
    public function getEarliestParticipantListViewDateTime()
    {
        return $this->container['earliest_participant_list_view_date_time'];
    }

    /**
     * Sets earliest_participant_list_view_date_time
     *
     * @param \DateTime $earliest_participant_list_view_date_time Earliest participant list view date
     *
     * @return $this
     */
    public function setEarliestParticipantListViewDateTime($earliest_participant_list_view_date_time)
    {
        $this->container['earliest_participant_list_view_date_time'] = $earliest_participant_list_view_date_time;

        return $this;
    }

    /**
     * Gets last_participant_list_view_date_time
     *
     * @return \DateTime
     */
    public function getLastParticipantListViewDateTime()
    {
        return $this->container['last_participant_list_view_date_time'];
    }

    /**
     * Sets last_participant_list_view_date_time
     *
     * @param \DateTime $last_participant_list_view_date_time Last participant list view date
     *
     * @return $this
     */
    public function setLastParticipantListViewDateTime($last_participant_list_view_date_time)
    {
        $this->container['last_participant_list_view_date_time'] = $last_participant_list_view_date_time;

        return $this;
    }

    /**
     * Gets cancel_signup_before_date_time
     *
     * @return \DateTime
     */
    public function getCancelSignupBeforeDateTime()
    {
        return $this->container['cancel_signup_before_date_time'];
    }

    /**
     * Sets cancel_signup_before_date_time
     *
     * @param \DateTime $cancel_signup_before_date_time Last date of cancelling participation
     *
     * @return $this
     */
    public function setCancelSignupBeforeDateTime($cancel_signup_before_date_time)
    {
        $this->container['cancel_signup_before_date_time'] = $cancel_signup_before_date_time;

        return $this;
    }

    /**
     * Gets require_service_on_enroll
     *
     * @return bool
     */
    public function getRequireServiceOnEnroll()
    {
        return $this->container['require_service_on_enroll'];
    }

    /**
     * Sets require_service_on_enroll
     *
     * @param bool $require_service_on_enroll Requires at least one regular service to be enrolled to
     *
     * @return $this
     */
    public function setRequireServiceOnEnroll($require_service_on_enroll)
    {
        $this->container['require_service_on_enroll'] = $require_service_on_enroll;

        return $this;
    }

    /**
     * Gets require_session_on_enroll
     *
     * @return bool
     */
    public function getRequireSessionOnEnroll()
    {
        return $this->container['require_session_on_enroll'];
    }

    /**
     * Sets require_session_on_enroll
     *
     * @param bool $require_session_on_enroll Requires at least one session to be enrolled to
     *
     * @return $this
     */
    public function setRequireSessionOnEnroll($require_session_on_enroll)
    {
        $this->container['require_session_on_enroll'] = $require_session_on_enroll;

        return $this;
    }

    /**
     * Gets questions_for_enrollment
     *
     * @return \Membercare\Client\Model\QuestionForEnrollment[]
     */
    public function getQuestionsForEnrollment()
    {
        return $this->container['questions_for_enrollment'];
    }

    /**
     * Sets questions_for_enrollment
     *
     * @param \Membercare\Client\Model\QuestionForEnrollment[] $questions_for_enrollment List of questions for signing up to the event
     *
     * @return $this
     */
    public function setQuestionsForEnrollment($questions_for_enrollment)
    {
        $this->container['questions_for_enrollment'] = $questions_for_enrollment;

        return $this;
    }

    /**
     * Gets automatic_confirmation
     *
     * @return bool
     */
    public function getAutomaticConfirmation()
    {
        return $this->container['automatic_confirmation'];
    }

    /**
     * Sets automatic_confirmation
     *
     * @param bool $automatic_confirmation Send out signup confirmation emails automatically
     *
     * @return $this
     */
    public function setAutomaticConfirmation($automatic_confirmation)
    {
        $this->container['automatic_confirmation'] = $automatic_confirmation;

        return $this;
    }

    /**
     * Gets teachers
     *
     * @return \Membercare\Client\Model\Teacher[]
     */
    public function getTeachers()
    {
        return $this->container['teachers'];
    }

    /**
     * Sets teachers
     *
     * @param \Membercare\Client\Model\Teacher[] $teachers teachers
     *
     * @return $this
     */
    public function setTeachers($teachers)
    {
        $this->container['teachers'] = $teachers;

        return $this;
    }

    /**
     * Gets questions_for_evaluation
     *
     * @return \Membercare\Client\Model\Question[]
     */
    public function getQuestionsForEvaluation()
    {
        return $this->container['questions_for_evaluation'];
    }

    /**
     * Sets questions_for_evaluation
     *
     * @param \Membercare\Client\Model\Question[] $questions_for_evaluation List of questions for evaluating the event
     *
     * @return $this
     */
    public function setQuestionsForEvaluation($questions_for_evaluation)
    {
        $this->container['questions_for_evaluation'] = $questions_for_evaluation;

        return $this;
    }

    /**
     * Gets evaluation_opens_at
     *
     * @return \DateTime
     */
    public function getEvaluationOpensAt()
    {
        return $this->container['evaluation_opens_at'];
    }

    /**
     * Sets evaluation_opens_at
     *
     * @param \DateTime $evaluation_opens_at DateTime that the evaluation opens for participant reponses
     *
     * @return $this
     */
    public function setEvaluationOpensAt($evaluation_opens_at)
    {
        $this->container['evaluation_opens_at'] = $evaluation_opens_at;

        return $this;
    }

    /**
     * Gets evaluation_closes_at
     *
     * @return \DateTime
     */
    public function getEvaluationClosesAt()
    {
        return $this->container['evaluation_closes_at'];
    }

    /**
     * Sets evaluation_closes_at
     *
     * @param \DateTime $evaluation_closes_at DateTime that the evaluation closes for participant reponses
     *
     * @return $this
     */
    public function setEvaluationClosesAt($evaluation_closes_at)
    {
        $this->container['evaluation_closes_at'] = $evaluation_closes_at;

        return $this;
    }

    /**
     * Gets grade_category
     *
     * @return \Membercare\Client\Model\GradeCategory
     */
    public function getGradeCategory()
    {
        return $this->container['grade_category'];
    }

    /**
     * Sets grade_category
     *
     * @param \Membercare\Client\Model\GradeCategory $grade_category grade_category
     *
     * @return $this
     */
    public function setGradeCategory($grade_category)
    {
        $this->container['grade_category'] = $grade_category;

        return $this;
    }

    /**
     * Gets recurring_arrangement
     *
     * @return \Membercare\Client\Model\RecurringArrangement
     */
    public function getRecurringArrangement()
    {
        return $this->container['recurring_arrangement'];
    }

    /**
     * Sets recurring_arrangement
     *
     * @param \Membercare\Client\Model\RecurringArrangement $recurring_arrangement recurring_arrangement
     *
     * @return $this
     */
    public function setRecurringArrangement($recurring_arrangement)
    {
        $this->container['recurring_arrangement'] = $recurring_arrangement;

        return $this;
    }

    /**
     * Gets external_identification
     *
     * @return string
     */
    public function getExternalIdentification()
    {
        return $this->container['external_identification'];
    }

    /**
     * Sets external_identification
     *
     * @param string $external_identification external_identification
     *
     * @return $this
     */
    public function setExternalIdentification($external_identification)
    {
        $this->container['external_identification'] = $external_identification;

        return $this;
    }

    /**
     * Gets external_link
     *
     * @return string
     */
    public function getExternalLink()
    {
        return $this->container['external_link'];
    }

    /**
     * Sets external_link
     *
     * @param string $external_link external_link
     *
     * @return $this
     */
    public function setExternalLink($external_link)
    {
        $this->container['external_link'] = $external_link;

        return $this;
    }

    /**
     * Gets external_course_provider
     *
     * @return \Membercare\Client\Model\ExternalCourseProvider
     */
    public function getExternalCourseProvider()
    {
        return $this->container['external_course_provider'];
    }

    /**
     * Sets external_course_provider
     *
     * @param \Membercare\Client\Model\ExternalCourseProvider $external_course_provider external_course_provider
     *
     * @return $this
     */
    public function setExternalCourseProvider($external_course_provider)
    {
        $this->container['external_course_provider'] = $external_course_provider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
