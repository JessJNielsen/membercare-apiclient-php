<?php
/**
 * InvoicesApi
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Membercare\Client\ApiException;
use Membercare\Client\Configuration;
use Membercare\Client\HeaderSelector;
use Membercare\Client\ObjectSerializer;

/**
 * InvoicesApi Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation arrangementByInvoiceApi
     *
     * Get a specific arrangement by an invoiceId
     *
     * @param  int $id id (required)
     * @param  string $token access token (required)
     * @param  bool $include_services include_services (optional, default to false)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\Arrangement
     */
    public function arrangementByInvoiceApi($id, $token, $include_services = 'false')
    {
        list($response) = $this->arrangementByInvoiceApiWithHttpInfo($id, $token, $include_services);
        return $response;
    }

    /**
     * Operation arrangementByInvoiceApiWithHttpInfo
     *
     * Get a specific arrangement by an invoiceId
     *
     * @param  int $id (required)
     * @param  string $token access token (required)
     * @param  bool $include_services (optional, default to false)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\Arrangement, HTTP status code, HTTP response headers (array of strings)
     */
    public function arrangementByInvoiceApiWithHttpInfo($id, $token, $include_services = 'false')
    {
        $returnType = '\Membercare\Client\Model\Arrangement';
        $request = $this->arrangementByInvoiceApiRequest($id, $token, $include_services);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\Arrangement',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation arrangementByInvoiceApiAsync
     *
     * Get a specific arrangement by an invoiceId
     *
     * @param  int $id (required)
     * @param  string $token access token (required)
     * @param  bool $include_services (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function arrangementByInvoiceApiAsync($id, $token, $include_services = 'false')
    {
        return $this->arrangementByInvoiceApiAsyncWithHttpInfo($id, $token, $include_services)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation arrangementByInvoiceApiAsyncWithHttpInfo
     *
     * Get a specific arrangement by an invoiceId
     *
     * @param  int $id (required)
     * @param  string $token access token (required)
     * @param  bool $include_services (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function arrangementByInvoiceApiAsyncWithHttpInfo($id, $token, $include_services = 'false')
    {
        $returnType = '\Membercare\Client\Model\Arrangement';
        $request = $this->arrangementByInvoiceApiRequest($id, $token, $include_services);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'arrangementByInvoiceApi'
     *
     * @param  int $id (required)
     * @param  string $token access token (required)
     * @param  bool $include_services (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function arrangementByInvoiceApiRequest($id, $token, $include_services = 'false')
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling arrangementByInvoiceApi'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling arrangementByInvoiceApi'
            );
        }

        $resourcePath = '/api/v1/invoices/{id}/arrangement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_services !== null) {
            $queryParams['includeServices'] = ObjectSerializer::toQueryValue($include_services, null);
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoiceApi
     *
     * Retrieves a specific invoice
     *
     * @param  int $id The identifier of the invoice. (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\Invoice
     */
    public function invoiceApi($id, $token)
    {
        list($response) = $this->invoiceApiWithHttpInfo($id, $token);
        return $response;
    }

    /**
     * Operation invoiceApiWithHttpInfo
     *
     * Retrieves a specific invoice
     *
     * @param  int $id The identifier of the invoice. (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceApiWithHttpInfo($id, $token)
    {
        $returnType = '\Membercare\Client\Model\Invoice';
        $request = $this->invoiceApiRequest($id, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoiceApiAsync
     *
     * Retrieves a specific invoice
     *
     * @param  int $id The identifier of the invoice. (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceApiAsync($id, $token)
    {
        return $this->invoiceApiAsyncWithHttpInfo($id, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoiceApiAsyncWithHttpInfo
     *
     * Retrieves a specific invoice
     *
     * @param  int $id The identifier of the invoice. (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoiceApiAsyncWithHttpInfo($id, $token)
    {
        $returnType = '\Membercare\Client\Model\Invoice';
        $request = $this->invoiceApiRequest($id, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoiceApi'
     *
     * @param  int $id The identifier of the invoice. (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invoiceApiRequest($id, $token)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling invoiceApi'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling invoiceApi'
            );
        }

        $resourcePath = '/api/v1/invoices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesApi
     *
     * Method returns a paged list of Invoices.  The paged result includes a summary and links to next and prevoius page.
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\FinanceStatus $finance_status Enables you to filter the request by FinanceStatus.  0 &#x3D; NotProcessed  1 &#x3D; ReadByFinancesystem  2 &#x3D; HandledByFinanceSystem  3 &#x3D; ReadyForCreditCardPayment  -1 &#x3D; Error (optional)
     * @param  \Membercare\Client\Model\FinanceStatus $payment_finance_status Enables you to filter the request by FinanceStatus ON PAYMENTS.  0 &#x3D; NotProcessed  1 &#x3D; ReadByFinancesystem  2 &#x3D; HandledByFinanceSystem  3 &#x3D; ReadyForCreditCardPayment  -1 &#x3D; Error (optional)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\InvoicePagedResult
     */
    public function invoicesApi($token, $finance_status = null, $payment_finance_status = null, $page = '1', $page_size = '50')
    {
        list($response) = $this->invoicesApiWithHttpInfo($token, $finance_status, $payment_finance_status, $page, $page_size);
        return $response;
    }

    /**
     * Operation invoicesApiWithHttpInfo
     *
     * Method returns a paged list of Invoices.  The paged result includes a summary and links to next and prevoius page.
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\FinanceStatus $finance_status Enables you to filter the request by FinanceStatus.  0 &#x3D; NotProcessed  1 &#x3D; ReadByFinancesystem  2 &#x3D; HandledByFinanceSystem  3 &#x3D; ReadyForCreditCardPayment  -1 &#x3D; Error (optional)
     * @param  \Membercare\Client\Model\FinanceStatus $payment_finance_status Enables you to filter the request by FinanceStatus ON PAYMENTS.  0 &#x3D; NotProcessed  1 &#x3D; ReadByFinancesystem  2 &#x3D; HandledByFinanceSystem  3 &#x3D; ReadyForCreditCardPayment  -1 &#x3D; Error (optional)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\InvoicePagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesApiWithHttpInfo($token, $finance_status = null, $payment_finance_status = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\InvoicePagedResult';
        $request = $this->invoicesApiRequest($token, $finance_status, $payment_finance_status, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\InvoicePagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoicesApiAsync
     *
     * Method returns a paged list of Invoices.  The paged result includes a summary and links to next and prevoius page.
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\FinanceStatus $finance_status Enables you to filter the request by FinanceStatus.  0 &#x3D; NotProcessed  1 &#x3D; ReadByFinancesystem  2 &#x3D; HandledByFinanceSystem  3 &#x3D; ReadyForCreditCardPayment  -1 &#x3D; Error (optional)
     * @param  \Membercare\Client\Model\FinanceStatus $payment_finance_status Enables you to filter the request by FinanceStatus ON PAYMENTS.  0 &#x3D; NotProcessed  1 &#x3D; ReadByFinancesystem  2 &#x3D; HandledByFinanceSystem  3 &#x3D; ReadyForCreditCardPayment  -1 &#x3D; Error (optional)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesApiAsync($token, $finance_status = null, $payment_finance_status = null, $page = '1', $page_size = '50')
    {
        return $this->invoicesApiAsyncWithHttpInfo($token, $finance_status, $payment_finance_status, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesApiAsyncWithHttpInfo
     *
     * Method returns a paged list of Invoices.  The paged result includes a summary and links to next and prevoius page.
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\FinanceStatus $finance_status Enables you to filter the request by FinanceStatus.  0 &#x3D; NotProcessed  1 &#x3D; ReadByFinancesystem  2 &#x3D; HandledByFinanceSystem  3 &#x3D; ReadyForCreditCardPayment  -1 &#x3D; Error (optional)
     * @param  \Membercare\Client\Model\FinanceStatus $payment_finance_status Enables you to filter the request by FinanceStatus ON PAYMENTS.  0 &#x3D; NotProcessed  1 &#x3D; ReadByFinancesystem  2 &#x3D; HandledByFinanceSystem  3 &#x3D; ReadyForCreditCardPayment  -1 &#x3D; Error (optional)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesApiAsyncWithHttpInfo($token, $finance_status = null, $payment_finance_status = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\InvoicePagedResult';
        $request = $this->invoicesApiRequest($token, $finance_status, $payment_finance_status, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesApi'
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\FinanceStatus $finance_status Enables you to filter the request by FinanceStatus.  0 &#x3D; NotProcessed  1 &#x3D; ReadByFinancesystem  2 &#x3D; HandledByFinanceSystem  3 &#x3D; ReadyForCreditCardPayment  -1 &#x3D; Error (optional)
     * @param  \Membercare\Client\Model\FinanceStatus $payment_finance_status Enables you to filter the request by FinanceStatus ON PAYMENTS.  0 &#x3D; NotProcessed  1 &#x3D; ReadByFinancesystem  2 &#x3D; HandledByFinanceSystem  3 &#x3D; ReadyForCreditCardPayment  -1 &#x3D; Error (optional)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invoicesApiRequest($token, $finance_status = null, $payment_finance_status = null, $page = '1', $page_size = '50')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling invoicesApi'
            );
        }

        $resourcePath = '/api/v1/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($finance_status !== null) {
            $queryParams['financeStatus'] = ObjectSerializer::toQueryValue($finance_status, null);
        }
        // query params
        if ($payment_finance_status !== null) {
            $queryParams['paymentFinanceStatus'] = ObjectSerializer::toQueryValue($payment_finance_status, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchInvoiceApi
     *
     * Updates the financestatus of the invoice with the passed identifier.
     *
     * @param  string $token access token (required)
     * @param  int $id The identifier of the invoice. (required)
     * @param  \Membercare\Client\Model\InvoicePatch $body the Invoice object to be updated - This object must contain a financestatus. (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\Invoice
     */
    public function patchInvoiceApi($token, $id, $body = null)
    {
        list($response) = $this->patchInvoiceApiWithHttpInfo($token, $id, $body);
        return $response;
    }

    /**
     * Operation patchInvoiceApiWithHttpInfo
     *
     * Updates the financestatus of the invoice with the passed identifier.
     *
     * @param  string $token access token (required)
     * @param  int $id The identifier of the invoice. (required)
     * @param  \Membercare\Client\Model\InvoicePatch $body the Invoice object to be updated - This object must contain a financestatus. (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchInvoiceApiWithHttpInfo($token, $id, $body = null)
    {
        $returnType = '\Membercare\Client\Model\Invoice';
        $request = $this->patchInvoiceApiRequest($token, $id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchInvoiceApiAsync
     *
     * Updates the financestatus of the invoice with the passed identifier.
     *
     * @param  string $token access token (required)
     * @param  int $id The identifier of the invoice. (required)
     * @param  \Membercare\Client\Model\InvoicePatch $body the Invoice object to be updated - This object must contain a financestatus. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchInvoiceApiAsync($token, $id, $body = null)
    {
        return $this->patchInvoiceApiAsyncWithHttpInfo($token, $id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchInvoiceApiAsyncWithHttpInfo
     *
     * Updates the financestatus of the invoice with the passed identifier.
     *
     * @param  string $token access token (required)
     * @param  int $id The identifier of the invoice. (required)
     * @param  \Membercare\Client\Model\InvoicePatch $body the Invoice object to be updated - This object must contain a financestatus. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchInvoiceApiAsyncWithHttpInfo($token, $id, $body = null)
    {
        $returnType = '\Membercare\Client\Model\Invoice';
        $request = $this->patchInvoiceApiRequest($token, $id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchInvoiceApi'
     *
     * @param  string $token access token (required)
     * @param  int $id The identifier of the invoice. (required)
     * @param  \Membercare\Client\Model\InvoicePatch $body the Invoice object to be updated - This object must contain a financestatus. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchInvoiceApiRequest($token, $id, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling patchInvoiceApi'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchInvoiceApi'
            );
        }

        $resourcePath = '/api/v1/invoices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchInvoiceApi_0
     *
     * Updates the financestatus of the invoice with the passed identifier.
     *
     * @param  string $token access token (required)
     * @param  int $id The identifier of the invoice. (required)
     * @param  \Membercare\Client\Model\InvoicePatch $body the Invoice object to be updated - This object must contain a financestatus. (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\Invoice
     */
    public function patchInvoiceApi_0($token, $id, $body = null)
    {
        list($response) = $this->patchInvoiceApi_0WithHttpInfo($token, $id, $body);
        return $response;
    }

    /**
     * Operation patchInvoiceApi_0WithHttpInfo
     *
     * Updates the financestatus of the invoice with the passed identifier.
     *
     * @param  string $token access token (required)
     * @param  int $id The identifier of the invoice. (required)
     * @param  \Membercare\Client\Model\InvoicePatch $body the Invoice object to be updated - This object must contain a financestatus. (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchInvoiceApi_0WithHttpInfo($token, $id, $body = null)
    {
        $returnType = '\Membercare\Client\Model\Invoice';
        $request = $this->patchInvoiceApi_0Request($token, $id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchInvoiceApi_0Async
     *
     * Updates the financestatus of the invoice with the passed identifier.
     *
     * @param  string $token access token (required)
     * @param  int $id The identifier of the invoice. (required)
     * @param  \Membercare\Client\Model\InvoicePatch $body the Invoice object to be updated - This object must contain a financestatus. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchInvoiceApi_0Async($token, $id, $body = null)
    {
        return $this->patchInvoiceApi_0AsyncWithHttpInfo($token, $id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchInvoiceApi_0AsyncWithHttpInfo
     *
     * Updates the financestatus of the invoice with the passed identifier.
     *
     * @param  string $token access token (required)
     * @param  int $id The identifier of the invoice. (required)
     * @param  \Membercare\Client\Model\InvoicePatch $body the Invoice object to be updated - This object must contain a financestatus. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchInvoiceApi_0AsyncWithHttpInfo($token, $id, $body = null)
    {
        $returnType = '\Membercare\Client\Model\Invoice';
        $request = $this->patchInvoiceApi_0Request($token, $id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchInvoiceApi_0'
     *
     * @param  string $token access token (required)
     * @param  int $id The identifier of the invoice. (required)
     * @param  \Membercare\Client\Model\InvoicePatch $body the Invoice object to be updated - This object must contain a financestatus. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchInvoiceApi_0Request($token, $id, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling patchInvoiceApi_0'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchInvoiceApi_0'
            );
        }

        $resourcePath = '/api/v1/invoices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchInvoicesApi
     *
     * Updates the financestatus of the invoices.
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\InvoicePatch[] $body body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\InvoicePatchResult
     */
    public function patchInvoicesApi($token, $body = null)
    {
        list($response) = $this->patchInvoicesApiWithHttpInfo($token, $body);
        return $response;
    }

    /**
     * Operation patchInvoicesApiWithHttpInfo
     *
     * Updates the financestatus of the invoices.
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\InvoicePatch[] $body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\InvoicePatchResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchInvoicesApiWithHttpInfo($token, $body = null)
    {
        $returnType = '\Membercare\Client\Model\InvoicePatchResult';
        $request = $this->patchInvoicesApiRequest($token, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\InvoicePatchResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchInvoicesApiAsync
     *
     * Updates the financestatus of the invoices.
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\InvoicePatch[] $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchInvoicesApiAsync($token, $body = null)
    {
        return $this->patchInvoicesApiAsyncWithHttpInfo($token, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchInvoicesApiAsyncWithHttpInfo
     *
     * Updates the financestatus of the invoices.
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\InvoicePatch[] $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchInvoicesApiAsyncWithHttpInfo($token, $body = null)
    {
        $returnType = '\Membercare\Client\Model\InvoicePatchResult';
        $request = $this->patchInvoicesApiRequest($token, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchInvoicesApi'
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\InvoicePatch[] $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchInvoicesApiRequest($token, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling patchInvoicesApi'
            );
        }

        $resourcePath = '/api/v1/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentAPI
     *
     * Get all the payments on this Invoice
     *
     * @param  int $id id (required)
     * @param  string $token access token (required)
     * @param  int $page page (optional, default to 0)
     * @param  int $pagesize pagesize (optional, default to 10)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\PaymentPagedResult
     */
    public function paymentAPI($id, $token, $page = '0', $pagesize = '10')
    {
        list($response) = $this->paymentAPIWithHttpInfo($id, $token, $page, $pagesize);
        return $response;
    }

    /**
     * Operation paymentAPIWithHttpInfo
     *
     * Get all the payments on this Invoice
     *
     * @param  int $id (required)
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 0)
     * @param  int $pagesize (optional, default to 10)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\PaymentPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentAPIWithHttpInfo($id, $token, $page = '0', $pagesize = '10')
    {
        $returnType = '\Membercare\Client\Model\PaymentPagedResult';
        $request = $this->paymentAPIRequest($id, $token, $page, $pagesize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\PaymentPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paymentAPIAsync
     *
     * Get all the payments on this Invoice
     *
     * @param  int $id (required)
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 0)
     * @param  int $pagesize (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentAPIAsync($id, $token, $page = '0', $pagesize = '10')
    {
        return $this->paymentAPIAsyncWithHttpInfo($id, $token, $page, $pagesize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentAPIAsyncWithHttpInfo
     *
     * Get all the payments on this Invoice
     *
     * @param  int $id (required)
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 0)
     * @param  int $pagesize (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentAPIAsyncWithHttpInfo($id, $token, $page = '0', $pagesize = '10')
    {
        $returnType = '\Membercare\Client\Model\PaymentPagedResult';
        $request = $this->paymentAPIRequest($id, $token, $page, $pagesize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentAPI'
     *
     * @param  int $id (required)
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 0)
     * @param  int $pagesize (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function paymentAPIRequest($id, $token, $page = '0', $pagesize = '10')
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling paymentAPI'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling paymentAPI'
            );
        }

        $resourcePath = '/api/v1/invoices/{id}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($pagesize !== null) {
            $queryParams['pagesize'] = ObjectSerializer::toQueryValue($pagesize, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postPaymentApi
     *
     * @param  string $token access token (required)
     * @param  int $id id (required)
     * @param  \Membercare\Client\Model\PaymentPost $body body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\Payment
     */
    public function postPaymentApi($token, $id, $body = null)
    {
        list($response) = $this->postPaymentApiWithHttpInfo($token, $id, $body);
        return $response;
    }

    /**
     * Operation postPaymentApiWithHttpInfo
     *
     * @param  string $token access token (required)
     * @param  int $id (required)
     * @param  \Membercare\Client\Model\PaymentPost $body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPaymentApiWithHttpInfo($token, $id, $body = null)
    {
        $returnType = '\Membercare\Client\Model\Payment';
        $request = $this->postPaymentApiRequest($token, $id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postPaymentApiAsync
     *
     *
     *
     * @param  string $token access token (required)
     * @param  int $id (required)
     * @param  \Membercare\Client\Model\PaymentPost $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPaymentApiAsync($token, $id, $body = null)
    {
        return $this->postPaymentApiAsyncWithHttpInfo($token, $id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postPaymentApiAsyncWithHttpInfo
     *
     *
     *
     * @param  string $token access token (required)
     * @param  int $id (required)
     * @param  \Membercare\Client\Model\PaymentPost $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPaymentApiAsyncWithHttpInfo($token, $id, $body = null)
    {
        $returnType = '\Membercare\Client\Model\Payment';
        $request = $this->postPaymentApiRequest($token, $id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postPaymentApi'
     *
     * @param  string $token access token (required)
     * @param  int $id (required)
     * @param  \Membercare\Client\Model\PaymentPost $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postPaymentApiRequest($token, $id, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling postPaymentApi'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postPaymentApi'
            );
        }

        $resourcePath = '/api/v1/invoices/{id}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
