<?php
/**
 * MembersiteApi
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Membercare\Client\ApiException;
use Membercare\Client\Configuration;
use Membercare\Client\HeaderSelector;
use Membercare\Client\ObjectSerializer;

/**
 * MembersiteApi Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MembersiteApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation boardmembershipCategoriesByOrganizationsApi
     *
     * Search board functions by organization identifications.
     *
     * @param  string $token access token (required)
     * @param  string[] $body body (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $page_size Number of items in a page (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\BoardFunctionPagedResult
     */
    public function boardmembershipCategoriesByOrganizationsApi($token, $body = null, $page = '1', $page_size = '50')
    {
        list($response) = $this->boardmembershipCategoriesByOrganizationsApiWithHttpInfo($token, $body, $page, $page_size);
        return $response;
    }

    /**
     * Operation boardmembershipCategoriesByOrganizationsApiWithHttpInfo
     *
     * Search board functions by organization identifications.
     *
     * @param  string $token access token (required)
     * @param  string[] $body (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $page_size Number of items in a page (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\BoardFunctionPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function boardmembershipCategoriesByOrganizationsApiWithHttpInfo($token, $body = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\BoardFunctionPagedResult';
        $request = $this->boardmembershipCategoriesByOrganizationsApiRequest($token, $body, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\BoardFunctionPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation boardmembershipCategoriesByOrganizationsApiAsync
     *
     * Search board functions by organization identifications.
     *
     * @param  string $token access token (required)
     * @param  string[] $body (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $page_size Number of items in a page (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function boardmembershipCategoriesByOrganizationsApiAsync($token, $body = null, $page = '1', $page_size = '50')
    {
        return $this->boardmembershipCategoriesByOrganizationsApiAsyncWithHttpInfo($token, $body, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation boardmembershipCategoriesByOrganizationsApiAsyncWithHttpInfo
     *
     * Search board functions by organization identifications.
     *
     * @param  string $token access token (required)
     * @param  string[] $body (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $page_size Number of items in a page (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function boardmembershipCategoriesByOrganizationsApiAsyncWithHttpInfo($token, $body = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\BoardFunctionPagedResult';
        $request = $this->boardmembershipCategoriesByOrganizationsApiRequest($token, $body, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'boardmembershipCategoriesByOrganizationsApi'
     *
     * @param  string $token access token (required)
     * @param  string[] $body (optional)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $page_size Number of items in a page (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function boardmembershipCategoriesByOrganizationsApiRequest($token, $body = null, $page = '1', $page_size = '50')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling boardmembershipCategoriesByOrganizationsApi'
            );
        }

        $resourcePath = '/api/v1/membersite/boardFunctions/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customFieldTypesAndValuesForPerson
     *
     * Retrieves all CustomFieldTypes and selected values for the given debtor account number
     *
     * @param  string $debtor_account_number Debtor account number (required)
     * @param  string $token access token (required)
     * @param  bool $saved_only Only saved custom field values for the person and their definitions to be returned (optional, default to false)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\CustomFieldDefinitionsAndSelectedValues
     */
    public function customFieldTypesAndValuesForPerson($debtor_account_number, $token, $saved_only = 'false')
    {
        list($response) = $this->customFieldTypesAndValuesForPersonWithHttpInfo($debtor_account_number, $token, $saved_only);
        return $response;
    }

    /**
     * Operation customFieldTypesAndValuesForPersonWithHttpInfo
     *
     * Retrieves all CustomFieldTypes and selected values for the given debtor account number
     *
     * @param  string $debtor_account_number Debtor account number (required)
     * @param  string $token access token (required)
     * @param  bool $saved_only Only saved custom field values for the person and their definitions to be returned (optional, default to false)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\CustomFieldDefinitionsAndSelectedValues, HTTP status code, HTTP response headers (array of strings)
     */
    public function customFieldTypesAndValuesForPersonWithHttpInfo($debtor_account_number, $token, $saved_only = 'false')
    {
        $returnType = '\Membercare\Client\Model\CustomFieldDefinitionsAndSelectedValues';
        $request = $this->customFieldTypesAndValuesForPersonRequest($debtor_account_number, $token, $saved_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\CustomFieldDefinitionsAndSelectedValues',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customFieldTypesAndValuesForPersonAsync
     *
     * Retrieves all CustomFieldTypes and selected values for the given debtor account number
     *
     * @param  string $debtor_account_number Debtor account number (required)
     * @param  string $token access token (required)
     * @param  bool $saved_only Only saved custom field values for the person and their definitions to be returned (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customFieldTypesAndValuesForPersonAsync($debtor_account_number, $token, $saved_only = 'false')
    {
        return $this->customFieldTypesAndValuesForPersonAsyncWithHttpInfo($debtor_account_number, $token, $saved_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customFieldTypesAndValuesForPersonAsyncWithHttpInfo
     *
     * Retrieves all CustomFieldTypes and selected values for the given debtor account number
     *
     * @param  string $debtor_account_number Debtor account number (required)
     * @param  string $token access token (required)
     * @param  bool $saved_only Only saved custom field values for the person and their definitions to be returned (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customFieldTypesAndValuesForPersonAsyncWithHttpInfo($debtor_account_number, $token, $saved_only = 'false')
    {
        $returnType = '\Membercare\Client\Model\CustomFieldDefinitionsAndSelectedValues';
        $request = $this->customFieldTypesAndValuesForPersonRequest($debtor_account_number, $token, $saved_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customFieldTypesAndValuesForPerson'
     *
     * @param  string $debtor_account_number Debtor account number (required)
     * @param  string $token access token (required)
     * @param  bool $saved_only Only saved custom field values for the person and their definitions to be returned (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customFieldTypesAndValuesForPersonRequest($debtor_account_number, $token, $saved_only = 'false')
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling customFieldTypesAndValuesForPerson'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling customFieldTypesAndValuesForPerson'
            );
        }

        $resourcePath = '/api/v1/membersite/person/{debtorAccountNumber}/customFields/typesAndSelectedValues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($saved_only !== null) {
            $queryParams['savedOnly'] = ObjectSerializer::toQueryValue($saved_only, null);
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customFieldTypesSearch
     *
     * Gets all CustomFieldTypes for the given custom field definition seach criteria
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\CustomFieldDefinitionSearchCriteria $body body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\CustomFieldDefinitionsAndSelectedValues
     */
    public function customFieldTypesSearch($token, $body = null)
    {
        list($response) = $this->customFieldTypesSearchWithHttpInfo($token, $body);
        return $response;
    }

    /**
     * Operation customFieldTypesSearchWithHttpInfo
     *
     * Gets all CustomFieldTypes for the given custom field definition seach criteria
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\CustomFieldDefinitionSearchCriteria $body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\CustomFieldDefinitionsAndSelectedValues, HTTP status code, HTTP response headers (array of strings)
     */
    public function customFieldTypesSearchWithHttpInfo($token, $body = null)
    {
        $returnType = '\Membercare\Client\Model\CustomFieldDefinitionsAndSelectedValues';
        $request = $this->customFieldTypesSearchRequest($token, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\CustomFieldDefinitionsAndSelectedValues',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customFieldTypesSearchAsync
     *
     * Gets all CustomFieldTypes for the given custom field definition seach criteria
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\CustomFieldDefinitionSearchCriteria $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customFieldTypesSearchAsync($token, $body = null)
    {
        return $this->customFieldTypesSearchAsyncWithHttpInfo($token, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customFieldTypesSearchAsyncWithHttpInfo
     *
     * Gets all CustomFieldTypes for the given custom field definition seach criteria
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\CustomFieldDefinitionSearchCriteria $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customFieldTypesSearchAsyncWithHttpInfo($token, $body = null)
    {
        $returnType = '\Membercare\Client\Model\CustomFieldDefinitionsAndSelectedValues';
        $request = $this->customFieldTypesSearchRequest($token, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customFieldTypesSearch'
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\CustomFieldDefinitionSearchCriteria $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customFieldTypesSearchRequest($token, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling customFieldTypesSearch'
            );
        }

        $resourcePath = '/api/v1/membersite/customFields/search/types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getArrangmentParticipantByIdentificationKey
     *
     * Get event participant by identificationKey
     *
     * @param  string $identification_key identification_key (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\Participant
     */
    public function getArrangmentParticipantByIdentificationKey($identification_key, $token)
    {
        list($response) = $this->getArrangmentParticipantByIdentificationKeyWithHttpInfo($identification_key, $token);
        return $response;
    }

    /**
     * Operation getArrangmentParticipantByIdentificationKeyWithHttpInfo
     *
     * Get event participant by identificationKey
     *
     * @param  string $identification_key (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\Participant, HTTP status code, HTTP response headers (array of strings)
     */
    public function getArrangmentParticipantByIdentificationKeyWithHttpInfo($identification_key, $token)
    {
        $returnType = '\Membercare\Client\Model\Participant';
        $request = $this->getArrangmentParticipantByIdentificationKeyRequest($identification_key, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\Participant',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getArrangmentParticipantByIdentificationKeyAsync
     *
     * Get event participant by identificationKey
     *
     * @param  string $identification_key (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArrangmentParticipantByIdentificationKeyAsync($identification_key, $token)
    {
        return $this->getArrangmentParticipantByIdentificationKeyAsyncWithHttpInfo($identification_key, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getArrangmentParticipantByIdentificationKeyAsyncWithHttpInfo
     *
     * Get event participant by identificationKey
     *
     * @param  string $identification_key (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArrangmentParticipantByIdentificationKeyAsyncWithHttpInfo($identification_key, $token)
    {
        $returnType = '\Membercare\Client\Model\Participant';
        $request = $this->getArrangmentParticipantByIdentificationKeyRequest($identification_key, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getArrangmentParticipantByIdentificationKey'
     *
     * @param  string $identification_key (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getArrangmentParticipantByIdentificationKeyRequest($identification_key, $token)
    {
        // verify the required parameter 'identification_key' is set
        if ($identification_key === null || (is_array($identification_key) && count($identification_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identification_key when calling getArrangmentParticipantByIdentificationKey'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getArrangmentParticipantByIdentificationKey'
            );
        }

        $resourcePath = '/api/v1/membersite/arrangements/{identificationKey}/participant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($identification_key !== null) {
            $resourcePath = str_replace(
                '{' . 'identificationKey' . '}',
                ObjectSerializer::toPathValue($identification_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getArrangmentParticipantListAccessStatus
     *
     * Get if the person with debtor account number has access the participant list of the arrangement
     *
     * @param  string $internal_id internal_id (required)
     * @param  string $debtor_account_number debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function getArrangmentParticipantListAccessStatus($internal_id, $debtor_account_number, $token)
    {
        list($response) = $this->getArrangmentParticipantListAccessStatusWithHttpInfo($internal_id, $debtor_account_number, $token);
        return $response;
    }

    /**
     * Operation getArrangmentParticipantListAccessStatusWithHttpInfo
     *
     * Get if the person with debtor account number has access the participant list of the arrangement
     *
     * @param  string $internal_id (required)
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function getArrangmentParticipantListAccessStatusWithHttpInfo($internal_id, $debtor_account_number, $token)
    {
        $returnType = 'bool';
        $request = $this->getArrangmentParticipantListAccessStatusRequest($internal_id, $debtor_account_number, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getArrangmentParticipantListAccessStatusAsync
     *
     * Get if the person with debtor account number has access the participant list of the arrangement
     *
     * @param  string $internal_id (required)
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArrangmentParticipantListAccessStatusAsync($internal_id, $debtor_account_number, $token)
    {
        return $this->getArrangmentParticipantListAccessStatusAsyncWithHttpInfo($internal_id, $debtor_account_number, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getArrangmentParticipantListAccessStatusAsyncWithHttpInfo
     *
     * Get if the person with debtor account number has access the participant list of the arrangement
     *
     * @param  string $internal_id (required)
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArrangmentParticipantListAccessStatusAsyncWithHttpInfo($internal_id, $debtor_account_number, $token)
    {
        $returnType = 'bool';
        $request = $this->getArrangmentParticipantListAccessStatusRequest($internal_id, $debtor_account_number, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getArrangmentParticipantListAccessStatus'
     *
     * @param  string $internal_id (required)
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getArrangmentParticipantListAccessStatusRequest($internal_id, $debtor_account_number, $token)
    {
        // verify the required parameter 'internal_id' is set
        if ($internal_id === null || (is_array($internal_id) && count($internal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $internal_id when calling getArrangmentParticipantListAccessStatus'
            );
        }
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getArrangmentParticipantListAccessStatus'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getArrangmentParticipantListAccessStatus'
            );
        }

        $resourcePath = '/api/v1/membersite/arrangements/{internalId}/participantlist/{debtorAccountNumber}/hasAccess';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($internal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'internalId' . '}',
                ObjectSerializer::toPathValue($internal_id),
                $resourcePath
            );
        }
        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAvailableChildMembershipCategoriesByDebtorAccountNumber
     *
     * @param  string $debtor_account_number debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\MembershipCategoryPagedResult
     */
    public function getAvailableChildMembershipCategoriesByDebtorAccountNumber($debtor_account_number, $token, $page = '1', $page_size = '50')
    {
        list($response) = $this->getAvailableChildMembershipCategoriesByDebtorAccountNumberWithHttpInfo($debtor_account_number, $token, $page, $page_size);
        return $response;
    }

    /**
     * Operation getAvailableChildMembershipCategoriesByDebtorAccountNumberWithHttpInfo
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\MembershipCategoryPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAvailableChildMembershipCategoriesByDebtorAccountNumberWithHttpInfo($debtor_account_number, $token, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\MembershipCategoryPagedResult';
        $request = $this->getAvailableChildMembershipCategoriesByDebtorAccountNumberRequest($debtor_account_number, $token, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\MembershipCategoryPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAvailableChildMembershipCategoriesByDebtorAccountNumberAsync
     *
     * 
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAvailableChildMembershipCategoriesByDebtorAccountNumberAsync($debtor_account_number, $token, $page = '1', $page_size = '50')
    {
        return $this->getAvailableChildMembershipCategoriesByDebtorAccountNumberAsyncWithHttpInfo($debtor_account_number, $token, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAvailableChildMembershipCategoriesByDebtorAccountNumberAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAvailableChildMembershipCategoriesByDebtorAccountNumberAsyncWithHttpInfo($debtor_account_number, $token, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\MembershipCategoryPagedResult';
        $request = $this->getAvailableChildMembershipCategoriesByDebtorAccountNumberRequest($debtor_account_number, $token, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAvailableChildMembershipCategoriesByDebtorAccountNumber'
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAvailableChildMembershipCategoriesByDebtorAccountNumberRequest($debtor_account_number, $token, $page = '1', $page_size = '50')
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getAvailableChildMembershipCategoriesByDebtorAccountNumber'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getAvailableChildMembershipCategoriesByDebtorAccountNumber'
            );
        }

        $resourcePath = '/api/v1/membersite/myFamily/{debtorAccountNumber}/membershipCategories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBoardMembershipsForPersonWithOrganizationsInHierarchy
     *
     * Get a paged result of boardmemberships with organizations in hierarchy.
     *
     * @param  string $debtor_account_number The debtorAccountNumber of the person to get boardmemberships for. (required)
     * @param  string $token access token (required)
     * @param  bool $only_valid Indicates whether or not to include historical boardmemberships. (optional, default to true)
     * @param  bool $include_addresses Indicates wheter or not to include addresses (optional, default to false)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\BoardMembershipWithOrganizationsInHierarchyPagedResult
     */
    public function getBoardMembershipsForPersonWithOrganizationsInHierarchy($debtor_account_number, $token, $only_valid = 'true', $include_addresses = 'false', $page = '1', $page_size = '50')
    {
        list($response) = $this->getBoardMembershipsForPersonWithOrganizationsInHierarchyWithHttpInfo($debtor_account_number, $token, $only_valid, $include_addresses, $page, $page_size);
        return $response;
    }

    /**
     * Operation getBoardMembershipsForPersonWithOrganizationsInHierarchyWithHttpInfo
     *
     * Get a paged result of boardmemberships with organizations in hierarchy.
     *
     * @param  string $debtor_account_number The debtorAccountNumber of the person to get boardmemberships for. (required)
     * @param  string $token access token (required)
     * @param  bool $only_valid Indicates whether or not to include historical boardmemberships. (optional, default to true)
     * @param  bool $include_addresses Indicates wheter or not to include addresses (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\BoardMembershipWithOrganizationsInHierarchyPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBoardMembershipsForPersonWithOrganizationsInHierarchyWithHttpInfo($debtor_account_number, $token, $only_valid = 'true', $include_addresses = 'false', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\BoardMembershipWithOrganizationsInHierarchyPagedResult';
        $request = $this->getBoardMembershipsForPersonWithOrganizationsInHierarchyRequest($debtor_account_number, $token, $only_valid, $include_addresses, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\BoardMembershipWithOrganizationsInHierarchyPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBoardMembershipsForPersonWithOrganizationsInHierarchyAsync
     *
     * Get a paged result of boardmemberships with organizations in hierarchy.
     *
     * @param  string $debtor_account_number The debtorAccountNumber of the person to get boardmemberships for. (required)
     * @param  string $token access token (required)
     * @param  bool $only_valid Indicates whether or not to include historical boardmemberships. (optional, default to true)
     * @param  bool $include_addresses Indicates wheter or not to include addresses (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBoardMembershipsForPersonWithOrganizationsInHierarchyAsync($debtor_account_number, $token, $only_valid = 'true', $include_addresses = 'false', $page = '1', $page_size = '50')
    {
        return $this->getBoardMembershipsForPersonWithOrganizationsInHierarchyAsyncWithHttpInfo($debtor_account_number, $token, $only_valid, $include_addresses, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBoardMembershipsForPersonWithOrganizationsInHierarchyAsyncWithHttpInfo
     *
     * Get a paged result of boardmemberships with organizations in hierarchy.
     *
     * @param  string $debtor_account_number The debtorAccountNumber of the person to get boardmemberships for. (required)
     * @param  string $token access token (required)
     * @param  bool $only_valid Indicates whether or not to include historical boardmemberships. (optional, default to true)
     * @param  bool $include_addresses Indicates wheter or not to include addresses (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBoardMembershipsForPersonWithOrganizationsInHierarchyAsyncWithHttpInfo($debtor_account_number, $token, $only_valid = 'true', $include_addresses = 'false', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\BoardMembershipWithOrganizationsInHierarchyPagedResult';
        $request = $this->getBoardMembershipsForPersonWithOrganizationsInHierarchyRequest($debtor_account_number, $token, $only_valid, $include_addresses, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBoardMembershipsForPersonWithOrganizationsInHierarchy'
     *
     * @param  string $debtor_account_number The debtorAccountNumber of the person to get boardmemberships for. (required)
     * @param  string $token access token (required)
     * @param  bool $only_valid Indicates whether or not to include historical boardmemberships. (optional, default to true)
     * @param  bool $include_addresses Indicates wheter or not to include addresses (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBoardMembershipsForPersonWithOrganizationsInHierarchyRequest($debtor_account_number, $token, $only_valid = 'true', $include_addresses = 'false', $page = '1', $page_size = '50')
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getBoardMembershipsForPersonWithOrganizationsInHierarchy'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getBoardMembershipsForPersonWithOrganizationsInHierarchy'
            );
        }

        $resourcePath = '/api/v1/membersite/persons/{debtorAccountNumber}/boardmembershipsWithOrganizationsInHierarchy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($only_valid !== null) {
            $queryParams['onlyValid'] = ObjectSerializer::toQueryValue($only_valid, null);
        }
        // query params
        if ($include_addresses !== null) {
            $queryParams['includeAddresses'] = ObjectSerializer::toQueryValue($include_addresses, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompaniesForAddingEmploymentsToProfile
     *
     * Get Companies to choose from when adding employments to profile.
     *
     * @param  string $token access token (required)
     * @param  string $search_string search_string (optional)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\CompanyPagedResult
     */
    public function getCompaniesForAddingEmploymentsToProfile($token, $search_string = null, $page = '1', $page_size = '50')
    {
        list($response) = $this->getCompaniesForAddingEmploymentsToProfileWithHttpInfo($token, $search_string, $page, $page_size);
        return $response;
    }

    /**
     * Operation getCompaniesForAddingEmploymentsToProfileWithHttpInfo
     *
     * Get Companies to choose from when adding employments to profile.
     *
     * @param  string $token access token (required)
     * @param  string $search_string (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\CompanyPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompaniesForAddingEmploymentsToProfileWithHttpInfo($token, $search_string = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\CompanyPagedResult';
        $request = $this->getCompaniesForAddingEmploymentsToProfileRequest($token, $search_string, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\CompanyPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompaniesForAddingEmploymentsToProfileAsync
     *
     * Get Companies to choose from when adding employments to profile.
     *
     * @param  string $token access token (required)
     * @param  string $search_string (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompaniesForAddingEmploymentsToProfileAsync($token, $search_string = null, $page = '1', $page_size = '50')
    {
        return $this->getCompaniesForAddingEmploymentsToProfileAsyncWithHttpInfo($token, $search_string, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompaniesForAddingEmploymentsToProfileAsyncWithHttpInfo
     *
     * Get Companies to choose from when adding employments to profile.
     *
     * @param  string $token access token (required)
     * @param  string $search_string (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompaniesForAddingEmploymentsToProfileAsyncWithHttpInfo($token, $search_string = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\CompanyPagedResult';
        $request = $this->getCompaniesForAddingEmploymentsToProfileRequest($token, $search_string, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompaniesForAddingEmploymentsToProfile'
     *
     * @param  string $token access token (required)
     * @param  string $search_string (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCompaniesForAddingEmploymentsToProfileRequest($token, $search_string = null, $page = '1', $page_size = '50')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getCompaniesForAddingEmploymentsToProfile'
            );
        }

        $resourcePath = '/api/v1/membersite/profile/employments/availableCompanies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_string !== null) {
            $queryParams['searchString'] = ObjectSerializer::toQueryValue($search_string, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompaniesFromCompanyRegistryForAddingEmploymentsToProfile
     *
     * @param  string $country_code country_code (required)
     * @param  string $token access token (required)
     * @param  string $search_string search_string (optional)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\Company[]
     */
    public function getCompaniesFromCompanyRegistryForAddingEmploymentsToProfile($country_code, $token, $search_string = null, $page_size = '50')
    {
        list($response) = $this->getCompaniesFromCompanyRegistryForAddingEmploymentsToProfileWithHttpInfo($country_code, $token, $search_string, $page_size);
        return $response;
    }

    /**
     * Operation getCompaniesFromCompanyRegistryForAddingEmploymentsToProfileWithHttpInfo
     *
     * @param  string $country_code (required)
     * @param  string $token access token (required)
     * @param  string $search_string (optional)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\Company[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompaniesFromCompanyRegistryForAddingEmploymentsToProfileWithHttpInfo($country_code, $token, $search_string = null, $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\Company[]';
        $request = $this->getCompaniesFromCompanyRegistryForAddingEmploymentsToProfileRequest($country_code, $token, $search_string, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\Company[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompaniesFromCompanyRegistryForAddingEmploymentsToProfileAsync
     *
     * 
     *
     * @param  string $country_code (required)
     * @param  string $token access token (required)
     * @param  string $search_string (optional)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompaniesFromCompanyRegistryForAddingEmploymentsToProfileAsync($country_code, $token, $search_string = null, $page_size = '50')
    {
        return $this->getCompaniesFromCompanyRegistryForAddingEmploymentsToProfileAsyncWithHttpInfo($country_code, $token, $search_string, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompaniesFromCompanyRegistryForAddingEmploymentsToProfileAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $country_code (required)
     * @param  string $token access token (required)
     * @param  string $search_string (optional)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompaniesFromCompanyRegistryForAddingEmploymentsToProfileAsyncWithHttpInfo($country_code, $token, $search_string = null, $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\Company[]';
        $request = $this->getCompaniesFromCompanyRegistryForAddingEmploymentsToProfileRequest($country_code, $token, $search_string, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompaniesFromCompanyRegistryForAddingEmploymentsToProfile'
     *
     * @param  string $country_code (required)
     * @param  string $token access token (required)
     * @param  string $search_string (optional)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCompaniesFromCompanyRegistryForAddingEmploymentsToProfileRequest($country_code, $token, $search_string = null, $page_size = '50')
    {
        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling getCompaniesFromCompanyRegistryForAddingEmploymentsToProfile'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getCompaniesFromCompanyRegistryForAddingEmploymentsToProfile'
            );
        }

        $resourcePath = '/api/v1/membersite/profile/employments/{countryCode}/availableCompanies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_string !== null) {
            $queryParams['searchString'] = ObjectSerializer::toQueryValue($search_string, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($country_code !== null) {
            $resourcePath = str_replace(
                '{' . 'countryCode' . '}',
                ObjectSerializer::toPathValue($country_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExternalDonationTransactions
     *
     * Get external donation transactions by the given debtor account number
     *
     * @param  string $debtor_account_number debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\DonationTransaction[]
     */
    public function getExternalDonationTransactions($debtor_account_number, $token)
    {
        list($response) = $this->getExternalDonationTransactionsWithHttpInfo($debtor_account_number, $token);
        return $response;
    }

    /**
     * Operation getExternalDonationTransactionsWithHttpInfo
     *
     * Get external donation transactions by the given debtor account number
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\DonationTransaction[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getExternalDonationTransactionsWithHttpInfo($debtor_account_number, $token)
    {
        $returnType = '\Membercare\Client\Model\DonationTransaction[]';
        $request = $this->getExternalDonationTransactionsRequest($debtor_account_number, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\DonationTransaction[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExternalDonationTransactionsAsync
     *
     * Get external donation transactions by the given debtor account number
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalDonationTransactionsAsync($debtor_account_number, $token)
    {
        return $this->getExternalDonationTransactionsAsyncWithHttpInfo($debtor_account_number, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExternalDonationTransactionsAsyncWithHttpInfo
     *
     * Get external donation transactions by the given debtor account number
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExternalDonationTransactionsAsyncWithHttpInfo($debtor_account_number, $token)
    {
        $returnType = '\Membercare\Client\Model\DonationTransaction[]';
        $request = $this->getExternalDonationTransactionsRequest($debtor_account_number, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExternalDonationTransactions'
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExternalDonationTransactionsRequest($debtor_account_number, $token)
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getExternalDonationTransactions'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getExternalDonationTransactions'
            );
        }

        $resourcePath = '/api/v1/membersite/persons/{debtorAccountNumber}/externalDonationTransactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFamilyRelationCategories
     *
     * Gets FamilyRelationCategories.
     *
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\FamilyRelationCategory[]
     */
    public function getFamilyRelationCategories($token)
    {
        list($response) = $this->getFamilyRelationCategoriesWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation getFamilyRelationCategoriesWithHttpInfo
     *
     * Gets FamilyRelationCategories.
     *
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\FamilyRelationCategory[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFamilyRelationCategoriesWithHttpInfo($token)
    {
        $returnType = '\Membercare\Client\Model\FamilyRelationCategory[]';
        $request = $this->getFamilyRelationCategoriesRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\FamilyRelationCategory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFamilyRelationCategoriesAsync
     *
     * Gets FamilyRelationCategories.
     *
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFamilyRelationCategoriesAsync($token)
    {
        return $this->getFamilyRelationCategoriesAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFamilyRelationCategoriesAsyncWithHttpInfo
     *
     * Gets FamilyRelationCategories.
     *
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFamilyRelationCategoriesAsyncWithHttpInfo($token)
    {
        $returnType = '\Membercare\Client\Model\FamilyRelationCategory[]';
        $request = $this->getFamilyRelationCategoriesRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFamilyRelationCategories'
     *
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFamilyRelationCategoriesRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getFamilyRelationCategories'
            );
        }

        $resourcePath = '/api/v1/membersite/family/relationCategories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInternalDonationTransactions
     *
     * Get internal donation transactions by the given debtor account number
     *
     * @param  string $debtor_account_number debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\DonationTransaction[]
     */
    public function getInternalDonationTransactions($debtor_account_number, $token)
    {
        list($response) = $this->getInternalDonationTransactionsWithHttpInfo($debtor_account_number, $token);
        return $response;
    }

    /**
     * Operation getInternalDonationTransactionsWithHttpInfo
     *
     * Get internal donation transactions by the given debtor account number
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\DonationTransaction[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getInternalDonationTransactionsWithHttpInfo($debtor_account_number, $token)
    {
        $returnType = '\Membercare\Client\Model\DonationTransaction[]';
        $request = $this->getInternalDonationTransactionsRequest($debtor_account_number, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\DonationTransaction[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInternalDonationTransactionsAsync
     *
     * Get internal donation transactions by the given debtor account number
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInternalDonationTransactionsAsync($debtor_account_number, $token)
    {
        return $this->getInternalDonationTransactionsAsyncWithHttpInfo($debtor_account_number, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInternalDonationTransactionsAsyncWithHttpInfo
     *
     * Get internal donation transactions by the given debtor account number
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInternalDonationTransactionsAsyncWithHttpInfo($debtor_account_number, $token)
    {
        $returnType = '\Membercare\Client\Model\DonationTransaction[]';
        $request = $this->getInternalDonationTransactionsRequest($debtor_account_number, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInternalDonationTransactions'
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInternalDonationTransactionsRequest($debtor_account_number, $token)
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getInternalDonationTransactions'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getInternalDonationTransactions'
            );
        }

        $resourcePath = '/api/v1/membersite/persons/{debtorAccountNumber}/internalDonationTransactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMemberStatistics
     *
     * Get membershipStatistics for 'My organizations'. Based on the users data access in Membercare.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number debtor_account_number (required)
     * @param  int[] $body body (optional)
     * @param  \DateTime $from_date from_date (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\MembershipStatistics[]
     */
    public function getMemberStatistics($token, $debtor_account_number, $body = null, $from_date = null)
    {
        list($response) = $this->getMemberStatisticsWithHttpInfo($token, $debtor_account_number, $body, $from_date);
        return $response;
    }

    /**
     * Operation getMemberStatisticsWithHttpInfo
     *
     * Get membershipStatistics for 'My organizations'. Based on the users data access in Membercare.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $from_date (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\MembershipStatistics[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMemberStatisticsWithHttpInfo($token, $debtor_account_number, $body = null, $from_date = null)
    {
        $returnType = '\Membercare\Client\Model\MembershipStatistics[]';
        $request = $this->getMemberStatisticsRequest($token, $debtor_account_number, $body, $from_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\MembershipStatistics[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMemberStatisticsAsync
     *
     * Get membershipStatistics for 'My organizations'. Based on the users data access in Membercare.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $from_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMemberStatisticsAsync($token, $debtor_account_number, $body = null, $from_date = null)
    {
        return $this->getMemberStatisticsAsyncWithHttpInfo($token, $debtor_account_number, $body, $from_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMemberStatisticsAsyncWithHttpInfo
     *
     * Get membershipStatistics for 'My organizations'. Based on the users data access in Membercare.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $from_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMemberStatisticsAsyncWithHttpInfo($token, $debtor_account_number, $body = null, $from_date = null)
    {
        $returnType = '\Membercare\Client\Model\MembershipStatistics[]';
        $request = $this->getMemberStatisticsRequest($token, $debtor_account_number, $body, $from_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMemberStatistics'
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $from_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMemberStatisticsRequest($token, $debtor_account_number, $body = null, $from_date = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getMemberStatistics'
            );
        }
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getMemberStatistics'
            );
        }

        $resourcePath = '/api/v1/membersite/myOrganization/{debtorAccountNumber}/memberStatistics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date, 'date-time');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMembersAndBoardMembersReceivingSmsAndEmail
     *
     * Gets members and board members receiving SMS and e-mail based on params given in the body.
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MyOrganizationSendSmsAndEmailParams $body body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\OrganizationsSmsAndEmailReceiversInfo[]
     */
    public function getMembersAndBoardMembersReceivingSmsAndEmail($token, $body = null)
    {
        list($response) = $this->getMembersAndBoardMembersReceivingSmsAndEmailWithHttpInfo($token, $body);
        return $response;
    }

    /**
     * Operation getMembersAndBoardMembersReceivingSmsAndEmailWithHttpInfo
     *
     * Gets members and board members receiving SMS and e-mail based on params given in the body.
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MyOrganizationSendSmsAndEmailParams $body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\OrganizationsSmsAndEmailReceiversInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMembersAndBoardMembersReceivingSmsAndEmailWithHttpInfo($token, $body = null)
    {
        $returnType = '\Membercare\Client\Model\OrganizationsSmsAndEmailReceiversInfo[]';
        $request = $this->getMembersAndBoardMembersReceivingSmsAndEmailRequest($token, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\OrganizationsSmsAndEmailReceiversInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMembersAndBoardMembersReceivingSmsAndEmailAsync
     *
     * Gets members and board members receiving SMS and e-mail based on params given in the body.
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MyOrganizationSendSmsAndEmailParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMembersAndBoardMembersReceivingSmsAndEmailAsync($token, $body = null)
    {
        return $this->getMembersAndBoardMembersReceivingSmsAndEmailAsyncWithHttpInfo($token, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMembersAndBoardMembersReceivingSmsAndEmailAsyncWithHttpInfo
     *
     * Gets members and board members receiving SMS and e-mail based on params given in the body.
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MyOrganizationSendSmsAndEmailParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMembersAndBoardMembersReceivingSmsAndEmailAsyncWithHttpInfo($token, $body = null)
    {
        $returnType = '\Membercare\Client\Model\OrganizationsSmsAndEmailReceiversInfo[]';
        $request = $this->getMembersAndBoardMembersReceivingSmsAndEmailRequest($token, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMembersAndBoardMembersReceivingSmsAndEmail'
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MyOrganizationSendSmsAndEmailParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMembersAndBoardMembersReceivingSmsAndEmailRequest($token, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getMembersAndBoardMembersReceivingSmsAndEmail'
            );
        }

        $resourcePath = '/api/v1/membersite/smsAndEmailRecipients/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMyOrganizations
     *
     * Get Organizations for 'My organizations'. Based on the users data access in Membercare.
     *
     * @param  string $debtor_account_number debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     * @param  bool $include_geographic_districts Will include electoral Districts in the result (optional, default to false)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\OrganizationPagedResult
     */
    public function getMyOrganizations($debtor_account_number, $token, $page = '1', $page_size = '50', $include_geographic_districts = 'false')
    {
        list($response) = $this->getMyOrganizationsWithHttpInfo($debtor_account_number, $token, $page, $page_size, $include_geographic_districts);
        return $response;
    }

    /**
     * Operation getMyOrganizationsWithHttpInfo
     *
     * Get Organizations for 'My organizations'. Based on the users data access in Membercare.
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     * @param  bool $include_geographic_districts Will include electoral Districts in the result (optional, default to false)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\OrganizationPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMyOrganizationsWithHttpInfo($debtor_account_number, $token, $page = '1', $page_size = '50', $include_geographic_districts = 'false')
    {
        $returnType = '\Membercare\Client\Model\OrganizationPagedResult';
        $request = $this->getMyOrganizationsRequest($debtor_account_number, $token, $page, $page_size, $include_geographic_districts);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\OrganizationPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMyOrganizationsAsync
     *
     * Get Organizations for 'My organizations'. Based on the users data access in Membercare.
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     * @param  bool $include_geographic_districts Will include electoral Districts in the result (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMyOrganizationsAsync($debtor_account_number, $token, $page = '1', $page_size = '50', $include_geographic_districts = 'false')
    {
        return $this->getMyOrganizationsAsyncWithHttpInfo($debtor_account_number, $token, $page, $page_size, $include_geographic_districts)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMyOrganizationsAsyncWithHttpInfo
     *
     * Get Organizations for 'My organizations'. Based on the users data access in Membercare.
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     * @param  bool $include_geographic_districts Will include electoral Districts in the result (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMyOrganizationsAsyncWithHttpInfo($debtor_account_number, $token, $page = '1', $page_size = '50', $include_geographic_districts = 'false')
    {
        $returnType = '\Membercare\Client\Model\OrganizationPagedResult';
        $request = $this->getMyOrganizationsRequest($debtor_account_number, $token, $page, $page_size, $include_geographic_districts);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMyOrganizations'
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     * @param  bool $include_geographic_districts Will include electoral Districts in the result (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMyOrganizationsRequest($debtor_account_number, $token, $page = '1', $page_size = '50', $include_geographic_districts = 'false')
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getMyOrganizations'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getMyOrganizations'
            );
        }

        $resourcePath = '/api/v1/membersite/myOrganization/{debtorAccountNumber}/organizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // query params
        if ($include_geographic_districts !== null) {
            $queryParams['includeGeographicDistricts'] = ObjectSerializer::toQueryValue($include_geographic_districts, null);
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOverlappingEmployments
     *
     * Get internal donation transactions by the given debtor account number
     *
     * @param  int $employment_id employment_id (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\Employment[]
     */
    public function getOverlappingEmployments($employment_id, $token)
    {
        list($response) = $this->getOverlappingEmploymentsWithHttpInfo($employment_id, $token);
        return $response;
    }

    /**
     * Operation getOverlappingEmploymentsWithHttpInfo
     *
     * Get internal donation transactions by the given debtor account number
     *
     * @param  int $employment_id (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\Employment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOverlappingEmploymentsWithHttpInfo($employment_id, $token)
    {
        $returnType = '\Membercare\Client\Model\Employment[]';
        $request = $this->getOverlappingEmploymentsRequest($employment_id, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\Employment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\NextOrderNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\NextOrderNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOverlappingEmploymentsAsync
     *
     * Get internal donation transactions by the given debtor account number
     *
     * @param  int $employment_id (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOverlappingEmploymentsAsync($employment_id, $token)
    {
        return $this->getOverlappingEmploymentsAsyncWithHttpInfo($employment_id, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOverlappingEmploymentsAsyncWithHttpInfo
     *
     * Get internal donation transactions by the given debtor account number
     *
     * @param  int $employment_id (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOverlappingEmploymentsAsyncWithHttpInfo($employment_id, $token)
    {
        $returnType = '\Membercare\Client\Model\Employment[]';
        $request = $this->getOverlappingEmploymentsRequest($employment_id, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOverlappingEmployments'
     *
     * @param  int $employment_id (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOverlappingEmploymentsRequest($employment_id, $token)
    {
        // verify the required parameter 'employment_id' is set
        if ($employment_id === null || (is_array($employment_id) && count($employment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employment_id when calling getOverlappingEmployments'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getOverlappingEmployments'
            );
        }

        $resourcePath = '/api/v1/membersite/employments/{employmentId}/overlapping';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($employment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employmentId' . '}',
                ObjectSerializer::toPathValue($employment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentGatewayNextOrderNumber
     *
     * Returns an auto generated next unique order number for payment gateway.
     *
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\NextOrderNumber
     */
    public function getPaymentGatewayNextOrderNumber($token)
    {
        list($response) = $this->getPaymentGatewayNextOrderNumberWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation getPaymentGatewayNextOrderNumberWithHttpInfo
     *
     * Returns an auto generated next unique order number for payment gateway.
     *
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\NextOrderNumber, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentGatewayNextOrderNumberWithHttpInfo($token)
    {
        $returnType = '\Membercare\Client\Model\NextOrderNumber';
        $request = $this->getPaymentGatewayNextOrderNumberRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\NextOrderNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\NextOrderNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentGatewayNextOrderNumberAsync
     *
     * Returns an auto generated next unique order number for payment gateway.
     *
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentGatewayNextOrderNumberAsync($token)
    {
        return $this->getPaymentGatewayNextOrderNumberAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentGatewayNextOrderNumberAsyncWithHttpInfo
     *
     * Returns an auto generated next unique order number for payment gateway.
     *
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentGatewayNextOrderNumberAsyncWithHttpInfo($token)
    {
        $returnType = '\Membercare\Client\Model\NextOrderNumber';
        $request = $this->getPaymentGatewayNextOrderNumberRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentGatewayNextOrderNumber'
     *
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentGatewayNextOrderNumberRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getPaymentGatewayNextOrderNumber'
            );
        }

        $resourcePath = '/api/v1/membersite/paymentGateway/nextOrderNumber';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonAccessibleArrangementTemplates
     *
     * Gets accessible arrangement templates for a person via boardmemberfunction with intersecting organizations
     *
     * @param  string $debtor_account_number The members debtor account number (required)
     * @param  string $token access token (required)
     * @param  int $board_member_category_roles Flags enum BoardMemberCategoryRoles integer value (optional)
     * @param  bool $only_ids Omits the arrangement in the result if true (optional)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\PersonAccessibleArrangementTemplatePagedResult
     */
    public function getPersonAccessibleArrangementTemplates($debtor_account_number, $token, $board_member_category_roles = null, $only_ids = null, $page = '1', $page_size = '50')
    {
        list($response) = $this->getPersonAccessibleArrangementTemplatesWithHttpInfo($debtor_account_number, $token, $board_member_category_roles, $only_ids, $page, $page_size);
        return $response;
    }

    /**
     * Operation getPersonAccessibleArrangementTemplatesWithHttpInfo
     *
     * Gets accessible arrangement templates for a person via boardmemberfunction with intersecting organizations
     *
     * @param  string $debtor_account_number The members debtor account number (required)
     * @param  string $token access token (required)
     * @param  int $board_member_category_roles Flags enum BoardMemberCategoryRoles integer value (optional)
     * @param  bool $only_ids Omits the arrangement in the result if true (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\PersonAccessibleArrangementTemplatePagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonAccessibleArrangementTemplatesWithHttpInfo($debtor_account_number, $token, $board_member_category_roles = null, $only_ids = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\PersonAccessibleArrangementTemplatePagedResult';
        $request = $this->getPersonAccessibleArrangementTemplatesRequest($debtor_account_number, $token, $board_member_category_roles, $only_ids, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\PersonAccessibleArrangementTemplatePagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPersonAccessibleArrangementTemplatesAsync
     *
     * Gets accessible arrangement templates for a person via boardmemberfunction with intersecting organizations
     *
     * @param  string $debtor_account_number The members debtor account number (required)
     * @param  string $token access token (required)
     * @param  int $board_member_category_roles Flags enum BoardMemberCategoryRoles integer value (optional)
     * @param  bool $only_ids Omits the arrangement in the result if true (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonAccessibleArrangementTemplatesAsync($debtor_account_number, $token, $board_member_category_roles = null, $only_ids = null, $page = '1', $page_size = '50')
    {
        return $this->getPersonAccessibleArrangementTemplatesAsyncWithHttpInfo($debtor_account_number, $token, $board_member_category_roles, $only_ids, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPersonAccessibleArrangementTemplatesAsyncWithHttpInfo
     *
     * Gets accessible arrangement templates for a person via boardmemberfunction with intersecting organizations
     *
     * @param  string $debtor_account_number The members debtor account number (required)
     * @param  string $token access token (required)
     * @param  int $board_member_category_roles Flags enum BoardMemberCategoryRoles integer value (optional)
     * @param  bool $only_ids Omits the arrangement in the result if true (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonAccessibleArrangementTemplatesAsyncWithHttpInfo($debtor_account_number, $token, $board_member_category_roles = null, $only_ids = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\PersonAccessibleArrangementTemplatePagedResult';
        $request = $this->getPersonAccessibleArrangementTemplatesRequest($debtor_account_number, $token, $board_member_category_roles, $only_ids, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPersonAccessibleArrangementTemplates'
     *
     * @param  string $debtor_account_number The members debtor account number (required)
     * @param  string $token access token (required)
     * @param  int $board_member_category_roles Flags enum BoardMemberCategoryRoles integer value (optional)
     * @param  bool $only_ids Omits the arrangement in the result if true (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPersonAccessibleArrangementTemplatesRequest($debtor_account_number, $token, $board_member_category_roles = null, $only_ids = null, $page = '1', $page_size = '50')
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getPersonAccessibleArrangementTemplates'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getPersonAccessibleArrangementTemplates'
            );
        }

        $resourcePath = '/api/v1/membersite/persons/{debtorAccountNumber}/arrangementTemplates/accessible';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($board_member_category_roles !== null) {
            $queryParams['boardMemberCategoryRoles'] = ObjectSerializer::toQueryValue($board_member_category_roles, 'int64');
        }
        // query params
        if ($only_ids !== null) {
            $queryParams['onlyIds'] = ObjectSerializer::toQueryValue($only_ids, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonAccessibleArrangements
     *
     * Gets accessible arrangements for a person via boardmemberfunctions with intersecting organizations
     *
     * @param  string $debtor_account_number The members debtor account number (required)
     * @param  string $token access token (required)
     * @param  int $board_member_category_roles Flags enum BoardMemberCategoryRoles integer value (optional)
     * @param  bool $web_enabled Applicable arrangements with this value or any if omitted (optional)
     * @param  bool $only_ids Omits the arrangement in the result if true (optional)
     * @param  bool $exclude_html_text exclude_html_text (optional, default to true)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\PersonAccessibleArrangementPagedResult
     */
    public function getPersonAccessibleArrangements($debtor_account_number, $token, $board_member_category_roles = null, $web_enabled = null, $only_ids = null, $exclude_html_text = 'true', $page = '1', $page_size = '50')
    {
        list($response) = $this->getPersonAccessibleArrangementsWithHttpInfo($debtor_account_number, $token, $board_member_category_roles, $web_enabled, $only_ids, $exclude_html_text, $page, $page_size);
        return $response;
    }

    /**
     * Operation getPersonAccessibleArrangementsWithHttpInfo
     *
     * Gets accessible arrangements for a person via boardmemberfunctions with intersecting organizations
     *
     * @param  string $debtor_account_number The members debtor account number (required)
     * @param  string $token access token (required)
     * @param  int $board_member_category_roles Flags enum BoardMemberCategoryRoles integer value (optional)
     * @param  bool $web_enabled Applicable arrangements with this value or any if omitted (optional)
     * @param  bool $only_ids Omits the arrangement in the result if true (optional)
     * @param  bool $exclude_html_text (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\PersonAccessibleArrangementPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonAccessibleArrangementsWithHttpInfo($debtor_account_number, $token, $board_member_category_roles = null, $web_enabled = null, $only_ids = null, $exclude_html_text = 'true', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\PersonAccessibleArrangementPagedResult';
        $request = $this->getPersonAccessibleArrangementsRequest($debtor_account_number, $token, $board_member_category_roles, $web_enabled, $only_ids, $exclude_html_text, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\PersonAccessibleArrangementPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPersonAccessibleArrangementsAsync
     *
     * Gets accessible arrangements for a person via boardmemberfunctions with intersecting organizations
     *
     * @param  string $debtor_account_number The members debtor account number (required)
     * @param  string $token access token (required)
     * @param  int $board_member_category_roles Flags enum BoardMemberCategoryRoles integer value (optional)
     * @param  bool $web_enabled Applicable arrangements with this value or any if omitted (optional)
     * @param  bool $only_ids Omits the arrangement in the result if true (optional)
     * @param  bool $exclude_html_text (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonAccessibleArrangementsAsync($debtor_account_number, $token, $board_member_category_roles = null, $web_enabled = null, $only_ids = null, $exclude_html_text = 'true', $page = '1', $page_size = '50')
    {
        return $this->getPersonAccessibleArrangementsAsyncWithHttpInfo($debtor_account_number, $token, $board_member_category_roles, $web_enabled, $only_ids, $exclude_html_text, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPersonAccessibleArrangementsAsyncWithHttpInfo
     *
     * Gets accessible arrangements for a person via boardmemberfunctions with intersecting organizations
     *
     * @param  string $debtor_account_number The members debtor account number (required)
     * @param  string $token access token (required)
     * @param  int $board_member_category_roles Flags enum BoardMemberCategoryRoles integer value (optional)
     * @param  bool $web_enabled Applicable arrangements with this value or any if omitted (optional)
     * @param  bool $only_ids Omits the arrangement in the result if true (optional)
     * @param  bool $exclude_html_text (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonAccessibleArrangementsAsyncWithHttpInfo($debtor_account_number, $token, $board_member_category_roles = null, $web_enabled = null, $only_ids = null, $exclude_html_text = 'true', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\PersonAccessibleArrangementPagedResult';
        $request = $this->getPersonAccessibleArrangementsRequest($debtor_account_number, $token, $board_member_category_roles, $web_enabled, $only_ids, $exclude_html_text, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPersonAccessibleArrangements'
     *
     * @param  string $debtor_account_number The members debtor account number (required)
     * @param  string $token access token (required)
     * @param  int $board_member_category_roles Flags enum BoardMemberCategoryRoles integer value (optional)
     * @param  bool $web_enabled Applicable arrangements with this value or any if omitted (optional)
     * @param  bool $only_ids Omits the arrangement in the result if true (optional)
     * @param  bool $exclude_html_text (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPersonAccessibleArrangementsRequest($debtor_account_number, $token, $board_member_category_roles = null, $web_enabled = null, $only_ids = null, $exclude_html_text = 'true', $page = '1', $page_size = '50')
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getPersonAccessibleArrangements'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getPersonAccessibleArrangements'
            );
        }

        $resourcePath = '/api/v1/membersite/persons/{debtorAccountNumber}/arrangements/accessible';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($board_member_category_roles !== null) {
            $queryParams['boardMemberCategoryRoles'] = ObjectSerializer::toQueryValue($board_member_category_roles, 'int64');
        }
        // query params
        if ($web_enabled !== null) {
            $queryParams['webEnabled'] = ObjectSerializer::toQueryValue($web_enabled, null);
        }
        // query params
        if ($only_ids !== null) {
            $queryParams['onlyIds'] = ObjectSerializer::toQueryValue($only_ids, null);
        }
        // query params
        if ($exclude_html_text !== null) {
            $queryParams['excludeHtmlText'] = ObjectSerializer::toQueryValue($exclude_html_text, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonByOrganization
     *
     * Gets accessible persons using various measures via organization association
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  bool $only_valid only_valid (optional, default to true)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\PersonPagedResult
     */
    public function getPersonByOrganization($organization_identification, $token, $search_string = null, $only_valid = 'true', $page = '1', $page_size = '50')
    {
        list($response) = $this->getPersonByOrganizationWithHttpInfo($organization_identification, $token, $search_string, $only_valid, $page, $page_size);
        return $response;
    }

    /**
     * Operation getPersonByOrganizationWithHttpInfo
     *
     * Gets accessible persons using various measures via organization association
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  bool $only_valid (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\PersonPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonByOrganizationWithHttpInfo($organization_identification, $token, $search_string = null, $only_valid = 'true', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\PersonPagedResult';
        $request = $this->getPersonByOrganizationRequest($organization_identification, $token, $search_string, $only_valid, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\PersonPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPersonByOrganizationAsync
     *
     * Gets accessible persons using various measures via organization association
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  bool $only_valid (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonByOrganizationAsync($organization_identification, $token, $search_string = null, $only_valid = 'true', $page = '1', $page_size = '50')
    {
        return $this->getPersonByOrganizationAsyncWithHttpInfo($organization_identification, $token, $search_string, $only_valid, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPersonByOrganizationAsyncWithHttpInfo
     *
     * Gets accessible persons using various measures via organization association
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  bool $only_valid (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonByOrganizationAsyncWithHttpInfo($organization_identification, $token, $search_string = null, $only_valid = 'true', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\PersonPagedResult';
        $request = $this->getPersonByOrganizationRequest($organization_identification, $token, $search_string, $only_valid, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPersonByOrganization'
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  bool $only_valid (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPersonByOrganizationRequest($organization_identification, $token, $search_string = null, $only_valid = 'true', $page = '1', $page_size = '50')
    {
        // verify the required parameter 'organization_identification' is set
        if ($organization_identification === null || (is_array($organization_identification) && count($organization_identification) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_identification when calling getPersonByOrganization'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getPersonByOrganization'
            );
        }

        $resourcePath = '/api/v1/membersite/organizations/{organizationIdentification}/persons/accessible';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_string !== null) {
            $queryParams['searchString'] = ObjectSerializer::toQueryValue($search_string, null);
        }
        // query params
        if ($only_valid !== null) {
            $queryParams['onlyValid'] = ObjectSerializer::toQueryValue($only_valid, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($organization_identification !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationIdentification' . '}',
                ObjectSerializer::toPathValue($organization_identification),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonByOrganizationInHierarchy
     *
     * Search persons in organization and the underlying hierarchy - Members and board members
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\PersonPagedResult
     */
    public function getPersonByOrganizationInHierarchy($organization_identification, $token, $search_string = null, $page = '1', $page_size = '50')
    {
        list($response) = $this->getPersonByOrganizationInHierarchyWithHttpInfo($organization_identification, $token, $search_string, $page, $page_size);
        return $response;
    }

    /**
     * Operation getPersonByOrganizationInHierarchyWithHttpInfo
     *
     * Search persons in organization and the underlying hierarchy - Members and board members
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\PersonPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonByOrganizationInHierarchyWithHttpInfo($organization_identification, $token, $search_string = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\PersonPagedResult';
        $request = $this->getPersonByOrganizationInHierarchyRequest($organization_identification, $token, $search_string, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\PersonPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPersonByOrganizationInHierarchyAsync
     *
     * Search persons in organization and the underlying hierarchy - Members and board members
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonByOrganizationInHierarchyAsync($organization_identification, $token, $search_string = null, $page = '1', $page_size = '50')
    {
        return $this->getPersonByOrganizationInHierarchyAsyncWithHttpInfo($organization_identification, $token, $search_string, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPersonByOrganizationInHierarchyAsyncWithHttpInfo
     *
     * Search persons in organization and the underlying hierarchy - Members and board members
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonByOrganizationInHierarchyAsyncWithHttpInfo($organization_identification, $token, $search_string = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\PersonPagedResult';
        $request = $this->getPersonByOrganizationInHierarchyRequest($organization_identification, $token, $search_string, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPersonByOrganizationInHierarchy'
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPersonByOrganizationInHierarchyRequest($organization_identification, $token, $search_string = null, $page = '1', $page_size = '50')
    {
        // verify the required parameter 'organization_identification' is set
        if ($organization_identification === null || (is_array($organization_identification) && count($organization_identification) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_identification when calling getPersonByOrganizationInHierarchy'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getPersonByOrganizationInHierarchy'
            );
        }

        $resourcePath = '/api/v1/membersite/organizations/{organizationIdentification}/hierarchy/persons/accessible';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_string !== null) {
            $queryParams['searchString'] = ObjectSerializer::toQueryValue($search_string, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($organization_identification !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationIdentification' . '}',
                ObjectSerializer::toPathValue($organization_identification),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonsByDebtorAccountNumberAndBirthDateAsync
     *
     * Search for persons with a specific debtorAccountNumber and birthDate
     *
     * @param  string $debtor_account_number debtor_account_number (required)
     * @param  \DateTime $birth_date birth_date (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\Person[]
     */
    public function getPersonsByDebtorAccountNumberAndBirthDateAsync($debtor_account_number, $birth_date, $token)
    {
        list($response) = $this->getPersonsByDebtorAccountNumberAndBirthDateAsyncWithHttpInfo($debtor_account_number, $birth_date, $token);
        return $response;
    }

    /**
     * Operation getPersonsByDebtorAccountNumberAndBirthDateAsyncWithHttpInfo
     *
     * Search for persons with a specific debtorAccountNumber and birthDate
     *
     * @param  string $debtor_account_number (required)
     * @param  \DateTime $birth_date (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\Person[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonsByDebtorAccountNumberAndBirthDateAsyncWithHttpInfo($debtor_account_number, $birth_date, $token)
    {
        $returnType = '\Membercare\Client\Model\Person[]';
        $request = $this->getPersonsByDebtorAccountNumberAndBirthDateAsyncRequest($debtor_account_number, $birth_date, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\Person[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPersonsByDebtorAccountNumberAndBirthDateAsyncAsync
     *
     * Search for persons with a specific debtorAccountNumber and birthDate
     *
     * @param  string $debtor_account_number (required)
     * @param  \DateTime $birth_date (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonsByDebtorAccountNumberAndBirthDateAsyncAsync($debtor_account_number, $birth_date, $token)
    {
        return $this->getPersonsByDebtorAccountNumberAndBirthDateAsyncAsyncWithHttpInfo($debtor_account_number, $birth_date, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPersonsByDebtorAccountNumberAndBirthDateAsyncAsyncWithHttpInfo
     *
     * Search for persons with a specific debtorAccountNumber and birthDate
     *
     * @param  string $debtor_account_number (required)
     * @param  \DateTime $birth_date (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonsByDebtorAccountNumberAndBirthDateAsyncAsyncWithHttpInfo($debtor_account_number, $birth_date, $token)
    {
        $returnType = '\Membercare\Client\Model\Person[]';
        $request = $this->getPersonsByDebtorAccountNumberAndBirthDateAsyncRequest($debtor_account_number, $birth_date, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPersonsByDebtorAccountNumberAndBirthDateAsync'
     *
     * @param  string $debtor_account_number (required)
     * @param  \DateTime $birth_date (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPersonsByDebtorAccountNumberAndBirthDateAsyncRequest($debtor_account_number, $birth_date, $token)
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getPersonsByDebtorAccountNumberAndBirthDateAsync'
            );
        }
        // verify the required parameter 'birth_date' is set
        if ($birth_date === null || (is_array($birth_date) && count($birth_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $birth_date when calling getPersonsByDebtorAccountNumberAndBirthDateAsync'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getPersonsByDebtorAccountNumberAndBirthDateAsync'
            );
        }

        $resourcePath = '/api/v1/membersite/persons/{debtorAccountNumber}/birthDate/{birthDate}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }
        // path params
        if ($birth_date !== null) {
            $resourcePath = str_replace(
                '{' . 'birthDate' . '}',
                ObjectSerializer::toPathValue($birth_date),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonsWithBoardMembershipByOrganization
     *
     * Search with search string from persons with board memberships in an organization
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  bool $only_valid only_valid (optional, default to true)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\PersonPagedResult
     */
    public function getPersonsWithBoardMembershipByOrganization($organization_identification, $token, $search_string = null, $only_valid = 'true', $page = '1', $page_size = '50')
    {
        list($response) = $this->getPersonsWithBoardMembershipByOrganizationWithHttpInfo($organization_identification, $token, $search_string, $only_valid, $page, $page_size);
        return $response;
    }

    /**
     * Operation getPersonsWithBoardMembershipByOrganizationWithHttpInfo
     *
     * Search with search string from persons with board memberships in an organization
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  bool $only_valid (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\PersonPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonsWithBoardMembershipByOrganizationWithHttpInfo($organization_identification, $token, $search_string = null, $only_valid = 'true', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\PersonPagedResult';
        $request = $this->getPersonsWithBoardMembershipByOrganizationRequest($organization_identification, $token, $search_string, $only_valid, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\PersonPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPersonsWithBoardMembershipByOrganizationAsync
     *
     * Search with search string from persons with board memberships in an organization
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  bool $only_valid (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonsWithBoardMembershipByOrganizationAsync($organization_identification, $token, $search_string = null, $only_valid = 'true', $page = '1', $page_size = '50')
    {
        return $this->getPersonsWithBoardMembershipByOrganizationAsyncWithHttpInfo($organization_identification, $token, $search_string, $only_valid, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPersonsWithBoardMembershipByOrganizationAsyncWithHttpInfo
     *
     * Search with search string from persons with board memberships in an organization
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  bool $only_valid (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonsWithBoardMembershipByOrganizationAsyncWithHttpInfo($organization_identification, $token, $search_string = null, $only_valid = 'true', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\PersonPagedResult';
        $request = $this->getPersonsWithBoardMembershipByOrganizationRequest($organization_identification, $token, $search_string, $only_valid, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPersonsWithBoardMembershipByOrganization'
     *
     * @param  string $organization_identification The organizations identification (required)
     * @param  string $token access token (required)
     * @param  string $search_string Narrow result to persons containing this in fullname (optional)
     * @param  bool $only_valid (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPersonsWithBoardMembershipByOrganizationRequest($organization_identification, $token, $search_string = null, $only_valid = 'true', $page = '1', $page_size = '50')
    {
        // verify the required parameter 'organization_identification' is set
        if ($organization_identification === null || (is_array($organization_identification) && count($organization_identification) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_identification when calling getPersonsWithBoardMembershipByOrganization'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getPersonsWithBoardMembershipByOrganization'
            );
        }

        $resourcePath = '/api/v1/membersite/organizations/{organizationIdentification}/persons/hasBoardmembership';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_string !== null) {
            $queryParams['searchString'] = ObjectSerializer::toQueryValue($search_string, null);
        }
        // query params
        if ($only_valid !== null) {
            $queryParams['onlyValid'] = ObjectSerializer::toQueryValue($only_valid, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($organization_identification !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationIdentification' . '}',
                ObjectSerializer::toPathValue($organization_identification),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReport
     *
     * Get a report by its ID
     *
     * @param  int $id The ID of the report (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\ReportService
     */
    public function getReport($id, $token)
    {
        list($response) = $this->getReportWithHttpInfo($id, $token);
        return $response;
    }

    /**
     * Operation getReportWithHttpInfo
     *
     * Get a report by its ID
     *
     * @param  int $id The ID of the report (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\ReportService, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportWithHttpInfo($id, $token)
    {
        $returnType = '\Membercare\Client\Model\ReportService';
        $request = $this->getReportRequest($id, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ReportService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportAsync
     *
     * Get a report by its ID
     *
     * @param  int $id The ID of the report (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportAsync($id, $token)
    {
        return $this->getReportAsyncWithHttpInfo($id, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportAsyncWithHttpInfo
     *
     * Get a report by its ID
     *
     * @param  int $id The ID of the report (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportAsyncWithHttpInfo($id, $token)
    {
        $returnType = '\Membercare\Client\Model\ReportService';
        $request = $this->getReportRequest($id, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReport'
     *
     * @param  int $id The ID of the report (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getReportRequest($id, $token)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getReport'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getReport'
            );
        }

        $resourcePath = '/api/v1/membersite/report/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReportNumberOfViews
     *
     * Get number of report view
     *
     * @param  string $token access token (required)
     * @param  int $seconds_ago Number of seconds back in time that views are included for count (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\ReportServiceAccessLogViews
     */
    public function getReportNumberOfViews($token, $seconds_ago = null)
    {
        list($response) = $this->getReportNumberOfViewsWithHttpInfo($token, $seconds_ago);
        return $response;
    }

    /**
     * Operation getReportNumberOfViewsWithHttpInfo
     *
     * Get number of report view
     *
     * @param  string $token access token (required)
     * @param  int $seconds_ago Number of seconds back in time that views are included for count (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\ReportServiceAccessLogViews, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportNumberOfViewsWithHttpInfo($token, $seconds_ago = null)
    {
        $returnType = '\Membercare\Client\Model\ReportServiceAccessLogViews';
        $request = $this->getReportNumberOfViewsRequest($token, $seconds_ago);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ReportServiceAccessLogViews',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportNumberOfViewsAsync
     *
     * Get number of report view
     *
     * @param  string $token access token (required)
     * @param  int $seconds_ago Number of seconds back in time that views are included for count (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportNumberOfViewsAsync($token, $seconds_ago = null)
    {
        return $this->getReportNumberOfViewsAsyncWithHttpInfo($token, $seconds_ago)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportNumberOfViewsAsyncWithHttpInfo
     *
     * Get number of report view
     *
     * @param  string $token access token (required)
     * @param  int $seconds_ago Number of seconds back in time that views are included for count (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportNumberOfViewsAsyncWithHttpInfo($token, $seconds_ago = null)
    {
        $returnType = '\Membercare\Client\Model\ReportServiceAccessLogViews';
        $request = $this->getReportNumberOfViewsRequest($token, $seconds_ago);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReportNumberOfViews'
     *
     * @param  string $token access token (required)
     * @param  int $seconds_ago Number of seconds back in time that views are included for count (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getReportNumberOfViewsRequest($token, $seconds_ago = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getReportNumberOfViews'
            );
        }

        $resourcePath = '/api/v1/membersite/reportnumberofviews';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($seconds_ago !== null) {
            $queryParams['secondsAgo'] = ObjectSerializer::toQueryValue($seconds_ago, 'int64');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReports
     *
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\ReportService[]
     */
    public function getReports($token)
    {
        list($response) = $this->getReportsWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation getReportsWithHttpInfo
     *
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\ReportService[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getReportsWithHttpInfo($token)
    {
        $returnType = '\Membercare\Client\Model\ReportService[]';
        $request = $this->getReportsRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ReportService[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReportsAsync
     *
     * 
     *
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportsAsync($token)
    {
        return $this->getReportsAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReportsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReportsAsyncWithHttpInfo($token)
    {
        $returnType = '\Membercare\Client\Model\ReportService[]';
        $request = $this->getReportsRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReports'
     *
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getReportsRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getReports'
            );
        }

        $resourcePath = '/api/v1/membersite/reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSalesOrganization
     *
     * Gets the sales organization and company
     *
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\Company
     */
    public function getSalesOrganization($token)
    {
        list($response) = $this->getSalesOrganizationWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation getSalesOrganizationWithHttpInfo
     *
     * Gets the sales organization and company
     *
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\Company, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSalesOrganizationWithHttpInfo($token)
    {
        $returnType = '\Membercare\Client\Model\Company';
        $request = $this->getSalesOrganizationRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\Company',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSalesOrganizationAsync
     *
     * Gets the sales organization and company
     *
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSalesOrganizationAsync($token)
    {
        return $this->getSalesOrganizationAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSalesOrganizationAsyncWithHttpInfo
     *
     * Gets the sales organization and company
     *
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSalesOrganizationAsyncWithHttpInfo($token)
    {
        $returnType = '\Membercare\Client\Model\Company';
        $request = $this->getSalesOrganizationRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSalesOrganization'
     *
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSalesOrganizationRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getSalesOrganization'
            );
        }

        $resourcePath = '/api/v1/membersite/myInvoices/salesOrganization';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation membershipMembersAndBalanceInMyOrganizationApi
     *
     * Get a list of membership members in 'My organizations'. Based on the users data access in Membercare. Included is also the balance related to the Member.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number debtor_account_number (required)
     * @param  int[] $body body (optional)
     * @param  \DateTime $valid_on valid_on (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\MembershipAndBalance[]
     */
    public function membershipMembersAndBalanceInMyOrganizationApi($token, $debtor_account_number, $body = null, $valid_on = null)
    {
        list($response) = $this->membershipMembersAndBalanceInMyOrganizationApiWithHttpInfo($token, $debtor_account_number, $body, $valid_on);
        return $response;
    }

    /**
     * Operation membershipMembersAndBalanceInMyOrganizationApiWithHttpInfo
     *
     * Get a list of membership members in 'My organizations'. Based on the users data access in Membercare. Included is also the balance related to the Member.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $valid_on (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\MembershipAndBalance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function membershipMembersAndBalanceInMyOrganizationApiWithHttpInfo($token, $debtor_account_number, $body = null, $valid_on = null)
    {
        $returnType = '\Membercare\Client\Model\MembershipAndBalance[]';
        $request = $this->membershipMembersAndBalanceInMyOrganizationApiRequest($token, $debtor_account_number, $body, $valid_on);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\MembershipAndBalance[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation membershipMembersAndBalanceInMyOrganizationApiAsync
     *
     * Get a list of membership members in 'My organizations'. Based on the users data access in Membercare. Included is also the balance related to the Member.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $valid_on (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function membershipMembersAndBalanceInMyOrganizationApiAsync($token, $debtor_account_number, $body = null, $valid_on = null)
    {
        return $this->membershipMembersAndBalanceInMyOrganizationApiAsyncWithHttpInfo($token, $debtor_account_number, $body, $valid_on)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation membershipMembersAndBalanceInMyOrganizationApiAsyncWithHttpInfo
     *
     * Get a list of membership members in 'My organizations'. Based on the users data access in Membercare. Included is also the balance related to the Member.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $valid_on (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function membershipMembersAndBalanceInMyOrganizationApiAsyncWithHttpInfo($token, $debtor_account_number, $body = null, $valid_on = null)
    {
        $returnType = '\Membercare\Client\Model\MembershipAndBalance[]';
        $request = $this->membershipMembersAndBalanceInMyOrganizationApiRequest($token, $debtor_account_number, $body, $valid_on);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'membershipMembersAndBalanceInMyOrganizationApi'
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $valid_on (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function membershipMembersAndBalanceInMyOrganizationApiRequest($token, $debtor_account_number, $body = null, $valid_on = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling membershipMembersAndBalanceInMyOrganizationApi'
            );
        }
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling membershipMembersAndBalanceInMyOrganizationApi'
            );
        }

        $resourcePath = '/api/v1/membersite/myOrganization/{debtorAccountNumber}/membersAndBalance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($valid_on !== null) {
            $queryParams['validOn'] = ObjectSerializer::toQueryValue($valid_on, 'date-time');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation membershipMembersAndKeyAffiliateDatesInMyOrganizationApi
     *
     * Get a paged result of membership members and key affiliate dates in 'My organization'. Based on the users data access in Membercare.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number / (required)
     * @param  int[] $body body (optional)
     * @param  \DateTime $valid_on valid_on (optional)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\MembershipAndKeyAffiliateDatesPagedResult
     */
    public function membershipMembersAndKeyAffiliateDatesInMyOrganizationApi($token, $debtor_account_number, $body = null, $valid_on = null, $page = '1', $page_size = '50')
    {
        list($response) = $this->membershipMembersAndKeyAffiliateDatesInMyOrganizationApiWithHttpInfo($token, $debtor_account_number, $body, $valid_on, $page, $page_size);
        return $response;
    }

    /**
     * Operation membershipMembersAndKeyAffiliateDatesInMyOrganizationApiWithHttpInfo
     *
     * Get a paged result of membership members and key affiliate dates in 'My organization'. Based on the users data access in Membercare.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number / (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $valid_on (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\MembershipAndKeyAffiliateDatesPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function membershipMembersAndKeyAffiliateDatesInMyOrganizationApiWithHttpInfo($token, $debtor_account_number, $body = null, $valid_on = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\MembershipAndKeyAffiliateDatesPagedResult';
        $request = $this->membershipMembersAndKeyAffiliateDatesInMyOrganizationApiRequest($token, $debtor_account_number, $body, $valid_on, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\MembershipAndKeyAffiliateDatesPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation membershipMembersAndKeyAffiliateDatesInMyOrganizationApiAsync
     *
     * Get a paged result of membership members and key affiliate dates in 'My organization'. Based on the users data access in Membercare.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number / (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $valid_on (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function membershipMembersAndKeyAffiliateDatesInMyOrganizationApiAsync($token, $debtor_account_number, $body = null, $valid_on = null, $page = '1', $page_size = '50')
    {
        return $this->membershipMembersAndKeyAffiliateDatesInMyOrganizationApiAsyncWithHttpInfo($token, $debtor_account_number, $body, $valid_on, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation membershipMembersAndKeyAffiliateDatesInMyOrganizationApiAsyncWithHttpInfo
     *
     * Get a paged result of membership members and key affiliate dates in 'My organization'. Based on the users data access in Membercare.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number / (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $valid_on (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function membershipMembersAndKeyAffiliateDatesInMyOrganizationApiAsyncWithHttpInfo($token, $debtor_account_number, $body = null, $valid_on = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\MembershipAndKeyAffiliateDatesPagedResult';
        $request = $this->membershipMembersAndKeyAffiliateDatesInMyOrganizationApiRequest($token, $debtor_account_number, $body, $valid_on, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'membershipMembersAndKeyAffiliateDatesInMyOrganizationApi'
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number / (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $valid_on (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function membershipMembersAndKeyAffiliateDatesInMyOrganizationApiRequest($token, $debtor_account_number, $body = null, $valid_on = null, $page = '1', $page_size = '50')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling membershipMembersAndKeyAffiliateDatesInMyOrganizationApi'
            );
        }
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling membershipMembersAndKeyAffiliateDatesInMyOrganizationApi'
            );
        }

        $resourcePath = '/api/v1/membersite/myOrganization/{debtorAccountNumber}/membersAndKeyAffiliateDates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($valid_on !== null) {
            $queryParams['validOn'] = ObjectSerializer::toQueryValue($valid_on, 'date-time');
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation membershipMembersInMyOrganizationApi
     *
     * Get a paged result of membership members in 'My organization'. Based on the users data access in Membercare.
     *
     * @param  string $debtor_account_number debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  \DateTime $valid_on valid_on (optional)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\MembershipPagedResult
     */
    public function membershipMembersInMyOrganizationApi($debtor_account_number, $token, $valid_on = null, $page = '1', $page_size = '50')
    {
        list($response) = $this->membershipMembersInMyOrganizationApiWithHttpInfo($debtor_account_number, $token, $valid_on, $page, $page_size);
        return $response;
    }

    /**
     * Operation membershipMembersInMyOrganizationApiWithHttpInfo
     *
     * Get a paged result of membership members in 'My organization'. Based on the users data access in Membercare.
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  \DateTime $valid_on (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\MembershipPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function membershipMembersInMyOrganizationApiWithHttpInfo($debtor_account_number, $token, $valid_on = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\MembershipPagedResult';
        $request = $this->membershipMembersInMyOrganizationApiRequest($debtor_account_number, $token, $valid_on, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\MembershipPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation membershipMembersInMyOrganizationApiAsync
     *
     * Get a paged result of membership members in 'My organization'. Based on the users data access in Membercare.
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  \DateTime $valid_on (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function membershipMembersInMyOrganizationApiAsync($debtor_account_number, $token, $valid_on = null, $page = '1', $page_size = '50')
    {
        return $this->membershipMembersInMyOrganizationApiAsyncWithHttpInfo($debtor_account_number, $token, $valid_on, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation membershipMembersInMyOrganizationApiAsyncWithHttpInfo
     *
     * Get a paged result of membership members in 'My organization'. Based on the users data access in Membercare.
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  \DateTime $valid_on (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function membershipMembersInMyOrganizationApiAsyncWithHttpInfo($debtor_account_number, $token, $valid_on = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\MembershipPagedResult';
        $request = $this->membershipMembersInMyOrganizationApiRequest($debtor_account_number, $token, $valid_on, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'membershipMembersInMyOrganizationApi'
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  \DateTime $valid_on (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function membershipMembersInMyOrganizationApiRequest($debtor_account_number, $token, $valid_on = null, $page = '1', $page_size = '50')
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling membershipMembersInMyOrganizationApi'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling membershipMembersInMyOrganizationApi'
            );
        }

        $resourcePath = '/api/v1/membersite/myOrganization/{debtorAccountNumber}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($valid_on !== null) {
            $queryParams['validOn'] = ObjectSerializer::toQueryValue($valid_on, 'date-time');
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation membershipMembersWithDueAmount
     *
     * Get a list of membership members in 'My organizations'. Based on the users data access in Membercare. Included is also the due amount related to the Member.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number debtor_account_number (required)
     * @param  int[] $body body (optional)
     * @param  \DateTime $valid_on valid_on (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\MembershipAndDueAmount[]
     */
    public function membershipMembersWithDueAmount($token, $debtor_account_number, $body = null, $valid_on = null)
    {
        list($response) = $this->membershipMembersWithDueAmountWithHttpInfo($token, $debtor_account_number, $body, $valid_on);
        return $response;
    }

    /**
     * Operation membershipMembersWithDueAmountWithHttpInfo
     *
     * Get a list of membership members in 'My organizations'. Based on the users data access in Membercare. Included is also the due amount related to the Member.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $valid_on (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\MembershipAndDueAmount[], HTTP status code, HTTP response headers (array of strings)
     */
    public function membershipMembersWithDueAmountWithHttpInfo($token, $debtor_account_number, $body = null, $valid_on = null)
    {
        $returnType = '\Membercare\Client\Model\MembershipAndDueAmount[]';
        $request = $this->membershipMembersWithDueAmountRequest($token, $debtor_account_number, $body, $valid_on);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\MembershipAndDueAmount[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation membershipMembersWithDueAmountAsync
     *
     * Get a list of membership members in 'My organizations'. Based on the users data access in Membercare. Included is also the due amount related to the Member.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $valid_on (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function membershipMembersWithDueAmountAsync($token, $debtor_account_number, $body = null, $valid_on = null)
    {
        return $this->membershipMembersWithDueAmountAsyncWithHttpInfo($token, $debtor_account_number, $body, $valid_on)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation membershipMembersWithDueAmountAsyncWithHttpInfo
     *
     * Get a list of membership members in 'My organizations'. Based on the users data access in Membercare. Included is also the due amount related to the Member.
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $valid_on (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function membershipMembersWithDueAmountAsyncWithHttpInfo($token, $debtor_account_number, $body = null, $valid_on = null)
    {
        $returnType = '\Membercare\Client\Model\MembershipAndDueAmount[]';
        $request = $this->membershipMembersWithDueAmountRequest($token, $debtor_account_number, $body, $valid_on);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'membershipMembersWithDueAmount'
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  int[] $body (optional)
     * @param  \DateTime $valid_on (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function membershipMembersWithDueAmountRequest($token, $debtor_account_number, $body = null, $valid_on = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling membershipMembersWithDueAmount'
            );
        }
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling membershipMembersWithDueAmount'
            );
        }

        $resourcePath = '/api/v1/membersite/myOrganization/{debtorAccountNumber}/membersWithDueAmount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($valid_on !== null) {
            $queryParams['validOn'] = ObjectSerializer::toQueryValue($valid_on, 'date-time');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation membersiteOrderStagingDataGetByShopOrderId
     *
     * @param  int $shop_order_id shop_order_id (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\MembersiteOrderStagingData
     */
    public function membersiteOrderStagingDataGetByShopOrderId($shop_order_id, $token)
    {
        list($response) = $this->membersiteOrderStagingDataGetByShopOrderIdWithHttpInfo($shop_order_id, $token);
        return $response;
    }

    /**
     * Operation membersiteOrderStagingDataGetByShopOrderIdWithHttpInfo
     *
     * @param  int $shop_order_id (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\MembersiteOrderStagingData, HTTP status code, HTTP response headers (array of strings)
     */
    public function membersiteOrderStagingDataGetByShopOrderIdWithHttpInfo($shop_order_id, $token)
    {
        $returnType = '\Membercare\Client\Model\MembersiteOrderStagingData';
        $request = $this->membersiteOrderStagingDataGetByShopOrderIdRequest($shop_order_id, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\MembersiteOrderStagingData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation membersiteOrderStagingDataGetByShopOrderIdAsync
     *
     * 
     *
     * @param  int $shop_order_id (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function membersiteOrderStagingDataGetByShopOrderIdAsync($shop_order_id, $token)
    {
        return $this->membersiteOrderStagingDataGetByShopOrderIdAsyncWithHttpInfo($shop_order_id, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation membersiteOrderStagingDataGetByShopOrderIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_order_id (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function membersiteOrderStagingDataGetByShopOrderIdAsyncWithHttpInfo($shop_order_id, $token)
    {
        $returnType = '\Membercare\Client\Model\MembersiteOrderStagingData';
        $request = $this->membersiteOrderStagingDataGetByShopOrderIdRequest($shop_order_id, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'membersiteOrderStagingDataGetByShopOrderId'
     *
     * @param  int $shop_order_id (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function membersiteOrderStagingDataGetByShopOrderIdRequest($shop_order_id, $token)
    {
        // verify the required parameter 'shop_order_id' is set
        if ($shop_order_id === null || (is_array($shop_order_id) && count($shop_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_order_id when calling membersiteOrderStagingDataGetByShopOrderId'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling membersiteOrderStagingDataGetByShopOrderId'
            );
        }

        $resourcePath = '/api/v1/membersite/MembersiteOrderStagingData/{shopOrderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($shop_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shopOrderId' . '}',
                ObjectSerializer::toPathValue($shop_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation membersiteOrderStagingDataInsert
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembersiteOrderStagingData $body body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\MembersiteOrderStagingData
     */
    public function membersiteOrderStagingDataInsert($token, $body = null)
    {
        list($response) = $this->membersiteOrderStagingDataInsertWithHttpInfo($token, $body);
        return $response;
    }

    /**
     * Operation membersiteOrderStagingDataInsertWithHttpInfo
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembersiteOrderStagingData $body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\MembersiteOrderStagingData, HTTP status code, HTTP response headers (array of strings)
     */
    public function membersiteOrderStagingDataInsertWithHttpInfo($token, $body = null)
    {
        $returnType = '\Membercare\Client\Model\MembersiteOrderStagingData';
        $request = $this->membersiteOrderStagingDataInsertRequest($token, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\MembersiteOrderStagingData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation membersiteOrderStagingDataInsertAsync
     *
     * 
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembersiteOrderStagingData $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function membersiteOrderStagingDataInsertAsync($token, $body = null)
    {
        return $this->membersiteOrderStagingDataInsertAsyncWithHttpInfo($token, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation membersiteOrderStagingDataInsertAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembersiteOrderStagingData $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function membersiteOrderStagingDataInsertAsyncWithHttpInfo($token, $body = null)
    {
        $returnType = '\Membercare\Client\Model\MembersiteOrderStagingData';
        $request = $this->membersiteOrderStagingDataInsertRequest($token, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'membersiteOrderStagingDataInsert'
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembersiteOrderStagingData $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function membersiteOrderStagingDataInsertRequest($token, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling membersiteOrderStagingDataInsert'
            );
        }

        $resourcePath = '/api/v1/membersite/MembersiteOrderStagingData';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchMembersiteOrderStagingData
     *
     * @param  string $token access token (required)
     * @param  int $shop_order_id shop_order_id (required)
     * @param  \Membercare\Client\Model\MembersiteOrderStagingDataPatch $body body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\MembersiteOrderStagingData
     */
    public function patchMembersiteOrderStagingData($token, $shop_order_id, $body = null)
    {
        list($response) = $this->patchMembersiteOrderStagingDataWithHttpInfo($token, $shop_order_id, $body);
        return $response;
    }

    /**
     * Operation patchMembersiteOrderStagingDataWithHttpInfo
     *
     * @param  string $token access token (required)
     * @param  int $shop_order_id (required)
     * @param  \Membercare\Client\Model\MembersiteOrderStagingDataPatch $body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\MembersiteOrderStagingData, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchMembersiteOrderStagingDataWithHttpInfo($token, $shop_order_id, $body = null)
    {
        $returnType = '\Membercare\Client\Model\MembersiteOrderStagingData';
        $request = $this->patchMembersiteOrderStagingDataRequest($token, $shop_order_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\MembersiteOrderStagingData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchMembersiteOrderStagingDataAsync
     *
     * 
     *
     * @param  string $token access token (required)
     * @param  int $shop_order_id (required)
     * @param  \Membercare\Client\Model\MembersiteOrderStagingDataPatch $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchMembersiteOrderStagingDataAsync($token, $shop_order_id, $body = null)
    {
        return $this->patchMembersiteOrderStagingDataAsyncWithHttpInfo($token, $shop_order_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchMembersiteOrderStagingDataAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $token access token (required)
     * @param  int $shop_order_id (required)
     * @param  \Membercare\Client\Model\MembersiteOrderStagingDataPatch $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchMembersiteOrderStagingDataAsyncWithHttpInfo($token, $shop_order_id, $body = null)
    {
        $returnType = '\Membercare\Client\Model\MembersiteOrderStagingData';
        $request = $this->patchMembersiteOrderStagingDataRequest($token, $shop_order_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchMembersiteOrderStagingData'
     *
     * @param  string $token access token (required)
     * @param  int $shop_order_id (required)
     * @param  \Membercare\Client\Model\MembersiteOrderStagingDataPatch $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchMembersiteOrderStagingDataRequest($token, $shop_order_id, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling patchMembersiteOrderStagingData'
            );
        }
        // verify the required parameter 'shop_order_id' is set
        if ($shop_order_id === null || (is_array($shop_order_id) && count($shop_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_order_id when calling patchMembersiteOrderStagingData'
            );
        }

        $resourcePath = '/api/v1/membersite/MembersiteOrderStagingData/{shopOrderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($shop_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shopOrderId' . '}',
                ObjectSerializer::toPathValue($shop_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBoardMembershipSearchCriteria
     *
     * Get a list of board members based on given search criteria
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\BoardMembershipSearchCriteria $body body (optional)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\BoardMembershipPagedResult
     */
    public function postBoardMembershipSearchCriteria($token, $body = null, $page = '1', $page_size = '50')
    {
        list($response) = $this->postBoardMembershipSearchCriteriaWithHttpInfo($token, $body, $page, $page_size);
        return $response;
    }

    /**
     * Operation postBoardMembershipSearchCriteriaWithHttpInfo
     *
     * Get a list of board members based on given search criteria
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\BoardMembershipSearchCriteria $body (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\BoardMembershipPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBoardMembershipSearchCriteriaWithHttpInfo($token, $body = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\BoardMembershipPagedResult';
        $request = $this->postBoardMembershipSearchCriteriaRequest($token, $body, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\BoardMembershipPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postBoardMembershipSearchCriteriaAsync
     *
     * Get a list of board members based on given search criteria
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\BoardMembershipSearchCriteria $body (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBoardMembershipSearchCriteriaAsync($token, $body = null, $page = '1', $page_size = '50')
    {
        return $this->postBoardMembershipSearchCriteriaAsyncWithHttpInfo($token, $body, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBoardMembershipSearchCriteriaAsyncWithHttpInfo
     *
     * Get a list of board members based on given search criteria
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\BoardMembershipSearchCriteria $body (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBoardMembershipSearchCriteriaAsyncWithHttpInfo($token, $body = null, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\BoardMembershipPagedResult';
        $request = $this->postBoardMembershipSearchCriteriaRequest($token, $body, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBoardMembershipSearchCriteria'
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\BoardMembershipSearchCriteria $body (optional)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postBoardMembershipSearchCriteriaRequest($token, $body = null, $page = '1', $page_size = '50')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling postBoardMembershipSearchCriteria'
            );
        }

        $resourcePath = '/api/v1/membersite/myOrganization/search/boardMembers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCalculatedFeeServices
     *
     * Calculate individual prices for memberships by membership category
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\FeeCalculatorParams $body body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\FeeCalculatorResult[]
     */
    public function postCalculatedFeeServices($token, $body = null)
    {
        list($response) = $this->postCalculatedFeeServicesWithHttpInfo($token, $body);
        return $response;
    }

    /**
     * Operation postCalculatedFeeServicesWithHttpInfo
     *
     * Calculate individual prices for memberships by membership category
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\FeeCalculatorParams $body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\FeeCalculatorResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postCalculatedFeeServicesWithHttpInfo($token, $body = null)
    {
        $returnType = '\Membercare\Client\Model\FeeCalculatorResult[]';
        $request = $this->postCalculatedFeeServicesRequest($token, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\FeeCalculatorResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCalculatedFeeServicesAsync
     *
     * Calculate individual prices for memberships by membership category
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\FeeCalculatorParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCalculatedFeeServicesAsync($token, $body = null)
    {
        return $this->postCalculatedFeeServicesAsyncWithHttpInfo($token, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCalculatedFeeServicesAsyncWithHttpInfo
     *
     * Calculate individual prices for memberships by membership category
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\FeeCalculatorParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCalculatedFeeServicesAsyncWithHttpInfo($token, $body = null)
    {
        $returnType = '\Membercare\Client\Model\FeeCalculatorResult[]';
        $request = $this->postCalculatedFeeServicesRequest($token, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCalculatedFeeServices'
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\FeeCalculatorParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postCalculatedFeeServicesRequest($token, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling postCalculatedFeeServices'
            );
        }

        $resourcePath = '/api/v1/membersite/fee/membershipCategories/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postInvoicePayments
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\InvoicePaymentParams $body body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\Payment[]
     */
    public function postInvoicePayments($token, $body = null)
    {
        list($response) = $this->postInvoicePaymentsWithHttpInfo($token, $body);
        return $response;
    }

    /**
     * Operation postInvoicePaymentsWithHttpInfo
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\InvoicePaymentParams $body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postInvoicePaymentsWithHttpInfo($token, $body = null)
    {
        $returnType = '\Membercare\Client\Model\Payment[]';
        $request = $this->postInvoicePaymentsRequest($token, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postInvoicePaymentsAsync
     *
     * 
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\InvoicePaymentParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postInvoicePaymentsAsync($token, $body = null)
    {
        return $this->postInvoicePaymentsAsyncWithHttpInfo($token, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postInvoicePaymentsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\InvoicePaymentParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postInvoicePaymentsAsyncWithHttpInfo($token, $body = null)
    {
        $returnType = '\Membercare\Client\Model\Payment[]';
        $request = $this->postInvoicePaymentsRequest($token, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postInvoicePayments'
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\InvoicePaymentParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postInvoicePaymentsRequest($token, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling postInvoicePayments'
            );
        }

        $resourcePath = '/api/v1/membersite/invoices/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postMembershipsPurchase
     *
     * Purchase memberships
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembershipPurchaseParams $body body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postMembershipsPurchase($token, $body = null)
    {
        $this->postMembershipsPurchaseWithHttpInfo($token, $body);
    }

    /**
     * Operation postMembershipsPurchaseWithHttpInfo
     *
     * Purchase memberships
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembershipPurchaseParams $body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postMembershipsPurchaseWithHttpInfo($token, $body = null)
    {
        $returnType = '';
        $request = $this->postMembershipsPurchaseRequest($token, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postMembershipsPurchaseAsync
     *
     * Purchase memberships
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembershipPurchaseParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMembershipsPurchaseAsync($token, $body = null)
    {
        return $this->postMembershipsPurchaseAsyncWithHttpInfo($token, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postMembershipsPurchaseAsyncWithHttpInfo
     *
     * Purchase memberships
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembershipPurchaseParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postMembershipsPurchaseAsyncWithHttpInfo($token, $body = null)
    {
        $returnType = '';
        $request = $this->postMembershipsPurchaseRequest($token, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postMembershipsPurchase'
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembershipPurchaseParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postMembershipsPurchaseRequest($token, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling postMembershipsPurchase'
            );
        }

        $resourcePath = '/api/v1/membersite/membership/purchase';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRegisterMember
     *
     * Register memberships
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembershipPurchaseParams $body body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postRegisterMember($token, $body = null)
    {
        $this->postRegisterMemberWithHttpInfo($token, $body);
    }

    /**
     * Operation postRegisterMemberWithHttpInfo
     *
     * Register memberships
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembershipPurchaseParams $body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRegisterMemberWithHttpInfo($token, $body = null)
    {
        $returnType = '';
        $request = $this->postRegisterMemberRequest($token, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postRegisterMemberAsync
     *
     * Register memberships
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembershipPurchaseParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRegisterMemberAsync($token, $body = null)
    {
        return $this->postRegisterMemberAsyncWithHttpInfo($token, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRegisterMemberAsyncWithHttpInfo
     *
     * Register memberships
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembershipPurchaseParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRegisterMemberAsyncWithHttpInfo($token, $body = null)
    {
        $returnType = '';
        $request = $this->postRegisterMemberRequest($token, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRegisterMember'
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\MembershipPurchaseParams $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postRegisterMemberRequest($token, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling postRegisterMember'
            );
        }

        $resourcePath = '/api/v1/membersite/membership/registermember';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postReportServiceAccessLog
     *
     * Log an attempted access to a ReportService
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\ReportServiceAccessLogPost $body Object containing whom is viewing and what report is viewed (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postReportServiceAccessLog($token, $body = null)
    {
        $this->postReportServiceAccessLogWithHttpInfo($token, $body);
    }

    /**
     * Operation postReportServiceAccessLogWithHttpInfo
     *
     * Log an attempted access to a ReportService
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\ReportServiceAccessLogPost $body Object containing whom is viewing and what report is viewed (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postReportServiceAccessLogWithHttpInfo($token, $body = null)
    {
        $returnType = '';
        $request = $this->postReportServiceAccessLogRequest($token, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postReportServiceAccessLogAsync
     *
     * Log an attempted access to a ReportService
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\ReportServiceAccessLogPost $body Object containing whom is viewing and what report is viewed (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postReportServiceAccessLogAsync($token, $body = null)
    {
        return $this->postReportServiceAccessLogAsyncWithHttpInfo($token, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postReportServiceAccessLogAsyncWithHttpInfo
     *
     * Log an attempted access to a ReportService
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\ReportServiceAccessLogPost $body Object containing whom is viewing and what report is viewed (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postReportServiceAccessLogAsyncWithHttpInfo($token, $body = null)
    {
        $returnType = '';
        $request = $this->postReportServiceAccessLogRequest($token, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postReportServiceAccessLog'
     *
     * @param  string $token access token (required)
     * @param  \Membercare\Client\Model\ReportServiceAccessLogPost $body Object containing whom is viewing and what report is viewed (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postReportServiceAccessLogRequest($token, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling postReportServiceAccessLog'
            );
        }

        $resourcePath = '/api/v1/membersite/postreportserviceaccesslog';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation smsRecipientsByOrganizations
     *
     * Gets membership members of the organization given by a Organization identification number.
     *
     * @param  string $token access token (required)
     * @param  string[] $body The list of organization identification numbers (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\SmsSenderOrganizationInfo[]
     */
    public function smsRecipientsByOrganizations($token, $body = null)
    {
        list($response) = $this->smsRecipientsByOrganizationsWithHttpInfo($token, $body);
        return $response;
    }

    /**
     * Operation smsRecipientsByOrganizationsWithHttpInfo
     *
     * Gets membership members of the organization given by a Organization identification number.
     *
     * @param  string $token access token (required)
     * @param  string[] $body The list of organization identification numbers (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\SmsSenderOrganizationInfo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function smsRecipientsByOrganizationsWithHttpInfo($token, $body = null)
    {
        $returnType = '\Membercare\Client\Model\SmsSenderOrganizationInfo[]';
        $request = $this->smsRecipientsByOrganizationsRequest($token, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\SmsSenderOrganizationInfo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation smsRecipientsByOrganizationsAsync
     *
     * Gets membership members of the organization given by a Organization identification number.
     *
     * @param  string $token access token (required)
     * @param  string[] $body The list of organization identification numbers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smsRecipientsByOrganizationsAsync($token, $body = null)
    {
        return $this->smsRecipientsByOrganizationsAsyncWithHttpInfo($token, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation smsRecipientsByOrganizationsAsyncWithHttpInfo
     *
     * Gets membership members of the organization given by a Organization identification number.
     *
     * @param  string $token access token (required)
     * @param  string[] $body The list of organization identification numbers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function smsRecipientsByOrganizationsAsyncWithHttpInfo($token, $body = null)
    {
        $returnType = '\Membercare\Client\Model\SmsSenderOrganizationInfo[]';
        $request = $this->smsRecipientsByOrganizationsRequest($token, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'smsRecipientsByOrganizations'
     *
     * @param  string $token access token (required)
     * @param  string[] $body The list of organization identification numbers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function smsRecipientsByOrganizationsRequest($token, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling smsRecipientsByOrganizations'
            );
        }

        $resourcePath = '/api/v1/membersite/smsRecipients/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
