<?php
/**
 * DebtorApi
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Membercare\Client\ApiException;
use Membercare\Client\Configuration;
use Membercare\Client\HeaderSelector;
use Membercare\Client\ObjectSerializer;

/**
 * DebtorApi Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DebtorApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation debtorApi
     *
     * Gets a Debtor by the given debtorAccountNumber
     *
     * @param  string $debtor_account_number The debtoraccountnumber the get the debtor by. (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\Debtor
     */
    public function debtorApi($debtor_account_number, $token)
    {
        list($response) = $this->debtorApiWithHttpInfo($debtor_account_number, $token);
        return $response;
    }

    /**
     * Operation debtorApiWithHttpInfo
     *
     * Gets a Debtor by the given debtorAccountNumber
     *
     * @param  string $debtor_account_number The debtoraccountnumber the get the debtor by. (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\Debtor, HTTP status code, HTTP response headers (array of strings)
     */
    public function debtorApiWithHttpInfo($debtor_account_number, $token)
    {
        $returnType = '\Membercare\Client\Model\Debtor';
        $request = $this->debtorApiRequest($debtor_account_number, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\Debtor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation debtorApiAsync
     *
     * Gets a Debtor by the given debtorAccountNumber
     *
     * @param  string $debtor_account_number The debtoraccountnumber the get the debtor by. (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function debtorApiAsync($debtor_account_number, $token)
    {
        return $this->debtorApiAsyncWithHttpInfo($debtor_account_number, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation debtorApiAsyncWithHttpInfo
     *
     * Gets a Debtor by the given debtorAccountNumber
     *
     * @param  string $debtor_account_number The debtoraccountnumber the get the debtor by. (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function debtorApiAsyncWithHttpInfo($debtor_account_number, $token)
    {
        $returnType = '\Membercare\Client\Model\Debtor';
        $request = $this->debtorApiRequest($debtor_account_number, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'debtorApi'
     *
     * @param  string $debtor_account_number The debtoraccountnumber the get the debtor by. (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function debtorApiRequest($debtor_account_number, $token)
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling debtorApi'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling debtorApi'
            );
        }

        $resourcePath = '/api/v1/debtors/{debtorAccountNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation debtorsApi
     *
     * Gets Debtors that has changed after the given date.
     *
     * @param  string $token access token (required)
     * @param  \DateTime $changed_after The date to get changed debtors that has changed since that date. (optional)
     * @param  bool $include_memberships Should valid memberships be included in the returned objects (optional, default to false)
     * @param  bool $include_creditors include_creditors (optional, default to false)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\DebtorPagedResult
     */
    public function debtorsApi($token, $changed_after = null, $include_memberships = 'false', $include_creditors = 'false', $page = '1', $page_size = '50')
    {
        list($response) = $this->debtorsApiWithHttpInfo($token, $changed_after, $include_memberships, $include_creditors, $page, $page_size);
        return $response;
    }

    /**
     * Operation debtorsApiWithHttpInfo
     *
     * Gets Debtors that has changed after the given date.
     *
     * @param  string $token access token (required)
     * @param  \DateTime $changed_after The date to get changed debtors that has changed since that date. (optional)
     * @param  bool $include_memberships Should valid memberships be included in the returned objects (optional, default to false)
     * @param  bool $include_creditors (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\DebtorPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function debtorsApiWithHttpInfo($token, $changed_after = null, $include_memberships = 'false', $include_creditors = 'false', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\DebtorPagedResult';
        $request = $this->debtorsApiRequest($token, $changed_after, $include_memberships, $include_creditors, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\DebtorPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation debtorsApiAsync
     *
     * Gets Debtors that has changed after the given date.
     *
     * @param  string $token access token (required)
     * @param  \DateTime $changed_after The date to get changed debtors that has changed since that date. (optional)
     * @param  bool $include_memberships Should valid memberships be included in the returned objects (optional, default to false)
     * @param  bool $include_creditors (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function debtorsApiAsync($token, $changed_after = null, $include_memberships = 'false', $include_creditors = 'false', $page = '1', $page_size = '50')
    {
        return $this->debtorsApiAsyncWithHttpInfo($token, $changed_after, $include_memberships, $include_creditors, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation debtorsApiAsyncWithHttpInfo
     *
     * Gets Debtors that has changed after the given date.
     *
     * @param  string $token access token (required)
     * @param  \DateTime $changed_after The date to get changed debtors that has changed since that date. (optional)
     * @param  bool $include_memberships Should valid memberships be included in the returned objects (optional, default to false)
     * @param  bool $include_creditors (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function debtorsApiAsyncWithHttpInfo($token, $changed_after = null, $include_memberships = 'false', $include_creditors = 'false', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\DebtorPagedResult';
        $request = $this->debtorsApiRequest($token, $changed_after, $include_memberships, $include_creditors, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'debtorsApi'
     *
     * @param  string $token access token (required)
     * @param  \DateTime $changed_after The date to get changed debtors that has changed since that date. (optional)
     * @param  bool $include_memberships Should valid memberships be included in the returned objects (optional, default to false)
     * @param  bool $include_creditors (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function debtorsApiRequest($token, $changed_after = null, $include_memberships = 'false', $include_creditors = 'false', $page = '1', $page_size = '50')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling debtorsApi'
            );
        }

        $resourcePath = '/api/v1/debtors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($changed_after !== null) {
            $queryParams['changedAfter'] = ObjectSerializer::toQueryValue($changed_after, 'date-time');
        }
        // query params
        if ($include_memberships !== null) {
            $queryParams['includeMemberships'] = ObjectSerializer::toQueryValue($include_memberships, null);
        }
        // query params
        if ($include_creditors !== null) {
            $queryParams['includeCreditors'] = ObjectSerializer::toQueryValue($include_creditors, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOpenPaymentByExternalId
     *
     * Deletes all open payments matching given external id.
     *
     * @param  int $external_id external_id (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOpenPaymentByExternalId($external_id, $token)
    {
        $this->deleteOpenPaymentByExternalIdWithHttpInfo($external_id, $token);
    }

    /**
     * Operation deleteOpenPaymentByExternalIdWithHttpInfo
     *
     * Deletes all open payments matching given external id.
     *
     * @param  int $external_id (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOpenPaymentByExternalIdWithHttpInfo($external_id, $token)
    {
        $returnType = '';
        $request = $this->deleteOpenPaymentByExternalIdRequest($external_id, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOpenPaymentByExternalIdAsync
     *
     * Deletes all open payments matching given external id.
     *
     * @param  int $external_id (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOpenPaymentByExternalIdAsync($external_id, $token)
    {
        return $this->deleteOpenPaymentByExternalIdAsyncWithHttpInfo($external_id, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOpenPaymentByExternalIdAsyncWithHttpInfo
     *
     * Deletes all open payments matching given external id.
     *
     * @param  int $external_id (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOpenPaymentByExternalIdAsyncWithHttpInfo($external_id, $token)
    {
        $returnType = '';
        $request = $this->deleteOpenPaymentByExternalIdRequest($external_id, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOpenPaymentByExternalId'
     *
     * @param  int $external_id (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOpenPaymentByExternalIdRequest($external_id, $token)
    {
        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling deleteOpenPaymentByExternalId'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling deleteOpenPaymentByExternalId'
            );
        }

        $resourcePath = '/api/v1/debtors/payments/open/byExternalId/{externalid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalId' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOpenPaymentById
     *
     * Deletes an open payment by given id.
     *
     * @param  int $id id (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOpenPaymentById($id, $token)
    {
        $this->deleteOpenPaymentByIdWithHttpInfo($id, $token);
    }

    /**
     * Operation deleteOpenPaymentByIdWithHttpInfo
     *
     * Deletes an open payment by given id.
     *
     * @param  int $id (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOpenPaymentByIdWithHttpInfo($id, $token)
    {
        $returnType = '';
        $request = $this->deleteOpenPaymentByIdRequest($id, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOpenPaymentByIdAsync
     *
     * Deletes an open payment by given id.
     *
     * @param  int $id (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOpenPaymentByIdAsync($id, $token)
    {
        return $this->deleteOpenPaymentByIdAsyncWithHttpInfo($id, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOpenPaymentByIdAsyncWithHttpInfo
     *
     * Deletes an open payment by given id.
     *
     * @param  int $id (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOpenPaymentByIdAsyncWithHttpInfo($id, $token)
    {
        $returnType = '';
        $request = $this->deleteOpenPaymentByIdRequest($id, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOpenPaymentById'
     *
     * @param  int $id (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOpenPaymentByIdRequest($id, $token)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteOpenPaymentById'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling deleteOpenPaymentById'
            );
        }

        $resourcePath = '/api/v1/debtors/payments/open/byId/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBalanceByDebtorAccountNumber
     *
     * Gets balance of a Debtor by the given debtorAccountNumber
     *
     * @param  string $debtor_account_number The debtoraccountnumber the get the debtor by. (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\DebtorBalance
     */
    public function getBalanceByDebtorAccountNumber($debtor_account_number, $token)
    {
        list($response) = $this->getBalanceByDebtorAccountNumberWithHttpInfo($debtor_account_number, $token);
        return $response;
    }

    /**
     * Operation getBalanceByDebtorAccountNumberWithHttpInfo
     *
     * Gets balance of a Debtor by the given debtorAccountNumber
     *
     * @param  string $debtor_account_number The debtoraccountnumber the get the debtor by. (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\DebtorBalance, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBalanceByDebtorAccountNumberWithHttpInfo($debtor_account_number, $token)
    {
        $returnType = '\Membercare\Client\Model\DebtorBalance';
        $request = $this->getBalanceByDebtorAccountNumberRequest($debtor_account_number, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\DebtorBalance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBalanceByDebtorAccountNumberAsync
     *
     * Gets balance of a Debtor by the given debtorAccountNumber
     *
     * @param  string $debtor_account_number The debtoraccountnumber the get the debtor by. (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBalanceByDebtorAccountNumberAsync($debtor_account_number, $token)
    {
        return $this->getBalanceByDebtorAccountNumberAsyncWithHttpInfo($debtor_account_number, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBalanceByDebtorAccountNumberAsyncWithHttpInfo
     *
     * Gets balance of a Debtor by the given debtorAccountNumber
     *
     * @param  string $debtor_account_number The debtoraccountnumber the get the debtor by. (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBalanceByDebtorAccountNumberAsyncWithHttpInfo($debtor_account_number, $token)
    {
        $returnType = '\Membercare\Client\Model\DebtorBalance';
        $request = $this->getBalanceByDebtorAccountNumberRequest($debtor_account_number, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBalanceByDebtorAccountNumber'
     *
     * @param  string $debtor_account_number The debtoraccountnumber the get the debtor by. (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBalanceByDebtorAccountNumberRequest($debtor_account_number, $token)
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getBalanceByDebtorAccountNumber'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getBalanceByDebtorAccountNumber'
            );
        }

        $resourcePath = '/api/v1/debtors/{debtorAccountNumber}/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDebtorsBalance
     *
     * Gets balance of a Debtor by the given debtorAccountNumber
     *
     * @param  string $token access token (required)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\DebtorBalancePagedResult
     */
    public function getDebtorsBalance($token, $page = '1', $page_size = '50')
    {
        list($response) = $this->getDebtorsBalanceWithHttpInfo($token, $page, $page_size);
        return $response;
    }

    /**
     * Operation getDebtorsBalanceWithHttpInfo
     *
     * Gets balance of a Debtor by the given debtorAccountNumber
     *
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\DebtorBalancePagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDebtorsBalanceWithHttpInfo($token, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\DebtorBalancePagedResult';
        $request = $this->getDebtorsBalanceRequest($token, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\DebtorBalancePagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDebtorsBalanceAsync
     *
     * Gets balance of a Debtor by the given debtorAccountNumber
     *
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDebtorsBalanceAsync($token, $page = '1', $page_size = '50')
    {
        return $this->getDebtorsBalanceAsyncWithHttpInfo($token, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDebtorsBalanceAsyncWithHttpInfo
     *
     * Gets balance of a Debtor by the given debtorAccountNumber
     *
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDebtorsBalanceAsyncWithHttpInfo($token, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\DebtorBalancePagedResult';
        $request = $this->getDebtorsBalanceRequest($token, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDebtorsBalance'
     *
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDebtorsBalanceRequest($token, $page = '1', $page_size = '50')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getDebtorsBalance'
            );
        }

        $resourcePath = '/api/v1/debtors/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getImportExports
     *
     * Gets InvoiceExports of a Debtor by the given debtorAccountNumber
     *
     * @param  string $debtor_account_number debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  bool $include_invoices include_invoices (optional, default to false)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\InvoiceExportPagedResult
     */
    public function getImportExports($debtor_account_number, $token, $include_invoices = 'false', $page = '1', $page_size = '50')
    {
        list($response) = $this->getImportExportsWithHttpInfo($debtor_account_number, $token, $include_invoices, $page, $page_size);
        return $response;
    }

    /**
     * Operation getImportExportsWithHttpInfo
     *
     * Gets InvoiceExports of a Debtor by the given debtorAccountNumber
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  bool $include_invoices (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\InvoiceExportPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImportExportsWithHttpInfo($debtor_account_number, $token, $include_invoices = 'false', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\InvoiceExportPagedResult';
        $request = $this->getImportExportsRequest($debtor_account_number, $token, $include_invoices, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\InvoiceExportPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getImportExportsAsync
     *
     * Gets InvoiceExports of a Debtor by the given debtorAccountNumber
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  bool $include_invoices (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportExportsAsync($debtor_account_number, $token, $include_invoices = 'false', $page = '1', $page_size = '50')
    {
        return $this->getImportExportsAsyncWithHttpInfo($debtor_account_number, $token, $include_invoices, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getImportExportsAsyncWithHttpInfo
     *
     * Gets InvoiceExports of a Debtor by the given debtorAccountNumber
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  bool $include_invoices (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportExportsAsyncWithHttpInfo($debtor_account_number, $token, $include_invoices = 'false', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\InvoiceExportPagedResult';
        $request = $this->getImportExportsRequest($debtor_account_number, $token, $include_invoices, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getImportExports'
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  bool $include_invoices (optional, default to false)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getImportExportsRequest($debtor_account_number, $token, $include_invoices = 'false', $page = '1', $page_size = '50')
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getImportExports'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getImportExports'
            );
        }

        $resourcePath = '/api/v1/debtors/{debtorAccountNumber}/invoiceExports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_invoices !== null) {
            $queryParams['includeInvoices'] = ObjectSerializer::toQueryValue($include_invoices, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOpenPayments
     *
     * Method returns a paged list of open payments.  The paged result includes a summary and links to next and prevoius page.
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\PaymentOpenPagedResult
     */
    public function getOpenPayments($debtor_account_number, $token, $page = '1', $page_size = '50')
    {
        list($response) = $this->getOpenPaymentsWithHttpInfo($debtor_account_number, $token, $page, $page_size);
        return $response;
    }

    /**
     * Operation getOpenPaymentsWithHttpInfo
     *
     * Method returns a paged list of open payments.  The paged result includes a summary and links to next and prevoius page.
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\PaymentOpenPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOpenPaymentsWithHttpInfo($debtor_account_number, $token, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\PaymentOpenPagedResult';
        $request = $this->getOpenPaymentsRequest($debtor_account_number, $token, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\PaymentOpenPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOpenPaymentsAsync
     *
     * Method returns a paged list of open payments.  The paged result includes a summary and links to next and prevoius page.
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOpenPaymentsAsync($debtor_account_number, $token, $page = '1', $page_size = '50')
    {
        return $this->getOpenPaymentsAsyncWithHttpInfo($debtor_account_number, $token, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOpenPaymentsAsyncWithHttpInfo
     *
     * Method returns a paged list of open payments.  The paged result includes a summary and links to next and prevoius page.
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOpenPaymentsAsyncWithHttpInfo($debtor_account_number, $token, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\PaymentOpenPagedResult';
        $request = $this->getOpenPaymentsRequest($debtor_account_number, $token, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOpenPayments'
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOpenPaymentsRequest($debtor_account_number, $token, $page = '1', $page_size = '50')
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getOpenPayments'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getOpenPayments'
            );
        }

        $resourcePath = '/api/v1/debtors/{debtorAccountNumber}/payments/open';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUpdatedImportExport
     *
     * Method returns InvoiceExport for currently due invoices.  Will create a new one of if one doesn't exist or if it is outdated
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\InvoiceExport
     */
    public function getUpdatedImportExport($debtor_account_number, $token)
    {
        list($response) = $this->getUpdatedImportExportWithHttpInfo($debtor_account_number, $token);
        return $response;
    }

    /**
     * Operation getUpdatedImportExportWithHttpInfo
     *
     * Method returns InvoiceExport for currently due invoices.  Will create a new one of if one doesn't exist or if it is outdated
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\InvoiceExport, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUpdatedImportExportWithHttpInfo($debtor_account_number, $token)
    {
        $returnType = '\Membercare\Client\Model\InvoiceExport';
        $request = $this->getUpdatedImportExportRequest($debtor_account_number, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\InvoiceExport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUpdatedImportExportAsync
     *
     * Method returns InvoiceExport for currently due invoices.  Will create a new one of if one doesn't exist or if it is outdated
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUpdatedImportExportAsync($debtor_account_number, $token)
    {
        return $this->getUpdatedImportExportAsyncWithHttpInfo($debtor_account_number, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUpdatedImportExportAsyncWithHttpInfo
     *
     * Method returns InvoiceExport for currently due invoices.  Will create a new one of if one doesn't exist or if it is outdated
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUpdatedImportExportAsyncWithHttpInfo($debtor_account_number, $token)
    {
        $returnType = '\Membercare\Client\Model\InvoiceExport';
        $request = $this->getUpdatedImportExportRequest($debtor_account_number, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUpdatedImportExport'
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUpdatedImportExportRequest($debtor_account_number, $token)
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getUpdatedImportExport'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getUpdatedImportExport'
            );
        }

        $resourcePath = '/api/v1/debtors/{debtorAccountNumber}/updatedInvoiceExport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesByDebtorApi
     *
     * Returns all invoices which has the given DebtorAccountNumber as the payer.
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     * @param  \DateTime $financed_after Only invoices with a finance date later than the given date will be returned (optional)
     * @param  bool $reverse_order Will return the invoices in reverse order by invoiceId (optional, default to false)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\InvoicePagedResult
     */
    public function invoicesByDebtorApi($debtor_account_number, $token, $financed_after = null, $reverse_order = 'false', $page = '1', $page_size = '50')
    {
        list($response) = $this->invoicesByDebtorApiWithHttpInfo($debtor_account_number, $token, $financed_after, $reverse_order, $page, $page_size);
        return $response;
    }

    /**
     * Operation invoicesByDebtorApiWithHttpInfo
     *
     * Returns all invoices which has the given DebtorAccountNumber as the payer.
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     * @param  \DateTime $financed_after Only invoices with a finance date later than the given date will be returned (optional)
     * @param  bool $reverse_order Will return the invoices in reverse order by invoiceId (optional, default to false)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\InvoicePagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesByDebtorApiWithHttpInfo($debtor_account_number, $token, $financed_after = null, $reverse_order = 'false', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\InvoicePagedResult';
        $request = $this->invoicesByDebtorApiRequest($debtor_account_number, $token, $financed_after, $reverse_order, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\InvoicePagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoicesByDebtorApiAsync
     *
     * Returns all invoices which has the given DebtorAccountNumber as the payer.
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     * @param  \DateTime $financed_after Only invoices with a finance date later than the given date will be returned (optional)
     * @param  bool $reverse_order Will return the invoices in reverse order by invoiceId (optional, default to false)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesByDebtorApiAsync($debtor_account_number, $token, $financed_after = null, $reverse_order = 'false', $page = '1', $page_size = '50')
    {
        return $this->invoicesByDebtorApiAsyncWithHttpInfo($debtor_account_number, $token, $financed_after, $reverse_order, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesByDebtorApiAsyncWithHttpInfo
     *
     * Returns all invoices which has the given DebtorAccountNumber as the payer.
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     * @param  \DateTime $financed_after Only invoices with a finance date later than the given date will be returned (optional)
     * @param  bool $reverse_order Will return the invoices in reverse order by invoiceId (optional, default to false)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesByDebtorApiAsyncWithHttpInfo($debtor_account_number, $token, $financed_after = null, $reverse_order = 'false', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\InvoicePagedResult';
        $request = $this->invoicesByDebtorApiRequest($debtor_account_number, $token, $financed_after, $reverse_order, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesByDebtorApi'
     *
     * @param  string $debtor_account_number The DebtorAccountNumber of the payer (required)
     * @param  string $token access token (required)
     * @param  \DateTime $financed_after Only invoices with a finance date later than the given date will be returned (optional)
     * @param  bool $reverse_order Will return the invoices in reverse order by invoiceId (optional, default to false)
     * @param  int $page Optional, represents the page you wish to see, starting at 1. (optional, default to 1)
     * @param  int $page_size Optional, represents the amount of invoices to display per paged result. (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invoicesByDebtorApiRequest($debtor_account_number, $token, $financed_after = null, $reverse_order = 'false', $page = '1', $page_size = '50')
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling invoicesByDebtorApi'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling invoicesByDebtorApi'
            );
        }

        $resourcePath = '/api/v1/debtors/{debtorAccountNumber}/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($financed_after !== null) {
            $queryParams['financedAfter'] = ObjectSerializer::toQueryValue($financed_after, 'date-time');
        }
        // query params
        if ($reverse_order !== null) {
            $queryParams['reverseOrder'] = ObjectSerializer::toQueryValue($reverse_order, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOpenPayment
     *
     * Method adds an open payment with no invoice to match
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number debtor_account_number (required)
     * @param  \Membercare\Client\Model\PaymentOpen $body body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\PaymentOpen
     */
    public function postOpenPayment($token, $debtor_account_number, $body = null)
    {
        list($response) = $this->postOpenPaymentWithHttpInfo($token, $debtor_account_number, $body);
        return $response;
    }

    /**
     * Operation postOpenPaymentWithHttpInfo
     *
     * Method adds an open payment with no invoice to match
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  \Membercare\Client\Model\PaymentOpen $body (optional)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\PaymentOpen, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOpenPaymentWithHttpInfo($token, $debtor_account_number, $body = null)
    {
        $returnType = '\Membercare\Client\Model\PaymentOpen';
        $request = $this->postOpenPaymentRequest($token, $debtor_account_number, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\PaymentOpen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOpenPaymentAsync
     *
     * Method adds an open payment with no invoice to match
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  \Membercare\Client\Model\PaymentOpen $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOpenPaymentAsync($token, $debtor_account_number, $body = null)
    {
        return $this->postOpenPaymentAsyncWithHttpInfo($token, $debtor_account_number, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOpenPaymentAsyncWithHttpInfo
     *
     * Method adds an open payment with no invoice to match
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  \Membercare\Client\Model\PaymentOpen $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOpenPaymentAsyncWithHttpInfo($token, $debtor_account_number, $body = null)
    {
        $returnType = '\Membercare\Client\Model\PaymentOpen';
        $request = $this->postOpenPaymentRequest($token, $debtor_account_number, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOpenPayment'
     *
     * @param  string $token access token (required)
     * @param  string $debtor_account_number (required)
     * @param  \Membercare\Client\Model\PaymentOpen $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOpenPaymentRequest($token, $debtor_account_number, $body = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling postOpenPayment'
            );
        }
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling postOpenPayment'
            );
        }

        $resourcePath = '/api/v1/debtors/{debtorAccountNumber}/payments/open';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
