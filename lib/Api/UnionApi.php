<?php
/**
 * UnionApi
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Membercare\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Membercare\Client\ApiException;
use Membercare\Client\Configuration;
use Membercare\Client\HeaderSelector;
use Membercare\Client\ObjectSerializer;

/**
 * UnionApi Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UnionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getUnionGroups
     *
     * Get union groups
     *
     * @param  string $token access token (required)
     * @param  bool $incude_organization_primary_address incude_organization_primary_address (optional, default to false)
     * @param  bool $only_valid only_valid (optional, default to true)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\UnionGroupPagedResult
     */
    public function getUnionGroups($token, $incude_organization_primary_address = 'false', $only_valid = 'true', $page = '1', $page_size = '50')
    {
        list($response) = $this->getUnionGroupsWithHttpInfo($token, $incude_organization_primary_address, $only_valid, $page, $page_size);
        return $response;
    }

    /**
     * Operation getUnionGroupsWithHttpInfo
     *
     * Get union groups
     *
     * @param  string $token access token (required)
     * @param  bool $incude_organization_primary_address (optional, default to false)
     * @param  bool $only_valid (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\UnionGroupPagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUnionGroupsWithHttpInfo($token, $incude_organization_primary_address = 'false', $only_valid = 'true', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\UnionGroupPagedResult';
        $request = $this->getUnionGroupsRequest($token, $incude_organization_primary_address, $only_valid, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\UnionGroupPagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUnionGroupsAsync
     *
     * Get union groups
     *
     * @param  string $token access token (required)
     * @param  bool $incude_organization_primary_address (optional, default to false)
     * @param  bool $only_valid (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnionGroupsAsync($token, $incude_organization_primary_address = 'false', $only_valid = 'true', $page = '1', $page_size = '50')
    {
        return $this->getUnionGroupsAsyncWithHttpInfo($token, $incude_organization_primary_address, $only_valid, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUnionGroupsAsyncWithHttpInfo
     *
     * Get union groups
     *
     * @param  string $token access token (required)
     * @param  bool $incude_organization_primary_address (optional, default to false)
     * @param  bool $only_valid (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnionGroupsAsyncWithHttpInfo($token, $incude_organization_primary_address = 'false', $only_valid = 'true', $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\UnionGroupPagedResult';
        $request = $this->getUnionGroupsRequest($token, $incude_organization_primary_address, $only_valid, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUnionGroups'
     *
     * @param  string $token access token (required)
     * @param  bool $incude_organization_primary_address (optional, default to false)
     * @param  bool $only_valid (optional, default to true)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUnionGroupsRequest($token, $incude_organization_primary_address = 'false', $only_valid = 'true', $page = '1', $page_size = '50')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getUnionGroups'
            );
        }

        $resourcePath = '/api/v1/union/unionGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($incude_organization_primary_address !== null) {
            $queryParams['incudeOrganizationPrimaryAddress'] = ObjectSerializer::toQueryValue($incude_organization_primary_address, null);
        }
        // query params
        if ($only_valid !== null) {
            $queryParams['onlyValid'] = ObjectSerializer::toQueryValue($only_valid, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUnionMembersByRespresentativesDebtorAccountNumber
     *
     * Get union members by representative's debtor account number
     *
     * @param  string $debtor_account_number debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  \DateTime $validity_date validity_date (optional)
     * @param  bool $include_personal_contacts include_personal_contacts (optional, default to false)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\UnionMember[]
     */
    public function getUnionMembersByRespresentativesDebtorAccountNumber($debtor_account_number, $token, $validity_date = null, $include_personal_contacts = 'false')
    {
        list($response) = $this->getUnionMembersByRespresentativesDebtorAccountNumberWithHttpInfo($debtor_account_number, $token, $validity_date, $include_personal_contacts);
        return $response;
    }

    /**
     * Operation getUnionMembersByRespresentativesDebtorAccountNumberWithHttpInfo
     *
     * Get union members by representative's debtor account number
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  \DateTime $validity_date (optional)
     * @param  bool $include_personal_contacts (optional, default to false)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\UnionMember[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUnionMembersByRespresentativesDebtorAccountNumberWithHttpInfo($debtor_account_number, $token, $validity_date = null, $include_personal_contacts = 'false')
    {
        $returnType = '\Membercare\Client\Model\UnionMember[]';
        $request = $this->getUnionMembersByRespresentativesDebtorAccountNumberRequest($debtor_account_number, $token, $validity_date, $include_personal_contacts);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\UnionMember[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUnionMembersByRespresentativesDebtorAccountNumberAsync
     *
     * Get union members by representative's debtor account number
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  \DateTime $validity_date (optional)
     * @param  bool $include_personal_contacts (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnionMembersByRespresentativesDebtorAccountNumberAsync($debtor_account_number, $token, $validity_date = null, $include_personal_contacts = 'false')
    {
        return $this->getUnionMembersByRespresentativesDebtorAccountNumberAsyncWithHttpInfo($debtor_account_number, $token, $validity_date, $include_personal_contacts)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUnionMembersByRespresentativesDebtorAccountNumberAsyncWithHttpInfo
     *
     * Get union members by representative's debtor account number
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  \DateTime $validity_date (optional)
     * @param  bool $include_personal_contacts (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnionMembersByRespresentativesDebtorAccountNumberAsyncWithHttpInfo($debtor_account_number, $token, $validity_date = null, $include_personal_contacts = 'false')
    {
        $returnType = '\Membercare\Client\Model\UnionMember[]';
        $request = $this->getUnionMembersByRespresentativesDebtorAccountNumberRequest($debtor_account_number, $token, $validity_date, $include_personal_contacts);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUnionMembersByRespresentativesDebtorAccountNumber'
     *
     * @param  string $debtor_account_number (required)
     * @param  string $token access token (required)
     * @param  \DateTime $validity_date (optional)
     * @param  bool $include_personal_contacts (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUnionMembersByRespresentativesDebtorAccountNumberRequest($debtor_account_number, $token, $validity_date = null, $include_personal_contacts = 'false')
    {
        // verify the required parameter 'debtor_account_number' is set
        if ($debtor_account_number === null || (is_array($debtor_account_number) && count($debtor_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $debtor_account_number when calling getUnionMembersByRespresentativesDebtorAccountNumber'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getUnionMembersByRespresentativesDebtorAccountNumber'
            );
        }

        $resourcePath = '/api/v1/union/{debtorAccountNumber}/unionMembers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($validity_date !== null) {
            $queryParams['validityDate'] = ObjectSerializer::toQueryValue($validity_date, 'date-time');
        }
        // query params
        if ($include_personal_contacts !== null) {
            $queryParams['includePersonalContacts'] = ObjectSerializer::toQueryValue($include_personal_contacts, null);
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }

        // path params
        if ($debtor_account_number !== null) {
            $resourcePath = str_replace(
                '{' . 'debtorAccountNumber' . '}',
                ObjectSerializer::toPathValue($debtor_account_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUnionRepresentatives
     *
     * Get all UnionRepresentatives
     *
     * @param  string $token access token (required)
     * @param  int $page page (optional, default to 1)
     * @param  int $page_size page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Membercare\Client\Model\UnionRepresentativePagedResult
     */
    public function getUnionRepresentatives($token, $page = '1', $page_size = '50')
    {
        list($response) = $this->getUnionRepresentativesWithHttpInfo($token, $page, $page_size);
        return $response;
    }

    /**
     * Operation getUnionRepresentativesWithHttpInfo
     *
     * Get all UnionRepresentatives
     *
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \Membercare\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Membercare\Client\Model\UnionRepresentativePagedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUnionRepresentativesWithHttpInfo($token, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\UnionRepresentativePagedResult';
        $request = $this->getUnionRepresentativesRequest($token, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Membercare\Client\Model\UnionRepresentativePagedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUnionRepresentativesAsync
     *
     * Get all UnionRepresentatives
     *
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnionRepresentativesAsync($token, $page = '1', $page_size = '50')
    {
        return $this->getUnionRepresentativesAsyncWithHttpInfo($token, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUnionRepresentativesAsyncWithHttpInfo
     *
     * Get all UnionRepresentatives
     *
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnionRepresentativesAsyncWithHttpInfo($token, $page = '1', $page_size = '50')
    {
        $returnType = '\Membercare\Client\Model\UnionRepresentativePagedResult';
        $request = $this->getUnionRepresentativesRequest($token, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUnionRepresentatives'
     *
     * @param  string $token access token (required)
     * @param  int $page (optional, default to 1)
     * @param  int $page_size (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUnionRepresentativesRequest($token, $page = '1', $page_size = '50')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getUnionRepresentatives'
            );
        }

        $resourcePath = '/api/v1/union';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
