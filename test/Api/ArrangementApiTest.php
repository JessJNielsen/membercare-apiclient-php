<?php
/**
 * ArrangementApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Membercare\Client;

use Membercare\Client\Configuration;
use Membercare\Client\ApiException;
use Membercare\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ArrangementApiTest Class Doc Comment
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArrangementApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for allowedParticipantCategoriesApi
     *
     * Get allowed participant categories of the arrangement, for the given person..
     *
     */
    public function testAllowedParticipantCategoriesApi()
    {
    }

    /**
     * Test case for allowedParticipantCategoriesByEnroller
     *
     * Get allowed participant categories of the arrangement, for the given person..
     *
     */
    public function testAllowedParticipantCategoriesByEnroller()
    {
    }

    /**
     * Test case for apiV1ArrangementsInternalIdParticipantCategoriesGet
     *
     * Get allowed participant categories of the arrangement, for the given person..
     *
     */
    public function testApiV1ArrangementsInternalIdParticipantCategoriesGet()
    {
    }

    /**
     * Test case for apiV1ArrangementsInternalIdParticipantCategoriesIdPatch
     *
     * Updates a allowed participant category.
     *
     */
    public function testApiV1ArrangementsInternalIdParticipantCategoriesIdPatch()
    {
    }

    /**
     * Test case for apiV1ArrangementsInternalIdParticipantCategoriesIdPut
     *
     * Updates a allowed participant category.
     *
     */
    public function testApiV1ArrangementsInternalIdParticipantCategoriesIdPut()
    {
    }

    /**
     * Test case for apiV1ArrangementsInternalIdParticipantCategoryIdDelete
     *
     * Removes an allowed participant category from the given arrangement.
     *
     */
    public function testApiV1ArrangementsInternalIdParticipantCategoryIdDelete()
    {
    }

    /**
     * Test case for apiV1ArrangementsInternalIdParticipantCategoryPost
     *
     * Adds an allowed participant category to the given arrangement.
     *
     */
    public function testApiV1ArrangementsInternalIdParticipantCategoryPost()
    {
    }

    /**
     * Test case for calculateBestPriceServiceToEnroll
     *
     * Get the set of calculated transactions with the best price from a list of serviceToEnroll. If you send more than one Discount/Subsidy, we will find the cheapest combination..
     *
     */
    public function testCalculateBestPriceServiceToEnroll()
    {
    }

    /**
     * Test case for calculateServiceToEnrollApi
     *
     * Get calculated transactions from a list of serviceToEnroll..
     *
     */
    public function testCalculateServiceToEnrollApi()
    {
    }

    /**
     * Test case for cancellationReasonsApi
     *
     * Gets all valid cancellation reasons.
     *
     */
    public function testCancellationReasonsApi()
    {
    }

    /**
     * Test case for deleteAllowedParticipantCategoryFromSession
     *
     * Removes an allowed participant category from the given arrangement.
     *
     */
    public function testDeleteAllowedParticipantCategoryFromSession()
    {
    }

    /**
     * Test case for deleteArrangementAreas
     *
     * Deletes an association between an ArrangementArea and an Arrangement..
     *
     */
    public function testDeleteArrangementAreas()
    {
    }

    /**
     * Test case for deleteArrangementCategories
     *
     * Deletes an association between an ArrangementCategory and an Arrangement..
     *
     */
    public function testDeleteArrangementCategories()
    {
    }

    /**
     * Test case for deleteArrangementGroups
     *
     * Deletes an association between an ArrangementGroup and an Arrangement..
     *
     */
    public function testDeleteArrangementGroups()
    {
    }

    /**
     * Test case for deleteArrangementHotel
     *
     * .
     *
     */
    public function testDeleteArrangementHotel()
    {
    }

    /**
     * Test case for deleteArrangementPlaces
     *
     * .
     *
     */
    public function testDeleteArrangementPlaces()
    {
    }

    /**
     * Test case for deleteArrangementSequence
     *
     * .
     *
     */
    public function testDeleteArrangementSequence()
    {
    }

    /**
     * Test case for deleteArrangementServices
     *
     * .
     *
     */
    public function testDeleteArrangementServices()
    {
    }

    /**
     * Test case for deleteArrangementSessionsService
     *
     * .
     *
     */
    public function testDeleteArrangementSessionsService()
    {
    }

    /**
     * Test case for deleteArrangementSubCategories
     *
     * Deletes an association between an ArrangementSubCategory and an Arrangement..
     *
     */
    public function testDeleteArrangementSubCategories()
    {
    }

    /**
     * Test case for deleteArrangementTransactionParticipantService
     *
     * Delete course transaction from arrangment based on participant and service.
     *
     */
    public function testDeleteArrangementTransactionParticipantService()
    {
    }

    /**
     * Test case for deleteEventCrew
     *
     * Removes a member from the crew.
     *
     */
    public function testDeleteEventCrew()
    {
    }

    /**
     * Test case for deleteParticipantCategory
     *
     * Removes an allowed participant category from the given arrangement.
     *
     */
    public function testDeleteParticipantCategory()
    {
    }

    /**
     * Test case for deleteSession
     *
     * .
     *
     */
    public function testDeleteSession()
    {
    }

    /**
     * Test case for deleteSessionServiceCourseTransaction
     *
     * Deletes a course transaction from a service attached to a specifik participant who participates in a specific session.
     *
     */
    public function testDeleteSessionServiceCourseTransaction()
    {
    }

    /**
     * Test case for deleteSessionTrack
     *
     * Deletes a SessionTrack.
     *
     */
    public function testDeleteSessionTrack()
    {
    }

    /**
     * Test case for getAllowedParticipantCategoryFromSession
     *
     * .
     *
     */
    public function testGetAllowedParticipantCategoryFromSession()
    {
    }

    /**
     * Test case for getArrangement
     *
     * Get a specific arrangement by it's InternalId.
     *
     */
    public function testGetArrangement()
    {
    }

    /**
     * Test case for getArrangementAreas
     *
     * Gets all Arrangement areas.
     *
     */
    public function testGetArrangementAreas()
    {
    }

    /**
     * Test case for getArrangementCategories
     *
     * Gets all Arrangement categories.
     *
     */
    public function testGetArrangementCategories()
    {
    }

    /**
     * Test case for getArrangementCrew
     *
     * Gets an Arrangment's crew members.
     *
     */
    public function testGetArrangementCrew()
    {
    }

    /**
     * Test case for getArrangementGroups
     *
     * Gets all Arrangement groups.
     *
     */
    public function testGetArrangementGroups()
    {
    }

    /**
     * Test case for getArrangementHotels
     *
     * Gets hotels for an arrangement.
     *
     */
    public function testGetArrangementHotels()
    {
    }

    /**
     * Test case for getArrangementNotifications
     *
     * Get notifications of a given arrangement.
     *
     */
    public function testGetArrangementNotifications()
    {
    }

    /**
     * Test case for getArrangementPLaces
     *
     * Gets an arrangement's places.
     *
     */
    public function testGetArrangementPLaces()
    {
    }

    /**
     * Test case for getArrangementParticipantsByGlobalSearch
     *
     * Under development but stable.   Currently supports the following combinations:       (IncludeCancelled)           OR (ArrangementStartsAfter, ArrangementStartsBefore)   OR (RepresentersDebtorAccountNumbers).
     *
     */
    public function testGetArrangementParticipantsByGlobalSearch()
    {
    }

    /**
     * Test case for getArrangementParticipantsBySearch
     *
     * Under development but stable.   Currently supports the following combinations:       (InternalId, IncludeParticipating, IncludeCancelled, IncludeOnWaitingList)   OR (InternalId, DebtorAccountNumbers)   OR (InternalId, DebtorAccountNumbers, ArrangementStartsAfter)   OR (InternalId, DebtorAccountNumbers, ArrangementStartsBefore)   OR (InternalId, DebtorAccountNumbers, ArrangementStartsAfter, ArrangementStartsBefore).
     *
     */
    public function testGetArrangementParticipantsBySearch()
    {
    }

    /**
     * Test case for getArrangementQuestions
     *
     * Gets the list of questions associated to the arrangement.
     *
     */
    public function testGetArrangementQuestions()
    {
    }

    /**
     * Test case for getArrangementSearch
     *
     * Gets arrangements by search criterias  When searching by custom fields it is necessary to provide only objects containing {\"type\": {\"identifier\": XX},\"value\": \"XX\"}.
     *
     */
    public function testGetArrangementSearch()
    {
    }

    /**
     * Test case for getArrangementSections
     *
     * Gets all Arrangement groups.
     *
     */
    public function testGetArrangementSections()
    {
    }

    /**
     * Test case for getArrangementSubCategories
     *
     * Gets all Arrangement sub categories.
     *
     */
    public function testGetArrangementSubCategories()
    {
    }

    /**
     * Test case for getArrangementTracks
     *
     * Gets tracks for an arrangment internalId.
     *
     */
    public function testGetArrangementTracks()
    {
    }

    /**
     * Test case for getArrangements
     *
     * Retrieves a paged result of arrangements with startdate after the given startsAfter date..
     *
     */
    public function testGetArrangements()
    {
    }

    /**
     * Test case for getArrangementsInSequence
     *
     * Retrieves a paged result of arrangements in a sequence with startdate after the given startsAfter date..
     *
     */
    public function testGetArrangementsInSequence()
    {
    }

    /**
     * Test case for getCustomFieldValuesForArrangement
     *
     * Retrieves a paged result of all CustomFieldValues for the arrangement with given internalId.
     *
     */
    public function testGetCustomFieldValuesForArrangement()
    {
    }

    /**
     * Test case for getEventCrewCategories
     *
     * Get CrewCategories.
     *
     */
    public function testGetEventCrewCategories()
    {
    }

    /**
     * Test case for getEventInvitationByArrangementInternalIdAndInvitationIdentification
     *
     * Gets event invitation by the given event id and invitation code.
     *
     */
    public function testGetEventInvitationByArrangementInternalIdAndInvitationIdentification()
    {
    }

    /**
     * Test case for getOrganizationsForCurrentAndFutureEvents
     *
     * Get a paged result of organizations that the current and future events belong to.
     *
     */
    public function testGetOrganizationsForCurrentAndFutureEvents()
    {
    }

    /**
     * Test case for getParticipantCategories
     *
     * Gets Participant Categories..
     *
     */
    public function testGetParticipantCategories()
    {
    }

    /**
     * Test case for getParticipantsCancelled
     *
     * Get a paged result of participants who are no longer enrolled in the arrangement.
     *
     */
    public function testGetParticipantsCancelled()
    {
    }

    /**
     * Test case for getParticipantsOnWaitingList
     *
     * Get a paged result of participants on waiting list in the arrangement.
     *
     */
    public function testGetParticipantsOnWaitingList()
    {
    }

    /**
     * Test case for getSessions
     *
     * Returns all sessions for the conference.
     *
     */
    public function testGetSessions()
    {
    }

    /**
     * Test case for participantAllServicesApi
     *
     * Get all services including session services for the given debtorAccountNumber and participantCategoryId, that the participant is allowed to purchase..
     *
     */
    public function testParticipantAllServicesApi()
    {
    }

    /**
     * Test case for participantApi
     *
     * Get a participant participating in the arrangement.
     *
     */
    public function testParticipantApi()
    {
    }

    /**
     * Test case for participantEnrollmentApi
     *
     * Enroll a list of participants (wrapped inside an enrollment object).  Include a Payment object if the enrollment should be registered as paid..
     *
     */
    public function testParticipantEnrollmentApi()
    {
    }

    /**
     * Test case for participantInvoicesApi
     *
     * Get a paged result of a participants invoices, for the given arrangement..
     *
     */
    public function testParticipantInvoicesApi()
    {
    }

    /**
     * Test case for participantPayEnrollmentApi
     *
     * FOR USE BY GROUPCARE ONLY! TAKES TOO MANY ASSUMPTIONS TO BE USED IN A GENERAL MANNER!.
     *
     */
    public function testParticipantPayEnrollmentApi()
    {
    }

    /**
     * Test case for participantServicesApi
     *
     * Get services for the given debtorAccountNumber and participantCategoryId, that the participant is allowed to purchase..
     *
     */
    public function testParticipantServicesApi()
    {
    }

    /**
     * Test case for participantsApi
     *
     * Get a paged result of participants participating in the arrangement.
     *
     */
    public function testParticipantsApi()
    {
    }

    /**
     * Test case for patchAllowedParticipantCategory
     *
     * Updates a allowed participant category.
     *
     */
    public function testPatchAllowedParticipantCategory()
    {
    }

    /**
     * Test case for patchArrangement
     *
     * Patch an arrangement of type Course.
     *
     */
    public function testPatchArrangement()
    {
    }

    /**
     * Test case for patchArrangementCrew
     *
     * .
     *
     */
    public function testPatchArrangementCrew()
    {
    }

    /**
     * Test case for patchArrangementHotel
     *
     * .
     *
     */
    public function testPatchArrangementHotel()
    {
    }

    /**
     * Test case for patchArrangementParticipant
     *
     * Updates a participant.
     *
     */
    public function testPatchArrangementParticipant()
    {
    }

    /**
     * Test case for patchArrangementPlace
     *
     * Updates a place.
     *
     */
    public function testPatchArrangementPlace()
    {
    }

    /**
     * Test case for patchEventInvitation
     *
     * Updates status of an event invitation.
     *
     */
    public function testPatchEventInvitation()
    {
    }

    /**
     * Test case for patchEventParticipations
     *
     * Enrolls additional services to signed up event participations.
     *
     */
    public function testPatchEventParticipations()
    {
    }

    /**
     * Test case for patchServicesCancellation
     *
     * Updates a cancellation service.
     *
     */
    public function testPatchServicesCancellation()
    {
    }

    /**
     * Test case for patchServicesCompanion
     *
     * Updates a companion service.
     *
     */
    public function testPatchServicesCompanion()
    {
    }

    /**
     * Test case for patchServicesDiscount
     *
     * Updates a discount service.
     *
     */
    public function testPatchServicesDiscount()
    {
    }

    /**
     * Test case for patchServicesHotelRoom
     *
     * Updates a hotel room service.
     *
     */
    public function testPatchServicesHotelRoom()
    {
    }

    /**
     * Test case for patchServicesRegular
     *
     * Updates a regular service.
     *
     */
    public function testPatchServicesRegular()
    {
    }

    /**
     * Test case for patchServicesSessionsCompanion
     *
     * Updates a companion service.
     *
     */
    public function testPatchServicesSessionsCompanion()
    {
    }

    /**
     * Test case for patchServicesSessionsRegular
     *
     * Updates a regular service.
     *
     */
    public function testPatchServicesSessionsRegular()
    {
    }

    /**
     * Test case for patchServicesSubsidy
     *
     * Updates a subsidy service.
     *
     */
    public function testPatchServicesSubsidy()
    {
    }

    /**
     * Test case for patchSession
     *
     * Updates a Session.
     *
     */
    public function testPatchSession()
    {
    }

    /**
     * Test case for patchSessionTrack
     *
     * Updates a SessionTrack.
     *
     */
    public function testPatchSessionTrack()
    {
    }

    /**
     * Test case for patchSessionsAllowedParticipantCategory
     *
     * Updates a allowed participant category.
     *
     */
    public function testPatchSessionsAllowedParticipantCategory()
    {
    }

    /**
     * Test case for postAllowedParticipantCategory
     *
     * Adds an allowed participant category to the given arrangement.
     *
     */
    public function testPostAllowedParticipantCategory()
    {
    }

    /**
     * Test case for postArrangement
     *
     * Creates an arrangement.
     *
     */
    public function testPostArrangement()
    {
    }

    /**
     * Test case for postArrangementAnswers
     *
     * Post answers for a participant in a given arrangement.
     *
     */
    public function testPostArrangementAnswers()
    {
    }

    /**
     * Test case for postArrangementAreas
     *
     * Associates an ArrangementArea with an Arrangement. If Configuration AllowMultiSelectOnArea is false all other area associations is deleted first..
     *
     */
    public function testPostArrangementAreas()
    {
    }

    /**
     * Test case for postArrangementCancellation
     *
     * Cancel the arrangement.
     *
     */
    public function testPostArrangementCancellation()
    {
    }

    /**
     * Test case for postArrangementCategories
     *
     * Associates an ArrangementCategory with an Arrangement. If Configuration AllowMultiSelectOnCategory is false all other category associations is deleted first..
     *
     */
    public function testPostArrangementCategories()
    {
    }

    /**
     * Test case for postArrangementGroups
     *
     * Associates an ArrangementGroup with an Arrangement. If Configuration AllowMultiSelectOnGroup is false all other group associations is deleted first..
     *
     */
    public function testPostArrangementGroups()
    {
    }

    /**
     * Test case for postArrangementHotel
     *
     * .
     *
     */
    public function testPostArrangementHotel()
    {
    }

    /**
     * Test case for postArrangementNewSequence
     *
     * .
     *
     */
    public function testPostArrangementNewSequence()
    {
    }

    /**
     * Test case for postArrangementParticipantWorkListItem
     *
     * Will insert a worklist item with regards to the participation.
     *
     */
    public function testPostArrangementParticipantWorkListItem()
    {
    }

    /**
     * Test case for postArrangementPlace
     *
     * Creates a place.
     *
     */
    public function testPostArrangementPlace()
    {
    }

    /**
     * Test case for postArrangementRegularService
     *
     * Adds a regular service to the given arrangement.
     *
     */
    public function testPostArrangementRegularService()
    {
    }

    /**
     * Test case for postArrangementSequence
     *
     * .
     *
     */
    public function testPostArrangementSequence()
    {
    }

    /**
     * Test case for postArrangementSubCategories
     *
     * Associates an ArrangementSubCategory with an Arrangement. If Configuration AllowMultiSelectOnSubCategory is false all other subcategory associations is deleted first..
     *
     */
    public function testPostArrangementSubCategories()
    {
    }

    /**
     * Test case for postArrangementsByCustomFieldAndValue
     *
     * Gets arrangements by customFieldValue.  Please provide an object containing:  {\"type\": {\"identifier\": XX},\"value\": \"XX\"}.
     *
     */
    public function testPostArrangementsByCustomFieldAndValue()
    {
    }

    /**
     * Test case for postCustomFieldValueForArrangement
     *
     * Takes a CustomFieldValue, and inserts it for the given arrangement internal id.  Note that the following values Must be assigned:      - CustomFieldValue.Type.Id      - CustomFieldValue.StartDate      - CustomFieldValue.Value      - Optional, the EndDate can be assigned      - Optional, the Description can be assigned.
     *
     */
    public function testPostCustomFieldValueForArrangement()
    {
    }

    /**
     * Test case for postEventCrew
     *
     * Adds a new member to the crew.
     *
     */
    public function testPostEventCrew()
    {
    }

    /**
     * Test case for postParticipantAttendance
     *
     * Set attendance for a Participant for the arrangement.
     *
     */
    public function testPostParticipantAttendance()
    {
    }

    /**
     * Test case for postParticipantCancellation
     *
     * Cancel participation of a Participant for all participations on the arrangement.
     *
     */
    public function testPostParticipantCancellation()
    {
    }

    /**
     * Test case for postParticipantServices
     *
     * Adds a service to a participant.
     *
     */
    public function testPostParticipantServices()
    {
    }

    /**
     * Test case for postParticipantSession
     *
     * Associates a Participant with a Session.
     *
     */
    public function testPostParticipantSession()
    {
    }

    /**
     * Test case for postParticipantSessionServices
     *
     * Adds a service to a participant on a specific session.
     *
     */
    public function testPostParticipantSessionServices()
    {
    }

    /**
     * Test case for postParticipantSessionsCancellation
     *
     * Cancel participation of a participant for the given session.
     *
     */
    public function testPostParticipantSessionsCancellation()
    {
    }

    /**
     * Test case for postServicesCancellation
     *
     * Creates a cancellation service.
     *
     */
    public function testPostServicesCancellation()
    {
    }

    /**
     * Test case for postServicesCompanion
     *
     * Creates a companion service.
     *
     */
    public function testPostServicesCompanion()
    {
    }

    /**
     * Test case for postServicesDiscount
     *
     * Creates a discount service.
     *
     */
    public function testPostServicesDiscount()
    {
    }

    /**
     * Test case for postServicesHotelRoom
     *
     * Creates a hotel room service.
     *
     */
    public function testPostServicesHotelRoom()
    {
    }

    /**
     * Test case for postServicesRegular
     *
     * Creates a regular service.
     *
     */
    public function testPostServicesRegular()
    {
    }

    /**
     * Test case for postServicesSessionsCompanion
     *
     * Creates a companion service for the given Session.
     *
     */
    public function testPostServicesSessionsCompanion()
    {
    }

    /**
     * Test case for postServicesSessionsRegular
     *
     * Creates a regular service for the given Session.
     *
     */
    public function testPostServicesSessionsRegular()
    {
    }

    /**
     * Test case for postServicesSubsidy
     *
     * Creates a subsidy service.
     *
     */
    public function testPostServicesSubsidy()
    {
    }

    /**
     * Test case for postSession
     *
     * Creates a Session.
     *
     */
    public function testPostSession()
    {
    }

    /**
     * Test case for postSessionTrack
     *
     * Creates a SessionTrack.
     *
     */
    public function testPostSessionTrack()
    {
    }

    /**
     * Test case for postSessionsAllowedParticipantCategory
     *
     * Creates a allowed participant category.
     *
     */
    public function testPostSessionsAllowedParticipantCategory()
    {
    }

    /**
     * Test case for putAllowedParticipantCategory
     *
     * Updates a allowed participant category.
     *
     */
    public function testPutAllowedParticipantCategory()
    {
    }

    /**
     * Test case for putArrangement
     *
     * Patch an arrangement of type Course.
     *
     */
    public function testPutArrangement()
    {
    }

    /**
     * Test case for putArrangementHotel
     *
     * .
     *
     */
    public function testPutArrangementHotel()
    {
    }

    /**
     * Test case for putArrangementParticipant
     *
     * Updates a participant.
     *
     */
    public function testPutArrangementParticipant()
    {
    }

    /**
     * Test case for putArrangementPlace
     *
     * Updates a place.
     *
     */
    public function testPutArrangementPlace()
    {
    }

    /**
     * Test case for putServicesCancellation
     *
     * Updates a cancellation service.
     *
     */
    public function testPutServicesCancellation()
    {
    }

    /**
     * Test case for putServicesCompanion
     *
     * Updates a companion service.
     *
     */
    public function testPutServicesCompanion()
    {
    }

    /**
     * Test case for putServicesDiscount
     *
     * Updates a discount service.
     *
     */
    public function testPutServicesDiscount()
    {
    }

    /**
     * Test case for putServicesHotelRoom
     *
     * Updates a hotel room service.
     *
     */
    public function testPutServicesHotelRoom()
    {
    }

    /**
     * Test case for putServicesRegular
     *
     * Updates a regular service.
     *
     */
    public function testPutServicesRegular()
    {
    }

    /**
     * Test case for putServicesSessionsCompanion
     *
     * Updates a companion service.
     *
     */
    public function testPutServicesSessionsCompanion()
    {
    }

    /**
     * Test case for putServicesSessionsRegular
     *
     * Updates a regular service.
     *
     */
    public function testPutServicesSessionsRegular()
    {
    }

    /**
     * Test case for putServicesSubsidy
     *
     * Updates a subsidy service.
     *
     */
    public function testPutServicesSubsidy()
    {
    }

    /**
     * Test case for putSession
     *
     * Updates a Session.
     *
     */
    public function testPutSession()
    {
    }

    /**
     * Test case for putSessionTrack
     *
     * Updates a SessionTrack.
     *
     */
    public function testPutSessionTrack()
    {
    }

    /**
     * Test case for putSessionsAllowedParticipantCategory
     *
     * Updates a allowed participant category.
     *
     */
    public function testPutSessionsAllowedParticipantCategory()
    {
    }
}
