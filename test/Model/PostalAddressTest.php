<?php
/**
 * PostalAddressTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Membercare\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Membercare API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@membercare.dk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace Membercare\Client;

use PHPUnit\Framework\TestCase;

/**
 * PostalAddressTest Class Doc Comment
 *
 * @category    Class
 * @description Contains relevant information related to a PostalAddress.
 * @package     Membercare\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PostalAddressTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "PostalAddress"
     */
    public function testPostalAddress()
    {
    }

    /**
     * Test attribute "url"
     */
    public function testPropertyUrl()
    {
    }

    /**
     * Test attribute "id"
     */
    public function testPropertyId()
    {
    }

    /**
     * Test attribute "attention"
     */
    public function testPropertyAttention()
    {
    }

    /**
     * Test attribute "care_of"
     */
    public function testPropertyCareOf()
    {
    }

    /**
     * Test attribute "street"
     */
    public function testPropertyStreet()
    {
    }

    /**
     * Test attribute "number"
     */
    public function testPropertyNumber()
    {
    }

    /**
     * Test attribute "letter"
     */
    public function testPropertyLetter()
    {
    }

    /**
     * Test attribute "floor"
     */
    public function testPropertyFloor()
    {
    }

    /**
     * Test attribute "suite"
     */
    public function testPropertySuite()
    {
    }

    /**
     * Test attribute "location"
     */
    public function testPropertyLocation()
    {
    }

    /**
     * Test attribute "post_office_box"
     */
    public function testPropertyPostOfficeBox()
    {
    }

    /**
     * Test attribute "postal_code"
     */
    public function testPropertyPostalCode()
    {
    }

    /**
     * Test attribute "country"
     */
    public function testPropertyCountry()
    {
    }

    /**
     * Test attribute "municipality"
     */
    public function testPropertyMunicipality()
    {
    }

    /**
     * Test attribute "start"
     */
    public function testPropertyStart()
    {
    }

    /**
     * Test attribute "end"
     */
    public function testPropertyEnd()
    {
    }

    /**
     * Test attribute "address_type"
     */
    public function testPropertyAddressType()
    {
    }

    /**
     * Test attribute "address_description"
     */
    public function testPropertyAddressDescription()
    {
    }

    /**
     * Test attribute "formatted_address"
     */
    public function testPropertyFormattedAddress()
    {
    }

    /**
     * Test attribute "address_line_one"
     */
    public function testPropertyAddressLineOne()
    {
    }

    /**
     * Test attribute "zip_city_country"
     */
    public function testPropertyZipCityCountry()
    {
    }

    /**
     * Test attribute "last_change"
     */
    public function testPropertyLastChange()
    {
    }

    /**
     * Test attribute "street_and_zip_one_line"
     */
    public function testPropertyStreetAndZipOneLine()
    {
    }
}
